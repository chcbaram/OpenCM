
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003438  08003000  08003000  00003000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e4  20000000  08006438  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000e34  20000200  08006800  00008200  2**9
                  ALLOC
  3 ._usrstack    00000100  20001034  08007634  00008200  2**0
                  ALLOC
  4 .ARM.attributes 00000033  00000000  00000000  000080e4  2**0
                  CONTENTS, READONLY
  5 .debug_info   00006427  00000000  00000000  00008117  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002268  00000000  00000000  0000e53e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    00004b61  00000000  00000000  000107a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000848  00000000  00000000  00015307  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000c80  00000000  00000000  00015b4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000026b6  00000000  00000000  000167cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001cfa  00000000  00000000  00018e85  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000070  00000000  00000000  0001ab7f  2**0
                  CONTENTS, READONLY
 13 .debug_frame  000012c4  00000000  00000000  0001abf0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08003000 <g_pfnVectors>:
 8003000:	00 50 00 20 51 3c 00 08                             .P. Q<..

08003008 <LED_Tick>:
static void Main_Init( void );



void LED_Tick( void )
{
 8003008:	b508      	push	{r3, lr}
	Hw_Led_Toggle(0);
 800300a:	f244 0319 	movw	r3, #16409	; 0x4019
 800300e:	2000      	movs	r0, #0
 8003010:	f6c0 0300 	movt	r3, #2048	; 0x800
 8003014:	4798      	blx	r3
 8003016:	bd08      	pop	{r3, pc}

08003018 <main>:
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 8003018:	b500      	push	{lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 800301a:	4b0a      	ldr	r3, [pc, #40]	; (8003044 <main+0x2c>)
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 800301c:	b083      	sub	sp, #12
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 800301e:	4798      	blx	r3
	Ap_Init();
	
	Hw_Timer_Set  ( HW_TIMER_CH_LED, 1000, LOOP_TIME, LED_Tick, NULL );
 8003020:	2400      	movs	r4, #0
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
	Ap_Init();
 8003022:	4809      	ldr	r0, [pc, #36]	; (8003048 <main+0x30>)
 8003024:	4780      	blx	r0
	
	Hw_Timer_Set  ( HW_TIMER_CH_LED, 1000, LOOP_TIME, LED_Tick, NULL );
 8003026:	4d09      	ldr	r5, [pc, #36]	; (800304c <main+0x34>)
 8003028:	2202      	movs	r2, #2
 800302a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800302e:	4b08      	ldr	r3, [pc, #32]	; (8003050 <main+0x38>)
 8003030:	4620      	mov	r0, r4
 8003032:	9400      	str	r4, [sp, #0]
 8003034:	47a8      	blx	r5
	Hw_Timer_Start( HW_TIMER_CH_LED );		
 8003036:	4620      	mov	r0, r4
 8003038:	4906      	ldr	r1, [pc, #24]	; (8003054 <main+0x3c>)
 800303a:	4788      	blx	r1
	
	Main_Init();

	//-- 명령어 처리
	//  
	Ap_GLcdMenu_ExeCmd();    
 800303c:	4a06      	ldr	r2, [pc, #24]	; (8003058 <main+0x40>)
 800303e:	4790      	blx	r2
 8003040:	e7fe      	b.n	8003040 <main+0x28>
 8003042:	bf00      	nop
 8003044:	08003d75 	.word	0x08003d75
 8003048:	0800305d 	.word	0x0800305d
 800304c:	08004435 	.word	0x08004435
 8003050:	08003009 	.word	0x08003009
 8003054:	08004455 	.word	0x08004455
 8003058:	08003135 	.word	0x08003135

0800305c <Ap_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Init( void )
{
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop

08003060 <Ap_GLcdMenu_ShowMenu>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_GLcdMenu_ShowMenu(void)
{
 8003060:	b538      	push	{r3, r4, r5, lr}
	u8 key;

	Lb_printf("\n\n");
 8003062:	f246 00a4 	movw	r0, #24740	; 0x60a4
 8003066:	f643 147d 	movw	r4, #14717	; 0x397d
	Lb_printf("*******************************************************\n");
 800306a:	f246 05a8 	movw	r5, #24744	; 0x60a8
---------------------------------------------------------------------------*/
void Ap_GLcdMenu_ShowMenu(void)
{
	u8 key;

	Lb_printf("\n\n");
 800306e:	f6c0 0400 	movt	r4, #2048	; 0x800
	Lb_printf("*******************************************************\n");
 8003072:	f6c0 0500 	movt	r5, #2048	; 0x800
---------------------------------------------------------------------------*/
void Ap_GLcdMenu_ShowMenu(void)
{
	u8 key;

	Lb_printf("\n\n");
 8003076:	f6c0 0000 	movt	r0, #2048	; 0x800
 800307a:	47a0      	blx	r4
	Lb_printf("*******************************************************\n");
 800307c:	4628      	mov	r0, r5
 800307e:	47a0      	blx	r4
	Lb_printf("                      OpenCM                           \n");
 8003080:	f246 00e4 	movw	r0, #24804	; 0x60e4
 8003084:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003088:	47a0      	blx	r4
	Lb_printf("*******************************************************\n");
 800308a:	4628      	mov	r0, r5
 800308c:	47a0      	blx	r4
	Lb_printf("* 1.                                                  *\n");
 800308e:	f246 1020 	movw	r0, #24864	; 0x6120
 8003092:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003096:	47a0      	blx	r4
	Lb_printf("* 2.                                                  *\n");
 8003098:	f246 105c 	movw	r0, #24924	; 0x615c
 800309c:	f6c0 0000 	movt	r0, #2048	; 0x800
 80030a0:	47a0      	blx	r4
	Lb_printf("* 3.                                                  *\n");
 80030a2:	f246 1098 	movw	r0, #24984	; 0x6198
 80030a6:	f6c0 0000 	movt	r0, #2048	; 0x800
 80030aa:	47a0      	blx	r4
	Lb_printf("* 4.                                                  *\n");
 80030ac:	f246 10d4 	movw	r0, #25044	; 0x61d4
 80030b0:	f6c0 0000 	movt	r0, #2048	; 0x800
 80030b4:	47a0      	blx	r4
	Lb_printf("* 5.                                                  *\n");
 80030b6:	f246 2010 	movw	r0, #25104	; 0x6210
 80030ba:	f6c0 0000 	movt	r0, #2048	; 0x800
 80030be:	47a0      	blx	r4
	Lb_printf("* 6.                                                  *\n");
 80030c0:	f246 204c 	movw	r0, #25164	; 0x624c
 80030c4:	f6c0 0000 	movt	r0, #2048	; 0x800
 80030c8:	47a0      	blx	r4
	Lb_printf("* 7.                                                  *\n");
 80030ca:	f246 2088 	movw	r0, #25224	; 0x6288
 80030ce:	f6c0 0000 	movt	r0, #2048	; 0x800
 80030d2:	47a0      	blx	r4
	Lb_printf("* 8.                                                  *\n");
 80030d4:	f246 20c4 	movw	r0, #25284	; 0x62c4
 80030d8:	f6c0 0000 	movt	r0, #2048	; 0x800
 80030dc:	47a0      	blx	r4
	Lb_printf("* 9.                                                  *\n");
 80030de:	f246 3000 	movw	r0, #25344	; 0x6300
 80030e2:	f6c0 0000 	movt	r0, #2048	; 0x800
 80030e6:	47a0      	blx	r4
	Lb_printf("* m.  Menu                                            *\n");
 80030e8:	f246 303c 	movw	r0, #25404	; 0x633c
 80030ec:	f6c0 0000 	movt	r0, #2048	; 0x800
 80030f0:	47a0      	blx	r4
	Lb_printf("*******************************************************\n");
 80030f2:	4628      	mov	r0, r5
 80030f4:	47a0      	blx	r4
	Lb_printf("\n");
 80030f6:	f246 3078 	movw	r0, #25464	; 0x6378
 80030fa:	f6c0 0000 	movt	r0, #2048	; 0x800
 80030fe:	47a0      	blx	r4
 8003100:	bd38      	pop	{r3, r4, r5, pc}
 8003102:	bf00      	nop

08003104 <Ap_GLcdMenu_GetCmd>:
     ARG     : void
     RET     : 
				u8 : 눌려진 메뉴키 데이터 
---------------------------------------------------------------------------*/
u8 Ap_GLcdMenu_GetCmd(void)
{
 8003104:	b538      	push	{r3, r4, r5, lr}
	u8  key;
	

	Lb_printf(">> ");
 8003106:	f246 307c 	movw	r0, #25468	; 0x637c
 800310a:	f643 147d 	movw	r4, #14717	; 0x397d
 800310e:	f6c0 0400 	movt	r4, #2048	; 0x800
 8003112:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003116:	47a0      	blx	r4

    key=get_byte();
 8003118:	f643 7309 	movw	r3, #16137	; 0x3f09
 800311c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8003120:	4798      	blx	r3
 8003122:	4605      	mov	r5, r0
	
	Lb_printf("\n");
 8003124:	f246 3078 	movw	r0, #25464	; 0x6378
 8003128:	f6c0 0000 	movt	r0, #2048	; 0x800
 800312c:	47a0      	blx	r4
	
    return key;
}
 800312e:	4628      	mov	r0, r5
 8003130:	bd38      	pop	{r3, r4, r5, pc}
 8003132:	bf00      	nop

08003134 <Ap_GLcdMenu_ExeCmd>:
     ARG     : void
     RET     : 
				u8 : 눌려진 메뉴키 데이터 
---------------------------------------------------------------------------*/
u8 Ap_GLcdMenu_ExeCmd(void)
{
 8003134:	b538      	push	{r3, r4, r5, lr}
    HW_MPU6050_DATA_OBJ MPU6050_Data;


	if( ExeFirst == TRUE )
	{
		Ap_GLcdMenu_ShowMenu();		
 8003136:	4d08      	ldr	r5, [pc, #32]	; (8003158 <Ap_GLcdMenu_ExeCmd+0x24>)
 8003138:	47a8      	blx	r5
 800313a:	4c08      	ldr	r4, [pc, #32]	; (800315c <Ap_GLcdMenu_ExeCmd+0x28>)
	}

    while( (key = Ap_GLcdMenu_GetCmd()) != 0 )
 800313c:	47a0      	blx	r4
 800313e:	4603      	mov	r3, r0
 8003140:	b140      	cbz	r0, 8003154 <Ap_GLcdMenu_ExeCmd+0x20>
    {
        switch(key)
 8003142:	2b4d      	cmp	r3, #77	; 0x4d
 8003144:	d001      	beq.n	800314a <Ap_GLcdMenu_ExeCmd+0x16>
 8003146:	2b6d      	cmp	r3, #109	; 0x6d
 8003148:	d1f8      	bne.n	800313c <Ap_GLcdMenu_ExeCmd+0x8>
           case '0':
               break;

			case 'm':
			case 'M':
				Ap_GLcdMenu_ShowMenu();
 800314a:	47a8      	blx	r5
	if( ExeFirst == TRUE )
	{
		Ap_GLcdMenu_ShowMenu();		
	}

    while( (key = Ap_GLcdMenu_GetCmd()) != 0 )
 800314c:	47a0      	blx	r4
 800314e:	4603      	mov	r3, r0
 8003150:	2800      	cmp	r0, #0
 8003152:	d1f6      	bne.n	8003142 <Ap_GLcdMenu_ExeCmd+0xe>
               break;
        }
    }
    
    return key;
}
 8003154:	bd38      	pop	{r3, r4, r5, pc}
 8003156:	bf00      	nop
 8003158:	08003061 	.word	0x08003061
 800315c:	08003105 	.word	0x08003105

08003160 <print_byte_out>:




void print_byte_out(unsigned int c)
{
 8003160:	b538      	push	{r3, r4, r5, lr}
	if( StrPrintMode == LB_PRINT_OUT_UART )
 8003162:	4b09      	ldr	r3, [pc, #36]	; (8003188 <print_byte_out+0x28>)




void print_byte_out(unsigned int c)
{
 8003164:	4605      	mov	r5, r0
	if( StrPrintMode == LB_PRINT_OUT_UART )
 8003166:	7819      	ldrb	r1, [r3, #0]
 8003168:	b151      	cbz	r1, 8003180 <print_byte_out+0x20>
	{
		print_byte(c);
	}
	else
	{
		pStrPrintBuf[ StrPrintBufIndex++ ] = c; 
 800316a:	4a08      	ldr	r2, [pc, #32]	; (800318c <print_byte_out+0x2c>)
 800316c:	4908      	ldr	r1, [pc, #32]	; (8003190 <print_byte_out+0x30>)
 800316e:	6814      	ldr	r4, [r2, #0]
 8003170:	6808      	ldr	r0, [r1, #0]
 8003172:	1c63      	adds	r3, r4, #1
 8003174:	5505      	strb	r5, [r0, r4]
		pStrPrintBuf[ StrPrintBufIndex   ] = 0; 
 8003176:	6809      	ldr	r1, [r1, #0]
	{
		print_byte(c);
	}
	else
	{
		pStrPrintBuf[ StrPrintBufIndex++ ] = c; 
 8003178:	6013      	str	r3, [r2, #0]
		pStrPrintBuf[ StrPrintBufIndex   ] = 0; 
 800317a:	2200      	movs	r2, #0
 800317c:	54ca      	strb	r2, [r1, r3]
 800317e:	bd38      	pop	{r3, r4, r5, pc}

void print_byte_out(unsigned int c)
{
	if( StrPrintMode == LB_PRINT_OUT_UART )
	{
		print_byte(c);
 8003180:	4b04      	ldr	r3, [pc, #16]	; (8003194 <print_byte_out+0x34>)
 8003182:	4798      	blx	r3
 8003184:	bd38      	pop	{r3, r4, r5, pc}
 8003186:	bf00      	nop
 8003188:	20000204 	.word	0x20000204
 800318c:	20000200 	.word	0x20000200
 8003190:	200002b4 	.word	0x200002b4
 8003194:	08003eed 	.word	0x08003eed

08003198 <PrintString>:
        }
        return;
}

void PrintString(char *fmt, char *s)
{
 8003198:	b538      	push	{r3, r4, r5, lr}
        if (!fmt || !s) return;
 800319a:	b148      	cbz	r0, 80031b0 <PrintString+0x18>
 800319c:	b141      	cbz	r1, 80031b0 <PrintString+0x18>
        while (*s) print_byte_out(*s++);
 800319e:	7808      	ldrb	r0, [r1, #0]
 80031a0:	b130      	cbz	r0, 80031b0 <PrintString+0x18>
 80031a2:	4d04      	ldr	r5, [pc, #16]	; (80031b4 <PrintString+0x1c>)
 80031a4:	460c      	mov	r4, r1
 80031a6:	47a8      	blx	r5
 80031a8:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80031ac:	2800      	cmp	r0, #0
 80031ae:	d1fa      	bne.n	80031a6 <PrintString+0xe>
 80031b0:	bd38      	pop	{r3, r4, r5, pc}
 80031b2:	bf00      	nop
 80031b4:	08003161 	.word	0x08003161

080031b8 <DecToLong>:
// 역할 : 10진수 문자열 s에서 정수를 만들어 retval이 가리키는 위치에 기록.
// 매개 : s      : 변환할 문자열의 주소.
//        retval : 변환된 값이 기록될 주소.
// 반환 : return : 1 : success                0 : failure.
// 주의 :
int DecToLong(char *s, long *retval){
 80031b8:	b430      	push	{r4, r5}
        long remainder;
        if (!s || !s[0]) return false;
 80031ba:	b1c8      	cbz	r0, 80031f0 <DecToLong+0x38>
 80031bc:	7803      	ldrb	r3, [r0, #0]
 80031be:	b1cb      	cbz	r3, 80031f4 <DecToLong+0x3c>


        for (*retval=0; *s; s++){
 80031c0:	2300      	movs	r3, #0
 80031c2:	600b      	str	r3, [r1, #0]
 80031c4:	7802      	ldrb	r2, [r0, #0]
 80031c6:	b192      	cbz	r2, 80031ee <DecToLong+0x36>
                if (*s < '0' || *s > '9') return false;
 80031c8:	3a30      	subs	r2, #48	; 0x30
 80031ca:	b2d4      	uxtb	r4, r2
 80031cc:	2c09      	cmp	r4, #9
 80031ce:	d902      	bls.n	80031d6 <DecToLong+0x1e>
 80031d0:	e012      	b.n	80031f8 <DecToLong+0x40>
 80031d2:	2d09      	cmp	r5, #9
 80031d4:	d810      	bhi.n	80031f8 <DecToLong+0x40>
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
 80031d6:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 80031da:	eb02 0344 	add.w	r3, r2, r4, lsl #1
 80031de:	600b      	str	r3, [r1, #0]
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
 80031e0:	f810 4f01 	ldrb.w	r4, [r0, #1]!
                if (*s < '0' || *s > '9') return false;
 80031e4:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 80031e8:	b2d5      	uxtb	r5, r2
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
 80031ea:	2c00      	cmp	r4, #0
 80031ec:	d1f1      	bne.n	80031d2 <DecToLong+0x1a>
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
        }


        return true;
 80031ee:	2001      	movs	r0, #1
}        // DecToLong.
 80031f0:	bc30      	pop	{r4, r5}
 80031f2:	4770      	bx	lr
//        retval : 변환된 값이 기록될 주소.
// 반환 : return : 1 : success                0 : failure.
// 주의 :
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;
 80031f4:	4618      	mov	r0, r3
 80031f6:	e7fb      	b.n	80031f0 <DecToLong+0x38>


        for (*retval=0; *s; s++){
                if (*s < '0' || *s > '9') return false;
 80031f8:	2000      	movs	r0, #0
 80031fa:	e7f9      	b.n	80031f0 <DecToLong+0x38>

080031fc <PrintDec>:
        return;
}


void PrintDec(char *fmt, int l)
{
 80031fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003200:	4682      	mov	sl, r0
		l = -l;	
	}


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 8003202:	7800      	ldrb	r0, [r0, #0]
void PrintDec(char *fmt, int l)
{
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
 8003204:	2300      	movs	r3, #0
        return;
}


void PrintDec(char *fmt, int l)
{
 8003206:	b084      	sub	sp, #16
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
	bool        leading_zero=true;			// long형의 data를 출력하기 위한 변수.
	long        divisor, result, remainder;
	char        sign = 0;

	if( l < 0 )
 8003208:	f1b1 0800 	subs.w	r8, r1, #0
void PrintDec(char *fmt, int l)
{
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
 800320c:	9300      	str	r3, [sp, #0]
	char        sign = 0;

	if( l < 0 )
	{
		sign = 1;
		l = -l;	
 800320e:	bfba      	itte	lt
 8003210:	f1c8 0800 	rsblt	r8, r8, #0
	long        divisor, result, remainder;
	char        sign = 0;

	if( l < 0 )
	{
		sign = 1;
 8003214:	f04f 0901 	movlt.w	r9, #1
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
	bool        leading_zero=true;			// long형의 data를 출력하기 위한 변수.
	long        divisor, result, remainder;
	char        sign = 0;
 8003218:	4699      	movge	r9, r3
		l = -l;	
	}


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 800321a:	2800      	cmp	r0, #0
 800321c:	f000 8140 	beq.w	80034a0 <PrintDec+0x2a4>

void PrintDec(char *fmt, int l)
{
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
 8003220:	2500      	movs	r5, #0


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
 8003222:	2864      	cmp	r0, #100	; 0x64
 8003224:	d029      	beq.n	800327a <PrintDec+0x7e>
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
			i--;
			DecToLong(tol, &flagcnt);
 8003226:	4ea1      	ldr	r6, [pc, #644]	; (80034ac <PrintDec+0x2b0>)


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
 8003228:	462c      	mov	r4, r5
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 800322a:	462f      	mov	r7, r5

	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
 800322c:	f1a0 0231 	sub.w	r2, r0, #49	; 0x31
 8003230:	2a08      	cmp	r2, #8
 8003232:	f200 808e 	bhi.w	8003352 <PrintDec+0x156>
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 8003236:	f81a 2004 	ldrb.w	r2, [sl, r4]
 800323a:	eb0a 0104 	add.w	r1, sl, r4
 800323e:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
 8003242:	2809      	cmp	r0, #9
 8003244:	f04f 0300 	mov.w	r3, #0
 8003248:	a801      	add	r0, sp, #4
 800324a:	d809      	bhi.n	8003260 <PrintDec+0x64>
			{
				tol[j] = s[i++];
 800324c:	54c2      	strb	r2, [r0, r3]
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 800324e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
			{
				tol[j] = s[i++];
 8003252:	3401      	adds	r4, #1
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 8003254:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8003258:	3301      	adds	r3, #1
 800325a:	f1be 0f09 	cmp.w	lr, #9
 800325e:	d9f5      	bls.n	800324c <PrintDec+0x50>
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 8003260:	a904      	add	r1, sp, #16
 8003262:	18ca      	adds	r2, r1, r3
			i--;
			DecToLong(tol, &flagcnt);
 8003264:	4669      	mov	r1, sp
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 8003266:	f802 7c0c 	strb.w	r7, [r2, #-12]
			i--;
 800326a:	3c01      	subs	r4, #1
			DecToLong(tol, &flagcnt);
 800326c:	47b0      	blx	r6
		l = -l;	
	}


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 800326e:	3401      	adds	r4, #1
 8003270:	f81a 0004 	ldrb.w	r0, [sl, r4]
 8003274:	b108      	cbz	r0, 800327a <PrintDec+0x7e>
	{
		if (c=='d') break;
 8003276:	2864      	cmp	r0, #100	; 0x64
 8003278:	d1d8      	bne.n	800322c <PrintDec+0x30>
		else if (c=='0') flag0=true;
		else if (c=='l') flagl=true;
		else continue;
	}

	if( sign == 1 ) print_byte_out('-');
 800327a:	f1b9 0f00 	cmp.w	r9, #0
 800327e:	f040 810b 	bne.w	8003498 <PrintDec+0x29c>
 8003282:	4e8b      	ldr	r6, [pc, #556]	; (80034b0 <PrintDec+0x2b4>)


	// 위의 flag에 따라 출력.
	if (flagcnt)
 8003284:	9800      	ldr	r0, [sp, #0]
 8003286:	2800      	cmp	r0, #0
 8003288:	d067      	beq.n	800335a <PrintDec+0x15e>
	{
                if (flagcnt>9) flagcnt=9;
 800328a:	2809      	cmp	r0, #9
 800328c:	f300 80ff 	bgt.w	800348e <PrintDec+0x292>
}

int Power(int num, int cnt)
{
        long retval=num;
        cnt--;
 8003290:	1e44      	subs	r4, r0, #1


        while (cnt--){
 8003292:	1e81      	subs	r1, r0, #2
 8003294:	1ec7      	subs	r7, r0, #3
 8003296:	2c00      	cmp	r4, #0
 8003298:	f000 8104 	beq.w	80034a4 <PrintDec+0x2a8>
 800329c:	f001 0401 	and.w	r4, r1, #1
                retval *= num;
 80032a0:	2364      	movs	r3, #100	; 0x64
{
        long retval=num;
        cnt--;


        while (cnt--){
 80032a2:	1e4a      	subs	r2, r1, #1
 80032a4:	b171      	cbz	r1, 80032c4 <PrintDec+0xc8>
 80032a6:	b124      	cbz	r4, 80032b2 <PrintDec+0xb6>
 80032a8:	3a01      	subs	r2, #1
 80032aa:	1c51      	adds	r1, r2, #1
                retval *= num;
 80032ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
        long retval=num;
        cnt--;


        while (cnt--){
 80032b0:	d008      	beq.n	80032c4 <PrintDec+0xc8>
                retval *= num;
 80032b2:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 80032b6:	00e1      	lsls	r1, r4, #3
 80032b8:	eb01 0344 	add.w	r3, r1, r4, lsl #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 80032bc:	3a02      	subs	r2, #2
                retval *= num;
 80032be:	005b      	lsls	r3, r3, #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 80032c0:	1c51      	adds	r1, r2, #1
 80032c2:	d1f6      	bne.n	80032b2 <PrintDec+0xb6>

	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 80032c4:	fb98 f2f3 	sdiv	r2, r8, r3
{
        long retval=num;
        cnt--;


        while (cnt--){
 80032c8:	2802      	cmp	r0, #2

	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 80032ca:	fb03 8812 	mls	r8, r3, r2, r8
{
        long retval=num;
        cnt--;


        while (cnt--){
 80032ce:	f000 80eb 	beq.w	80034a8 <PrintDec+0x2ac>
 80032d2:	f007 0001 	and.w	r0, r7, #1
                retval *= num;
 80032d6:	2464      	movs	r4, #100	; 0x64
{
        long retval=num;
        cnt--;


        while (cnt--){
 80032d8:	1e79      	subs	r1, r7, #1
 80032da:	b177      	cbz	r7, 80032fa <PrintDec+0xfe>
 80032dc:	b120      	cbz	r0, 80032e8 <PrintDec+0xec>
 80032de:	3901      	subs	r1, #1
 80032e0:	1c48      	adds	r0, r1, #1
                retval *= num;
 80032e2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
        long retval=num;
        cnt--;


        while (cnt--){
 80032e6:	d008      	beq.n	80032fa <PrintDec+0xfe>
                retval *= num;
 80032e8:	eb04 0784 	add.w	r7, r4, r4, lsl #2
 80032ec:	00fc      	lsls	r4, r7, #3
 80032ee:	eb04 0347 	add.w	r3, r4, r7, lsl #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 80032f2:	3902      	subs	r1, #2
                retval *= num;
 80032f4:	005c      	lsls	r4, r3, #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 80032f6:	1c4f      	adds	r7, r1, #1
 80032f8:	d1f6      	bne.n	80032e8 <PrintDec+0xec>
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 80032fa:	f246 6767 	movw	r7, #26215	; 0x6667
        return;
}

int Power(int num, int cnt)
{
        long retval=num;
 80032fe:	f04f 0901 	mov.w	r9, #1
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 8003302:	f2c6 6766 	movt	r7, #26214	; 0x6666
 8003306:	e00f      	b.n	8003328 <PrintDec+0x12c>
                        result = remainder/divisor;
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
 8003308:	2c01      	cmp	r4, #1
 800330a:	d015      	beq.n	8003338 <PrintDec+0x13c>


                        if (leading_zero==true){
 800330c:	f1b9 0f00 	cmp.w	r9, #0
 8003310:	d012      	beq.n	8003338 <PrintDec+0x13c>
                                if (flag0)        print_byte_out('0');
 8003312:	2030      	movs	r0, #48	; 0x30
 8003314:	b905      	cbnz	r5, 8003318 <PrintDec+0x11c>
                                else                print_byte_out(' ');
 8003316:	2020      	movs	r0, #32
 8003318:	47b0      	blx	r6
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 800331a:	fb87 2004 	smull	r2, r0, r7, r4
 800331e:	17e1      	asrs	r1, r4, #31
 8003320:	ebc1 04a0 	rsb	r4, r1, r0, asr #2
 8003324:	2c00      	cmp	r4, #0
 8003326:	dd11      	ble.n	800334c <PrintDec+0x150>
                        result = remainder/divisor;
 8003328:	fb98 f2f4 	sdiv	r2, r8, r4

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 800332c:	b2d0      	uxtb	r0, r2
 800332e:	3030      	adds	r0, #48	; 0x30
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8003330:	fb04 8812 	mls	r8, r4, r2, r8


                        if (result!=0 || divisor==1) leading_zero = false;
 8003334:	2a00      	cmp	r2, #0
 8003336:	d0e7      	beq.n	8003308 <PrintDec+0x10c>

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 8003338:	47b0      	blx	r6
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 800333a:	fb87 2004 	smull	r2, r0, r7, r4
 800333e:	17e1      	asrs	r1, r4, #31
 8003340:	ebc1 04a0 	rsb	r4, r1, r0, asr #2
 8003344:	2c00      	cmp	r4, #0

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 8003346:	f04f 0900 	mov.w	r9, #0
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 800334a:	dced      	bgt.n	8003328 <PrintDec+0x12c>
                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
                }
        }
        return;
}
 800334c:	b004      	add	sp, #16
 800334e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			}
			tol[j] = '\0';
			i--;
			DecToLong(tol, &flagcnt);
		}
		else if (c=='0') flag0=true;
 8003352:	2830      	cmp	r0, #48	; 0x30
 8003354:	bf08      	it	eq
 8003356:	2501      	moveq	r5, #1
 8003358:	e789      	b.n	800326e <PrintDec+0x72>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800335a:	f642 73a1 	movw	r3, #12193	; 0x2fa1
 800335e:	f2c4 43b8 	movt	r3, #17592	; 0x44b8
 8003362:	fb83 2408 	smull	r2, r4, r3, r8
 8003366:	ea4f 71e8 	mov.w	r1, r8, asr #31
                        remainder %= divisor;
 800336a:	f44f 424a 	mov.w	r2, #51712	; 0xca00
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800336e:	ebc1 7024 	rsb	r0, r1, r4, asr #28
                        remainder %= divisor;
 8003372:	f6c3 329a 	movt	r2, #15258	; 0x3b9a
 8003376:	fb02 8810 	mls	r8, r2, r0, r8


                        if (result!=0 || divisor==1) leading_zero = false;
 800337a:	2800      	cmp	r0, #0
 800337c:	f000 809a 	beq.w	80034b4 <PrintDec+0x2b8>
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8003380:	b2c0      	uxtb	r0, r0
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8003382:	f643 3489 	movw	r4, #15241	; 0x3b89
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8003386:	3030      	adds	r0, #48	; 0x30
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8003388:	f2c5 54e6 	movt	r4, #21990	; 0x55e6
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 800338c:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800338e:	fb84 2008 	smull	r2, r0, r4, r8
 8003392:	ea4f 71e8 	mov.w	r1, r8, asr #31
                        remainder %= divisor;
 8003396:	f44f 4261 	mov.w	r2, #57600	; 0xe100
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800339a:	ebc1 6060 	rsb	r0, r1, r0, asr #25
                        remainder %= divisor;
 800339e:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
 80033a2:	fb02 8410 	mls	r4, r2, r0, r8


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80033a6:	3030      	adds	r0, #48	; 0x30
 80033a8:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80033aa:	f64c 236b 	movw	r3, #51819	; 0xca6b
 80033ae:	f6c6 335f 	movt	r3, #27487	; 0x6b5f
 80033b2:	fb83 2004 	smull	r2, r0, r3, r4
 80033b6:	17e1      	asrs	r1, r4, #31
                        remainder %= divisor;
 80033b8:	f249 6280 	movw	r2, #38528	; 0x9680
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80033bc:	ebc1 50a0 	rsb	r0, r1, r0, asr #22
                        remainder %= divisor;
 80033c0:	f2c0 0298 	movt	r2, #152	; 0x98
 80033c4:	fb02 4410 	mls	r4, r2, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80033c8:	3030      	adds	r0, #48	; 0x30
 80033ca:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80033cc:	f64d 6383 	movw	r3, #56963	; 0xde83
 80033d0:	f2c4 331b 	movt	r3, #17179	; 0x431b
 80033d4:	fb83 2004 	smull	r2, r0, r3, r4
 80033d8:	17e1      	asrs	r1, r4, #31
                        remainder %= divisor;
 80033da:	f244 2240 	movw	r2, #16960	; 0x4240
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80033de:	ebc1 40a0 	rsb	r0, r1, r0, asr #18
                        remainder %= divisor;
 80033e2:	f2c0 020f 	movt	r2, #15
 80033e6:	fb02 4410 	mls	r4, r2, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80033ea:	3030      	adds	r0, #48	; 0x30
 80033ec:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80033ee:	f24b 5389 	movw	r3, #46473	; 0xb589
 80033f2:	f2c1 43f8 	movt	r3, #5368	; 0x14f8
 80033f6:	fb83 2004 	smull	r2, r0, r3, r4
 80033fa:	17e1      	asrs	r1, r4, #31
                        remainder %= divisor;
 80033fc:	f248 62a0 	movw	r2, #34464	; 0x86a0
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8003400:	ebc1 3060 	rsb	r0, r1, r0, asr #13
                        remainder %= divisor;
 8003404:	f2c0 0201 	movt	r2, #1
 8003408:	fb02 4410 	mls	r4, r2, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 800340c:	3030      	adds	r0, #48	; 0x30
 800340e:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8003410:	f648 33ad 	movw	r3, #35757	; 0x8bad
 8003414:	f6c6 03db 	movt	r3, #26843	; 0x68db
 8003418:	fb83 2004 	smull	r2, r0, r3, r4
 800341c:	17e1      	asrs	r1, r4, #31
 800341e:	ebc1 3020 	rsb	r0, r1, r0, asr #12
                        remainder %= divisor;
 8003422:	f242 7210 	movw	r2, #10000	; 0x2710
 8003426:	fb02 4410 	mls	r4, r2, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 800342a:	3030      	adds	r0, #48	; 0x30
 800342c:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800342e:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 8003432:	f2c1 0362 	movt	r3, #4194	; 0x1062
 8003436:	fb83 2004 	smull	r2, r0, r3, r4
 800343a:	17e1      	asrs	r1, r4, #31
 800343c:	ebc1 10a0 	rsb	r0, r1, r0, asr #6
                        remainder %= divisor;
 8003440:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003444:	fb02 4410 	mls	r4, r2, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8003448:	3030      	adds	r0, #48	; 0x30
 800344a:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800344c:	f248 531f 	movw	r3, #34079	; 0x851f
 8003450:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8003454:	fb83 2004 	smull	r2, r0, r3, r4
 8003458:	17e1      	asrs	r1, r4, #31
 800345a:	ebc1 1060 	rsb	r0, r1, r0, asr #5
                        remainder %= divisor;
 800345e:	2264      	movs	r2, #100	; 0x64
 8003460:	fb02 4410 	mls	r4, r2, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8003464:	3030      	adds	r0, #48	; 0x30
 8003466:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8003468:	f246 6367 	movw	r3, #26215	; 0x6667
 800346c:	f2c6 6366 	movt	r3, #26214	; 0x6666
 8003470:	fb83 2004 	smull	r2, r0, r3, r4
 8003474:	17e1      	asrs	r1, r4, #31
 8003476:	ebc1 00a0 	rsb	r0, r1, r0, asr #2
                        remainder %= divisor;
 800347a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 800347e:	eba4 0442 	sub.w	r4, r4, r2, lsl #1


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8003482:	3030      	adds	r0, #48	; 0x30
 8003484:	47b0      	blx	r6
 8003486:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800348a:	47b0      	blx	r6
 800348c:	e75e      	b.n	800334c <PrintDec+0x150>


	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
 800348e:	2009      	movs	r0, #9
 8003490:	9000      	str	r0, [sp, #0]
 8003492:	2706      	movs	r7, #6
{
        long retval=num;
        cnt--;


        while (cnt--){
 8003494:	2107      	movs	r1, #7
 8003496:	e701      	b.n	800329c <PrintDec+0xa0>
		else if (c=='0') flag0=true;
		else if (c=='l') flagl=true;
		else continue;
	}

	if( sign == 1 ) print_byte_out('-');
 8003498:	202d      	movs	r0, #45	; 0x2d
 800349a:	4e05      	ldr	r6, [pc, #20]	; (80034b0 <PrintDec+0x2b4>)
 800349c:	47b0      	blx	r6
 800349e:	e6f1      	b.n	8003284 <PrintDec+0x88>

void PrintDec(char *fmt, int l)
{
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
 80034a0:	4605      	mov	r5, r0
 80034a2:	e6ea      	b.n	800327a <PrintDec+0x7e>
        return;
}

int Power(int num, int cnt)
{
        long retval=num;
 80034a4:	230a      	movs	r3, #10
 80034a6:	e70d      	b.n	80032c4 <PrintDec+0xc8>
 80034a8:	240a      	movs	r4, #10
 80034aa:	e726      	b.n	80032fa <PrintDec+0xfe>
 80034ac:	080031b9 	.word	0x080031b9
 80034b0:	08003161 	.word	0x08003161
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80034b4:	f643 3389 	movw	r3, #15241	; 0x3b89
 80034b8:	f2c5 53e6 	movt	r3, #21990	; 0x55e6
 80034bc:	fb83 2108 	smull	r2, r1, r3, r8
                        remainder %= divisor;
 80034c0:	f44f 4461 	mov.w	r4, #57600	; 0xe100
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80034c4:	ea4f 72e8 	mov.w	r2, r8, asr #31
 80034c8:	ebc2 6061 	rsb	r0, r2, r1, asr #25
                        remainder %= divisor;
 80034cc:	f2c0 54f5 	movt	r4, #1525	; 0x5f5
 80034d0:	fb04 8410 	mls	r4, r4, r0, r8


                        if (result!=0 || divisor==1) leading_zero = false;
 80034d4:	2800      	cmp	r0, #0
 80034d6:	f47f af66 	bne.w	80033a6 <PrintDec+0x1aa>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80034da:	f64c 206b 	movw	r0, #51819	; 0xca6b
 80034de:	f6c6 305f 	movt	r0, #27487	; 0x6b5f
 80034e2:	fb80 2104 	smull	r2, r1, r0, r4
                        remainder %= divisor;
 80034e6:	f249 6380 	movw	r3, #38528	; 0x9680
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80034ea:	17e2      	asrs	r2, r4, #31
 80034ec:	ebc2 50a1 	rsb	r0, r2, r1, asr #22
                        remainder %= divisor;
 80034f0:	f2c0 0398 	movt	r3, #152	; 0x98
 80034f4:	fb03 4410 	mls	r4, r3, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
 80034f8:	2800      	cmp	r0, #0
 80034fa:	f47f af65 	bne.w	80033c8 <PrintDec+0x1cc>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80034fe:	f64d 6083 	movw	r0, #56963	; 0xde83
 8003502:	f2c4 301b 	movt	r0, #17179	; 0x431b
 8003506:	fb80 2104 	smull	r2, r1, r0, r4
                        remainder %= divisor;
 800350a:	f244 2340 	movw	r3, #16960	; 0x4240
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800350e:	17e2      	asrs	r2, r4, #31
 8003510:	ebc2 40a1 	rsb	r0, r2, r1, asr #18
                        remainder %= divisor;
 8003514:	f2c0 030f 	movt	r3, #15
 8003518:	fb03 4410 	mls	r4, r3, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
 800351c:	2800      	cmp	r0, #0
 800351e:	f47f af64 	bne.w	80033ea <PrintDec+0x1ee>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8003522:	f24b 5089 	movw	r0, #46473	; 0xb589
 8003526:	f2c1 40f8 	movt	r0, #5368	; 0x14f8
 800352a:	fb80 2104 	smull	r2, r1, r0, r4
                        remainder %= divisor;
 800352e:	f248 63a0 	movw	r3, #34464	; 0x86a0
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8003532:	17e2      	asrs	r2, r4, #31
 8003534:	ebc2 3061 	rsb	r0, r2, r1, asr #13
                        remainder %= divisor;
 8003538:	f2c0 0301 	movt	r3, #1
 800353c:	fb03 4410 	mls	r4, r3, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
 8003540:	2800      	cmp	r0, #0
 8003542:	f47f af63 	bne.w	800340c <PrintDec+0x210>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8003546:	f648 30ad 	movw	r0, #35757	; 0x8bad
 800354a:	f6c6 00db 	movt	r0, #26843	; 0x68db
 800354e:	fb80 2104 	smull	r2, r1, r0, r4
 8003552:	17e2      	asrs	r2, r4, #31
 8003554:	ebc2 3021 	rsb	r0, r2, r1, asr #12
                        remainder %= divisor;
 8003558:	f242 7310 	movw	r3, #10000	; 0x2710
 800355c:	fb03 4410 	mls	r4, r3, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
 8003560:	2800      	cmp	r0, #0
 8003562:	f47f af62 	bne.w	800342a <PrintDec+0x22e>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8003566:	f644 50d3 	movw	r0, #19923	; 0x4dd3
 800356a:	f2c1 0062 	movt	r0, #4194	; 0x1062
 800356e:	fb80 2104 	smull	r2, r1, r0, r4
 8003572:	17e2      	asrs	r2, r4, #31
 8003574:	ebc2 10a1 	rsb	r0, r2, r1, asr #6
                        remainder %= divisor;
 8003578:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800357c:	fb03 4410 	mls	r4, r3, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
 8003580:	2800      	cmp	r0, #0
 8003582:	f47f af61 	bne.w	8003448 <PrintDec+0x24c>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8003586:	f248 501f 	movw	r0, #34079	; 0x851f
 800358a:	f2c5 10eb 	movt	r0, #20971	; 0x51eb
 800358e:	fb80 2104 	smull	r2, r1, r0, r4
 8003592:	17e2      	asrs	r2, r4, #31
 8003594:	ebc2 1061 	rsb	r0, r2, r1, asr #5
                        remainder %= divisor;
 8003598:	2364      	movs	r3, #100	; 0x64
 800359a:	fb03 4410 	mls	r4, r3, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
 800359e:	2800      	cmp	r0, #0
 80035a0:	f47f af60 	bne.w	8003464 <PrintDec+0x268>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80035a4:	f246 6067 	movw	r0, #26215	; 0x6667
 80035a8:	f2c6 6066 	movt	r0, #26214	; 0x6666
 80035ac:	fb80 2104 	smull	r2, r1, r0, r4
 80035b0:	17e2      	asrs	r2, r4, #31
 80035b2:	ebc2 00a1 	rsb	r0, r2, r1, asr #2
                        remainder %= divisor;
 80035b6:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80035ba:	eba4 0443 	sub.w	r4, r4, r3, lsl #1


                        if (result!=0 || divisor==1) leading_zero = false;
 80035be:	2800      	cmp	r0, #0
 80035c0:	f43f af61 	beq.w	8003486 <PrintDec+0x28a>
 80035c4:	e75d      	b.n	8003482 <PrintDec+0x286>
 80035c6:	bf00      	nop

080035c8 <PrintHex>:
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 80035c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 80035cc:	7803      	ldrb	r3, [r0, #0]
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 80035ce:	b087      	sub	sp, #28
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
 80035d0:	2600      	movs	r6, #0
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 80035d2:	4681      	mov	r9, r0
 80035d4:	9101      	str	r1, [sp, #4]
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
 80035d6:	9602      	str	r6, [sp, #8]
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f000 80b7 	beq.w	800374c <PrintHex+0x184>
                if (c=='x') break;
 80035de:	2b78      	cmp	r3, #120	; 0x78
 80035e0:	f000 80b4 	beq.w	800374c <PrintHex+0x184>
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
                        i--;
                        DecToLong(tol, &flagcnt);
 80035e4:	4fb4      	ldr	r7, [pc, #720]	; (80038b8 <PrintHex+0x2f0>)
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
 80035e6:	4634      	mov	r4, r6
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 80035e8:	46b0      	mov	r8, r6


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
 80035ea:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80035ee:	2a08      	cmp	r2, #8
 80035f0:	f200 80a8 	bhi.w	8003744 <PrintHex+0x17c>
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 80035f4:	f819 2004 	ldrb.w	r2, [r9, r4]
 80035f8:	eb09 0104 	add.w	r1, r9, r4
 80035fc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8003600:	2b09      	cmp	r3, #9
 8003602:	a803      	add	r0, sp, #12
 8003604:	f04f 0300 	mov.w	r3, #0
 8003608:	d808      	bhi.n	800361c <PrintHex+0x54>
                                tol[j] = s[i++];
 800360a:	54c2      	strb	r2, [r0, r3]

        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 800360c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
                                tol[j] = s[i++];
 8003610:	3401      	adds	r4, #1

        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8003612:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8003616:	3301      	adds	r3, #1
 8003618:	2d09      	cmp	r5, #9
 800361a:	d9f6      	bls.n	800360a <PrintHex+0x42>
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 800361c:	a906      	add	r1, sp, #24
 800361e:	18ca      	adds	r2, r1, r3
                        i--;
                        DecToLong(tol, &flagcnt);
 8003620:	a902      	add	r1, sp, #8
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 8003622:	f802 8c0c 	strb.w	r8, [r2, #-12]
                        i--;
 8003626:	3c01      	subs	r4, #1
                        DecToLong(tol, &flagcnt);
 8003628:	47b8      	blx	r7
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 800362a:	3401      	adds	r4, #1
 800362c:	f819 3004 	ldrb.w	r3, [r9, r4]
 8003630:	b10b      	cbz	r3, 8003636 <PrintHex+0x6e>
                if (c=='x') break;
 8003632:	2b78      	cmp	r3, #120	; 0x78
 8003634:	d1d9      	bne.n	80035ea <PrintHex+0x22>
 8003636:	9901      	ldr	r1, [sp, #4]
 8003638:	9b02      	ldr	r3, [sp, #8]
 800363a:	ba0a      	rev	r2, r1
                else continue;
        }


        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
 800363c:	9201      	str	r2, [sp, #4]
        
        // 위의 flag에 따라 출력.
        if (flagcnt){
 800363e:	2b00      	cmp	r3, #0
 8003640:	f000 8087 	beq.w	8003752 <PrintHex+0x18a>
                if (flagcnt&0x01){        // flagcnt가 홀수 일때, upper를 무시, lower만 출력.
 8003644:	07d8      	lsls	r0, r3, #31
 8003646:	f100 810f 	bmi.w	8003868 <PrintHex+0x2a0>
void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
        bool        leading_zero=true;
 800364a:	2101      	movs	r1, #1
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 800364c:	f1c3 0208 	rsb	r2, r3, #8
 8003650:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
 8003654:	105a      	asrs	r2, r3, #1
 8003656:	2a03      	cmp	r2, #3
 8003658:	f300 80c9 	bgt.w	80037ee <PrintHex+0x226>
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 800365c:	ac01      	add	r4, sp, #4
 800365e:	18a5      	adds	r5, r4, r2
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
 8003660:	462c      	mov	r4, r5
 8003662:	f814 0b01 	ldrb.w	r0, [r4], #1
 8003666:	43ef      	mvns	r7, r5
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8003668:	0903      	lsrs	r3, r0, #4
 800366a:	f007 0901 	and.w	r9, r7, #1
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 800366e:	f10d 0808 	add.w	r8, sp, #8
 8003672:	4d92      	ldr	r5, [pc, #584]	; (80038bc <PrintHex+0x2f4>)
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8003674:	f000 070f 	and.w	r7, r0, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8003678:	f000 8131 	beq.w	80038de <PrintHex+0x316>
                        if (uHex<10) uHex+='0';
 800367c:	2b09      	cmp	r3, #9
 800367e:	f240 816e 	bls.w	800395e <PrintHex+0x396>
                        else         uHex+='A'-10;
 8003682:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
 8003686:	47a8      	blx	r5
 8003688:	2100      	movs	r1, #0
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 800368a:	2f00      	cmp	r7, #0
 800368c:	f000 8130 	beq.w	80038f0 <PrintHex+0x328>
                        if (lHex<10) lHex+='0';
 8003690:	2f09      	cmp	r7, #9
 8003692:	f240 8152 	bls.w	800393a <PrintHex+0x372>
                        else         lHex+='A'-10;
 8003696:	f107 0037 	add.w	r0, r7, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 800369a:	47a8      	blx	r5
 800369c:	2100      	movs	r1, #0
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 800369e:	4544      	cmp	r4, r8
 80036a0:	f000 80a5 	beq.w	80037ee <PrintHex+0x226>
 80036a4:	f1b9 0f00 	cmp.w	r9, #0
 80036a8:	d017      	beq.n	80036da <PrintHex+0x112>
                        c = s[i];
 80036aa:	f814 0b01 	ldrb.w	r0, [r4], #1
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 80036ae:	0903      	lsrs	r3, r0, #4
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 80036b0:	f000 070f 	and.w	r7, r0, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 80036b4:	d031      	beq.n	800371a <PrintHex+0x152>
                        if (uHex<10) uHex+='0';
 80036b6:	2b09      	cmp	r3, #9
 80036b8:	f240 8142 	bls.w	8003940 <PrintHex+0x378>
                        else         uHex+='A'-10;
 80036bc:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
 80036c0:	47a8      	blx	r5
 80036c2:	2200      	movs	r2, #0
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 80036c4:	b3a7      	cbz	r7, 8003730 <PrintHex+0x168>
                        if (lHex<10) lHex+='0';
 80036c6:	2f09      	cmp	r7, #9
 80036c8:	f240 813d 	bls.w	8003946 <PrintHex+0x37e>
                        else         lHex+='A'-10;
 80036cc:	f107 0037 	add.w	r0, r7, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 80036d0:	47a8      	blx	r5
 80036d2:	2100      	movs	r1, #0
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 80036d4:	4544      	cmp	r4, r8
 80036d6:	f000 808a 	beq.w	80037ee <PrintHex+0x226>
                        c = s[i];
 80036da:	f814 3b01 	ldrb.w	r3, [r4], #1
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 80036de:	091a      	lsrs	r2, r3, #4
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 80036e0:	f003 070f 	and.w	r7, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 80036e4:	f000 80d4 	beq.w	8003890 <PrintHex+0x2c8>
                        if (uHex<10) uHex+='0';
 80036e8:	2a09      	cmp	r2, #9
                        else         uHex+='A'-10;
 80036ea:	bf88      	it	hi
 80036ec:	f102 0037 	addhi.w	r0, r2, #55	; 0x37


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 80036f0:	f240 812c 	bls.w	800394c <PrintHex+0x384>
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
 80036f4:	47a8      	blx	r5
 80036f6:	2100      	movs	r1, #0
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 80036f8:	2f00      	cmp	r7, #0
 80036fa:	f000 80d2 	beq.w	80038a2 <PrintHex+0x2da>
                        if (lHex<10) lHex+='0';
 80036fe:	2f09      	cmp	r7, #9
                        else         lHex+='A'-10;
 8003700:	bf88      	it	hi
 8003702:	f107 0037 	addhi.w	r0, r7, #55	; 0x37
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8003706:	f240 8124 	bls.w	8003952 <PrintHex+0x38a>
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 800370a:	47a8      	blx	r5
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
 800370c:	f814 0b01 	ldrb.w	r0, [r4], #1
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 8003710:	2100      	movs	r1, #0
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8003712:	0903      	lsrs	r3, r0, #4
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8003714:	f000 070f 	and.w	r7, r0, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8003718:	d1cd      	bne.n	80036b6 <PrintHex+0xee>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 800371a:	2900      	cmp	r1, #0
 800371c:	f000 8110 	beq.w	8003940 <PrintHex+0x378>
                                if (flag0) print_byte_out('0');
 8003720:	2e00      	cmp	r6, #0
 8003722:	f040 80cd 	bne.w	80038c0 <PrintHex+0x2f8>
                                else       print_byte_out(' ');
 8003726:	2020      	movs	r0, #32
 8003728:	47a8      	blx	r5
 800372a:	2201      	movs	r2, #1
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 800372c:	2f00      	cmp	r7, #0
 800372e:	d1ca      	bne.n	80036c6 <PrintHex+0xfe>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 8003730:	2a00      	cmp	r2, #0
 8003732:	f000 8108 	beq.w	8003946 <PrintHex+0x37e>
                                if (flag0) print_byte_out('0');
 8003736:	2e00      	cmp	r6, #0
 8003738:	f040 80ba 	bne.w	80038b0 <PrintHex+0x2e8>
                                else       print_byte_out(' ');
 800373c:	2020      	movs	r0, #32
 800373e:	47a8      	blx	r5
 8003740:	2101      	movs	r1, #1
 8003742:	e7c7      	b.n	80036d4 <PrintHex+0x10c>
                        }
                        tol[j] = '\0';
                        i--;
                        DecToLong(tol, &flagcnt);
                }
                else if (c=='0') flag0=true;
 8003744:	2b30      	cmp	r3, #48	; 0x30
 8003746:	bf08      	it	eq
 8003748:	2601      	moveq	r6, #1
 800374a:	e76e      	b.n	800362a <PrintHex+0x62>
 800374c:	9c01      	ldr	r4, [sp, #4]
 800374e:	ba25      	rev	r5, r4
                else continue;
        }


        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
 8003750:	9501      	str	r5, [sp, #4]
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8003752:	f89d 3004 	ldrb.w	r3, [sp, #4]
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8003756:	091a      	lsrs	r2, r3, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8003758:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 800375c:	d04a      	beq.n	80037f4 <PrintHex+0x22c>
                        if (uHex<10) uHex+='0';
 800375e:	2a09      	cmp	r2, #9
 8003760:	f240 80fa 	bls.w	8003958 <PrintHex+0x390>
                        else         uHex+='A'-10;
 8003764:	f102 0037 	add.w	r0, r2, #55	; 0x37
                        if (!leading_zero) print_byte_out(uHex);
 8003768:	4d54      	ldr	r5, [pc, #336]	; (80038bc <PrintHex+0x2f4>)
 800376a:	47a8      	blx	r5
 800376c:	2100      	movs	r1, #0
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 800376e:	2c00      	cmp	r4, #0
 8003770:	d144      	bne.n	80037fc <PrintHex+0x234>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8003772:	2201      	movs	r2, #1
 8003774:	2900      	cmp	r1, #0
 8003776:	f000 80fb 	beq.w	8003970 <PrintHex+0x3a8>
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 800377a:	f89d 3005 	ldrb.w	r3, [sp, #5]
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 800377e:	0919      	lsrs	r1, r3, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8003780:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8003784:	d047      	beq.n	8003816 <PrintHex+0x24e>
                        if (uHex<10) uHex+='0';
 8003786:	2909      	cmp	r1, #9
 8003788:	f240 80ec 	bls.w	8003964 <PrintHex+0x39c>
                        else         uHex+='A'-10;
 800378c:	f101 0037 	add.w	r0, r1, #55	; 0x37
                        if (!leading_zero) print_byte_out(uHex);
 8003790:	47a8      	blx	r5
 8003792:	2300      	movs	r3, #0
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8003794:	2c00      	cmp	r4, #0
 8003796:	d144      	bne.n	8003822 <PrintHex+0x25a>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8003798:	2201      	movs	r2, #1
 800379a:	2b00      	cmp	r3, #0
 800379c:	f000 80e5 	beq.w	800396a <PrintHex+0x3a2>
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 80037a0:	f89d 1006 	ldrb.w	r1, [sp, #6]
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 80037a4:	090b      	lsrs	r3, r1, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 80037a6:	f001 040f 	and.w	r4, r1, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 80037aa:	d047      	beq.n	800383c <PrintHex+0x274>
                        if (uHex<10) uHex+='0';
 80037ac:	2b09      	cmp	r3, #9
 80037ae:	f240 80be 	bls.w	800392e <PrintHex+0x366>
                        else         uHex+='A'-10;
 80037b2:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        if (!leading_zero) print_byte_out(uHex);
 80037b6:	47a8      	blx	r5
 80037b8:	2100      	movs	r1, #0
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 80037ba:	2c00      	cmp	r4, #0
 80037bc:	d143      	bne.n	8003846 <PrintHex+0x27e>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 80037be:	2201      	movs	r2, #1
 80037c0:	2900      	cmp	r1, #0
 80037c2:	f000 80b7 	beq.w	8003934 <PrintHex+0x36c>
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 80037c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 80037ca:	0919      	lsrs	r1, r3, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 80037cc:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 80037d0:	d045      	beq.n	800385e <PrintHex+0x296>
                        if (uHex<10) uHex+='0';
 80037d2:	2909      	cmp	r1, #9
                        else         uHex+='A'-10;
 80037d4:	bf88      	it	hi
 80037d6:	f101 0037 	addhi.w	r0, r1, #55	; 0x37
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 80037da:	d942      	bls.n	8003862 <PrintHex+0x29a>
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 80037dc:	47a8      	blx	r5
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 80037de:	2c00      	cmp	r4, #0
 80037e0:	d07a      	beq.n	80038d8 <PrintHex+0x310>
                        if (lHex<10) lHex+='0';
 80037e2:	2c09      	cmp	r4, #9
                        else         lHex+='A'-10;
 80037e4:	bf88      	it	hi
 80037e6:	f104 0037 	addhi.w	r0, r4, #55	; 0x37
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 80037ea:	d975      	bls.n	80038d8 <PrintHex+0x310>
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 80037ec:	47a8      	blx	r5
                }
        }
        return;
}
 80037ee:	b007      	add	sp, #28
 80037f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 80037f4:	2101      	movs	r1, #1
 80037f6:	4d31      	ldr	r5, [pc, #196]	; (80038bc <PrintHex+0x2f4>)
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 80037f8:	2c00      	cmp	r4, #0
 80037fa:	d0ba      	beq.n	8003772 <PrintHex+0x1aa>
                        if (lHex<10) lHex+='0';
 80037fc:	2c09      	cmp	r4, #9
 80037fe:	f240 80b7 	bls.w	8003970 <PrintHex+0x3a8>
                        else         lHex+='A'-10;
 8003802:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        if (!leading_zero) print_byte_out(lHex);
 8003806:	47a8      	blx	r5
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8003808:	f89d 3005 	ldrb.w	r3, [sp, #5]
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 800380c:	2200      	movs	r2, #0
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 800380e:	0919      	lsrs	r1, r3, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8003810:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8003814:	d1b7      	bne.n	8003786 <PrintHex+0x1be>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 8003816:	2a00      	cmp	r2, #0
 8003818:	f000 80a4 	beq.w	8003964 <PrintHex+0x39c>
 800381c:	2301      	movs	r3, #1
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 800381e:	2c00      	cmp	r4, #0
 8003820:	d0ba      	beq.n	8003798 <PrintHex+0x1d0>
                        if (lHex<10) lHex+='0';
 8003822:	2c09      	cmp	r4, #9
 8003824:	f240 80a1 	bls.w	800396a <PrintHex+0x3a2>
                        else         lHex+='A'-10;
 8003828:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        if (!leading_zero) print_byte_out(lHex);
 800382c:	47a8      	blx	r5
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 800382e:	f89d 1006 	ldrb.w	r1, [sp, #6]
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8003832:	2200      	movs	r2, #0
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8003834:	090b      	lsrs	r3, r1, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8003836:	f001 040f 	and.w	r4, r1, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 800383a:	d1b7      	bne.n	80037ac <PrintHex+0x1e4>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 800383c:	2a00      	cmp	r2, #0
 800383e:	d076      	beq.n	800392e <PrintHex+0x366>
 8003840:	2101      	movs	r1, #1
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8003842:	2c00      	cmp	r4, #0
 8003844:	d0bb      	beq.n	80037be <PrintHex+0x1f6>
                        if (lHex<10) lHex+='0';
 8003846:	2c09      	cmp	r4, #9
 8003848:	d974      	bls.n	8003934 <PrintHex+0x36c>
                        else         lHex+='A'-10;
 800384a:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        if (!leading_zero) print_byte_out(lHex);
 800384e:	47a8      	blx	r5
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8003850:	f89d 3007 	ldrb.w	r3, [sp, #7]
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8003854:	2200      	movs	r2, #0
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8003856:	0919      	lsrs	r1, r3, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8003858:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 800385c:	d1b9      	bne.n	80037d2 <PrintHex+0x20a>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 800385e:	2a00      	cmp	r2, #0
 8003860:	d1bd      	bne.n	80037de <PrintHex+0x216>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8003862:	f101 0030 	add.w	r0, r1, #48	; 0x30
 8003866:	e7b9      	b.n	80037dc <PrintHex+0x214>
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
        
        // 위의 flag에 따라 출력.
        if (flagcnt){
                if (flagcnt&0x01){        // flagcnt가 홀수 일때, upper를 무시, lower만 출력.
                        c = s[(8-(flagcnt+1))/2]; // 홀수 일때 그 위치를 포함하는 곳의 값을 가져 옵니다.
 8003868:	43d8      	mvns	r0, r3
 800386a:	3008      	adds	r0, #8
 800386c:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
 8003870:	aa06      	add	r2, sp, #24
 8003872:	eb02 0163 	add.w	r1, r2, r3, asr #1
                        
                        // lower 4 bits를 가져와서 ascii code로.
                        lHex = ((c>>0)&0x0f);
 8003876:	f811 0c14 	ldrb.w	r0, [r1, #-20]
                        if (lHex!=0) leading_zero=false;
 800387a:	f010 030f 	ands.w	r3, r0, #15
 800387e:	d045      	beq.n	800390c <PrintHex+0x344>
                        if (lHex<10) lHex+='0';
 8003880:	2b09      	cmp	r3, #9
 8003882:	d951      	bls.n	8003928 <PrintHex+0x360>
                        else         lHex+='A'-10;
 8003884:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 8003888:	4b0c      	ldr	r3, [pc, #48]	; (80038bc <PrintHex+0x2f4>)
 800388a:	4798      	blx	r3
 800388c:	2100      	movs	r1, #0
 800388e:	e042      	b.n	8003916 <PrintHex+0x34e>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 8003890:	2900      	cmp	r1, #0
 8003892:	d05b      	beq.n	800394c <PrintHex+0x384>
                                if (flag0) print_byte_out('0');
 8003894:	b1e6      	cbz	r6, 80038d0 <PrintHex+0x308>
 8003896:	2030      	movs	r0, #48	; 0x30
 8003898:	47a8      	blx	r5
 800389a:	2101      	movs	r1, #1
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 800389c:	2f00      	cmp	r7, #0
 800389e:	f47f af2e 	bne.w	80036fe <PrintHex+0x136>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 80038a2:	2900      	cmp	r1, #0
 80038a4:	d055      	beq.n	8003952 <PrintHex+0x38a>
                                if (flag0) print_byte_out('0');
 80038a6:	b17e      	cbz	r6, 80038c8 <PrintHex+0x300>
 80038a8:	2030      	movs	r0, #48	; 0x30
 80038aa:	47a8      	blx	r5
 80038ac:	2101      	movs	r1, #1
 80038ae:	e6fc      	b.n	80036aa <PrintHex+0xe2>
 80038b0:	2030      	movs	r0, #48	; 0x30
 80038b2:	47a8      	blx	r5
 80038b4:	2101      	movs	r1, #1
 80038b6:	e70d      	b.n	80036d4 <PrintHex+0x10c>
 80038b8:	080031b9 	.word	0x080031b9
 80038bc:	08003161 	.word	0x08003161
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
 80038c0:	2030      	movs	r0, #48	; 0x30
 80038c2:	47a8      	blx	r5
 80038c4:	2201      	movs	r2, #1
 80038c6:	e6fd      	b.n	80036c4 <PrintHex+0xfc>


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 80038c8:	2020      	movs	r0, #32
 80038ca:	47a8      	blx	r5
 80038cc:	2101      	movs	r1, #1
 80038ce:	e6ec      	b.n	80036aa <PrintHex+0xe2>


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 80038d0:	2020      	movs	r0, #32
 80038d2:	47a8      	blx	r5
 80038d4:	2101      	movs	r1, #1
 80038d6:	e70f      	b.n	80036f8 <PrintHex+0x130>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 80038d8:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80038dc:	e786      	b.n	80037ec <PrintHex+0x224>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 80038de:	2900      	cmp	r1, #0
 80038e0:	d03d      	beq.n	800395e <PrintHex+0x396>
                                if (flag0) print_byte_out('0');
 80038e2:	b17e      	cbz	r6, 8003904 <PrintHex+0x33c>
 80038e4:	2030      	movs	r0, #48	; 0x30
 80038e6:	47a8      	blx	r5
 80038e8:	2101      	movs	r1, #1
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 80038ea:	2f00      	cmp	r7, #0
 80038ec:	f47f aed0 	bne.w	8003690 <PrintHex+0xc8>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 80038f0:	b319      	cbz	r1, 800393a <PrintHex+0x372>
                                if (flag0) print_byte_out('0');
 80038f2:	b11e      	cbz	r6, 80038fc <PrintHex+0x334>
 80038f4:	2030      	movs	r0, #48	; 0x30
 80038f6:	47a8      	blx	r5
 80038f8:	2101      	movs	r1, #1
 80038fa:	e6d0      	b.n	800369e <PrintHex+0xd6>
                                else       print_byte_out(' ');
 80038fc:	2020      	movs	r0, #32
 80038fe:	47a8      	blx	r5
 8003900:	2101      	movs	r1, #1
 8003902:	e6cc      	b.n	800369e <PrintHex+0xd6>


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 8003904:	2020      	movs	r0, #32
 8003906:	47a8      	blx	r5
 8003908:	2101      	movs	r1, #1
 800390a:	e6be      	b.n	800368a <PrintHex+0xc2>
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
 800390c:	b13e      	cbz	r6, 800391e <PrintHex+0x356>
 800390e:	491a      	ldr	r1, [pc, #104]	; (8003978 <PrintHex+0x3b0>)
 8003910:	2030      	movs	r0, #48	; 0x30
 8003912:	4788      	blx	r1
 8003914:	2101      	movs	r1, #1
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
                        
                        flagcnt--;
 8003916:	9802      	ldr	r0, [sp, #8]
 8003918:	1e43      	subs	r3, r0, #1
 800391a:	9302      	str	r3, [sp, #8]
 800391c:	e696      	b.n	800364c <PrintHex+0x84>


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 800391e:	2020      	movs	r0, #32
 8003920:	4a15      	ldr	r2, [pc, #84]	; (8003978 <PrintHex+0x3b0>)
 8003922:	4790      	blx	r2
 8003924:	2101      	movs	r1, #1
 8003926:	e7f6      	b.n	8003916 <PrintHex+0x34e>
                        c = s[(8-(flagcnt+1))/2]; // 홀수 일때 그 위치를 포함하는 곳의 값을 가져 옵니다.
                        
                        // lower 4 bits를 가져와서 ascii code로.
                        lHex = ((c>>0)&0x0f);
                        if (lHex!=0) leading_zero=false;
                        if (lHex<10) lHex+='0';
 8003928:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800392c:	e7ac      	b.n	8003888 <PrintHex+0x2c0>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 800392e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8003932:	e740      	b.n	80037b6 <PrintHex+0x1ee>
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8003934:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8003938:	e789      	b.n	800384e <PrintHex+0x286>
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 800393a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800393e:	e6ac      	b.n	800369a <PrintHex+0xd2>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8003940:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8003944:	e6bc      	b.n	80036c0 <PrintHex+0xf8>
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8003946:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800394a:	e6c1      	b.n	80036d0 <PrintHex+0x108>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 800394c:	f102 0030 	add.w	r0, r2, #48	; 0x30
 8003950:	e6d0      	b.n	80036f4 <PrintHex+0x12c>
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8003952:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8003956:	e6d8      	b.n	800370a <PrintHex+0x142>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8003958:	f102 0030 	add.w	r0, r2, #48	; 0x30
 800395c:	e704      	b.n	8003768 <PrintHex+0x1a0>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 800395e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8003962:	e690      	b.n	8003686 <PrintHex+0xbe>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8003964:	f101 0030 	add.w	r0, r1, #48	; 0x30
 8003968:	e712      	b.n	8003790 <PrintHex+0x1c8>
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 800396a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800396e:	e75d      	b.n	800382c <PrintHex+0x264>
 8003970:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8003974:	e747      	b.n	8003806 <PrintHex+0x23e>
 8003976:	bf00      	nop
 8003978:	08003161 	.word	0x08003161

0800397c <Lb_printf>:
// 매개 : fmt : printf()와 동일하나 "%s", "%c", "%d", "%x" 사용 가능.
//              %d, %x의 경우에는 "%08x", "%8x"와 같이 나타낼 길이와 빈 공간을 0으로 채울지 선택 가능.
// 반환 : 없음.
// 주의 : 없음.
void Lb_printf(char *fmt, ...)
{
 800397c:	b40f      	push	{r0, r1, r2, r3}
 800397e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003982:	b085      	sub	sp, #20
	int		i;
	va_list args;
	char	*s=fmt;
 8003984:	f10d 0930 	add.w	r9, sp, #48	; 0x30
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
 8003988:	4bac      	ldr	r3, [pc, #688]	; (8003c3c <Lb_printf+0x2c0>)
 800398a:	2200      	movs	r2, #0
// 주의 : 없음.
void Lb_printf(char *fmt, ...)
{
	int		i;
	va_list args;
	char	*s=fmt;
 800398c:	f859 4b04 	ldr.w	r4, [r9], #4



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8003990:	4dab      	ldr	r5, [pc, #684]	; (8003c40 <Lb_printf+0x2c4>)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 8003992:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 8003c4c <Lb_printf+0x2d0>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
					break;
				case 's' :
					PrintString(format, va_arg(args, char *));
 8003996:	4fab      	ldr	r7, [pc, #684]	; (8003c44 <Lb_printf+0x2c8>)
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 8003998:	4eab      	ldr	r6, [pc, #684]	; (8003c48 <Lb_printf+0x2cc>)
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
 800399a:	701a      	strb	r2, [r3, #0]
	
	while (*s)
 800399c:	7820      	ldrb	r0, [r4, #0]
 800399e:	2800      	cmp	r0, #0
 80039a0:	f000 80be 	beq.w	8003b20 <Lb_printf+0x1a4>
	{
		if (*s=='%')
 80039a4:	2825      	cmp	r0, #37	; 0x25
 80039a6:	f040 80c0 	bne.w	8003b2a <Lb_printf+0x1ae>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80039aa:	7862      	ldrb	r2, [r4, #1]
	
	while (*s)
	{
		if (*s=='%')
		{
			s++;
 80039ac:	1c63      	adds	r3, r4, #1
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80039ae:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 80039b2:	2901      	cmp	r1, #1
	{
		if (*s=='%')
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
 80039b4:	f88d 0004 	strb.w	r0, [sp, #4]
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80039b8:	f240 80d6 	bls.w	8003b68 <Lb_printf+0x1ec>
 80039bc:	2a78      	cmp	r2, #120	; 0x78
 80039be:	f000 80dd 	beq.w	8003b7c <Lb_printf+0x200>
 80039c2:	2a73      	cmp	r2, #115	; 0x73
 80039c4:	f000 80dd 	beq.w	8003b82 <Lb_printf+0x206>
 80039c8:	2a25      	cmp	r2, #37	; 0x25
 80039ca:	f000 80dd 	beq.w	8003b88 <Lb_printf+0x20c>
 80039ce:	78a1      	ldrb	r1, [r4, #2]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80039d0:	f88d 2005 	strb.w	r2, [sp, #5]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80039d4:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80039d8:	1ca3      	adds	r3, r4, #2
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80039da:	2a01      	cmp	r2, #1
 80039dc:	f240 80d6 	bls.w	8003b8c <Lb_printf+0x210>
 80039e0:	2978      	cmp	r1, #120	; 0x78
 80039e2:	f000 80d6 	beq.w	8003b92 <Lb_printf+0x216>
 80039e6:	2973      	cmp	r1, #115	; 0x73
 80039e8:	f000 80d6 	beq.w	8003b98 <Lb_printf+0x21c>
 80039ec:	2925      	cmp	r1, #37	; 0x25
 80039ee:	f000 80d6 	beq.w	8003b9e <Lb_printf+0x222>
 80039f2:	78e2      	ldrb	r2, [r4, #3]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80039f4:	f88d 1006 	strb.w	r1, [sp, #6]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80039f8:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80039fc:	1ce3      	adds	r3, r4, #3
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80039fe:	2901      	cmp	r1, #1
 8003a00:	f240 80cf 	bls.w	8003ba2 <Lb_printf+0x226>
 8003a04:	2a78      	cmp	r2, #120	; 0x78
 8003a06:	f000 80cf 	beq.w	8003ba8 <Lb_printf+0x22c>
 8003a0a:	2a73      	cmp	r2, #115	; 0x73
 8003a0c:	f000 80cf 	beq.w	8003bae <Lb_printf+0x232>
 8003a10:	2a25      	cmp	r2, #37	; 0x25
 8003a12:	f000 80cf 	beq.w	8003bb4 <Lb_printf+0x238>
 8003a16:	7921      	ldrb	r1, [r4, #4]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8003a18:	f88d 2007 	strb.w	r2, [sp, #7]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8003a1c:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8003a20:	1d23      	adds	r3, r4, #4
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8003a22:	2a01      	cmp	r2, #1
 8003a24:	f240 80c8 	bls.w	8003bb8 <Lb_printf+0x23c>
 8003a28:	2978      	cmp	r1, #120	; 0x78
 8003a2a:	f000 80c8 	beq.w	8003bbe <Lb_printf+0x242>
 8003a2e:	2973      	cmp	r1, #115	; 0x73
 8003a30:	f000 80c8 	beq.w	8003bc4 <Lb_printf+0x248>
 8003a34:	2925      	cmp	r1, #37	; 0x25
 8003a36:	f000 80c8 	beq.w	8003bca <Lb_printf+0x24e>
 8003a3a:	7962      	ldrb	r2, [r4, #5]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8003a3c:	f88d 1008 	strb.w	r1, [sp, #8]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8003a40:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8003a44:	1d63      	adds	r3, r4, #5
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8003a46:	2901      	cmp	r1, #1
 8003a48:	f240 80c1 	bls.w	8003bce <Lb_printf+0x252>
 8003a4c:	2a78      	cmp	r2, #120	; 0x78
 8003a4e:	f000 80c1 	beq.w	8003bd4 <Lb_printf+0x258>
 8003a52:	2a73      	cmp	r2, #115	; 0x73
 8003a54:	f000 80c1 	beq.w	8003bda <Lb_printf+0x25e>
 8003a58:	2a25      	cmp	r2, #37	; 0x25
 8003a5a:	f000 80c1 	beq.w	8003be0 <Lb_printf+0x264>
 8003a5e:	79a1      	ldrb	r1, [r4, #6]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8003a60:	f88d 2009 	strb.w	r2, [sp, #9]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8003a64:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8003a68:	1da3      	adds	r3, r4, #6
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8003a6a:	2a01      	cmp	r2, #1
 8003a6c:	f240 80ba 	bls.w	8003be4 <Lb_printf+0x268>
 8003a70:	2978      	cmp	r1, #120	; 0x78
 8003a72:	f000 80ba 	beq.w	8003bea <Lb_printf+0x26e>
 8003a76:	2973      	cmp	r1, #115	; 0x73
 8003a78:	f000 80ba 	beq.w	8003bf0 <Lb_printf+0x274>
 8003a7c:	2925      	cmp	r1, #37	; 0x25
 8003a7e:	f000 80ba 	beq.w	8003bf6 <Lb_printf+0x27a>
 8003a82:	79e2      	ldrb	r2, [r4, #7]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8003a84:	f88d 100a 	strb.w	r1, [sp, #10]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8003a88:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8003a8c:	1de3      	adds	r3, r4, #7
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8003a8e:	2901      	cmp	r1, #1
 8003a90:	f240 80b3 	bls.w	8003bfa <Lb_printf+0x27e>
 8003a94:	2a78      	cmp	r2, #120	; 0x78
 8003a96:	f000 80b3 	beq.w	8003c00 <Lb_printf+0x284>
 8003a9a:	2a73      	cmp	r2, #115	; 0x73
 8003a9c:	f000 80b3 	beq.w	8003c06 <Lb_printf+0x28a>
 8003aa0:	2a25      	cmp	r2, #37	; 0x25
 8003aa2:	f000 80b3 	beq.w	8003c0c <Lb_printf+0x290>
 8003aa6:	7a21      	ldrb	r1, [r4, #8]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8003aa8:	f88d 200b 	strb.w	r2, [sp, #11]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8003aac:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
 8003ab0:	2a01      	cmp	r2, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8003ab2:	f104 0308 	add.w	r3, r4, #8
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8003ab6:	f240 80ab 	bls.w	8003c10 <Lb_printf+0x294>
 8003aba:	2978      	cmp	r1, #120	; 0x78
 8003abc:	f000 80ab 	beq.w	8003c16 <Lb_printf+0x29a>
 8003ac0:	2973      	cmp	r1, #115	; 0x73
 8003ac2:	f000 80ab 	beq.w	8003c1c <Lb_printf+0x2a0>
 8003ac6:	2925      	cmp	r1, #37	; 0x25
 8003ac8:	f000 80ab 	beq.w	8003c22 <Lb_printf+0x2a6>
 8003acc:	7a62      	ldrb	r2, [r4, #9]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8003ace:	f88d 100c 	strb.w	r1, [sp, #12]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8003ad2:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 8003ad6:	2901      	cmp	r1, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8003ad8:	f104 0309 	add.w	r3, r4, #9
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8003adc:	f240 80a3 	bls.w	8003c26 <Lb_printf+0x2aa>
 8003ae0:	2a78      	cmp	r2, #120	; 0x78
 8003ae2:	f000 80a3 	beq.w	8003c2c <Lb_printf+0x2b0>
 8003ae6:	2a73      	cmp	r2, #115	; 0x73
 8003ae8:	f000 80a3 	beq.w	8003c32 <Lb_printf+0x2b6>
 8003aec:	2a25      	cmp	r2, #37	; 0x25
 8003aee:	f000 80a3 	beq.w	8003c38 <Lb_printf+0x2bc>
 8003af2:	7aa0      	ldrb	r0, [r4, #10]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8003af4:	f88d 200d 	strb.w	r2, [sp, #13]
 8003af8:	f104 030a 	add.w	r3, r4, #10
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 8003afc:	1c5c      	adds	r4, r3, #1
 8003afe:	2864      	cmp	r0, #100	; 0x64
 8003b00:	d02b      	beq.n	8003b5a <Lb_printf+0x1de>
 8003b02:	d815      	bhi.n	8003b30 <Lb_printf+0x1b4>
 8003b04:	2825      	cmp	r0, #37	; 0x25
 8003b06:	d01f      	beq.n	8003b48 <Lb_printf+0x1cc>
 8003b08:	2863      	cmp	r0, #99	; 0x63
 8003b0a:	f47f af47 	bne.w	800399c <Lb_printf+0x20>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8003b0e:	f899 0000 	ldrb.w	r0, [r9]
 8003b12:	47a8      	blx	r5
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
	
	while (*s)
 8003b14:	7820      	ldrb	r0, [r4, #0]
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
 8003b16:	f109 0904 	add.w	r9, r9, #4
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
	
	while (*s)
 8003b1a:	2800      	cmp	r0, #0
 8003b1c:	f47f af42 	bne.w	80039a4 <Lb_printf+0x28>
			s++;
		}
	}
	va_end(args);
	return;
}
 8003b20:	b005      	add	sp, #20
 8003b22:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b26:	b004      	add	sp, #16
 8003b28:	4770      	bx	lr



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8003b2a:	47a8      	blx	r5
            }
		}
		else 
		{
			PrintChar("%c", *s);
			s++;
 8003b2c:	3401      	adds	r4, #1
 8003b2e:	e735      	b.n	800399c <Lb_printf+0x20>
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 8003b30:	2873      	cmp	r0, #115	; 0x73
 8003b32:	d00b      	beq.n	8003b4c <Lb_printf+0x1d0>
 8003b34:	2878      	cmp	r0, #120	; 0x78
 8003b36:	f47f af31 	bne.w	800399c <Lb_printf+0x20>
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 8003b3a:	f8d9 1000 	ldr.w	r1, [r9]
 8003b3e:	a801      	add	r0, sp, #4
 8003b40:	f109 0904 	add.w	r9, r9, #4
 8003b44:	47b0      	blx	r6
					break;
 8003b46:	e729      	b.n	800399c <Lb_printf+0x20>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8003b48:	47a8      	blx	r5
 8003b4a:	e727      	b.n	800399c <Lb_printf+0x20>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
					break;
				case 's' :
					PrintString(format, va_arg(args, char *));
 8003b4c:	f8d9 1000 	ldr.w	r1, [r9]
 8003b50:	a801      	add	r0, sp, #4
 8003b52:	f109 0904 	add.w	r9, r9, #4
 8003b56:	47b8      	blx	r7
 					break;
 8003b58:	e720      	b.n	800399c <Lb_printf+0x20>
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 8003b5a:	f8d9 1000 	ldr.w	r1, [r9]
 8003b5e:	a801      	add	r0, sp, #4
 8003b60:	f109 0904 	add.w	r9, r9, #4
 8003b64:	47c0      	blx	r8
					break;
 8003b66:	e719      	b.n	800399c <Lb_printf+0x20>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8003b68:	4610      	mov	r0, r2
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8003b6a:	2401      	movs	r4, #1
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 8003b6c:	aa04      	add	r2, sp, #16
 8003b6e:	1914      	adds	r4, r2, r4
					format[i] = '\0';
 8003b70:	2100      	movs	r1, #0
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 8003b72:	f804 0c0c 	strb.w	r0, [r4, #-12]
					format[i] = '\0';
 8003b76:	f804 1c0b 	strb.w	r1, [r4, #-11]
                	break;
 8003b7a:	e7bf      	b.n	8003afc <Lb_printf+0x180>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8003b7c:	2401      	movs	r4, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8003b7e:	2078      	movs	r0, #120	; 0x78
 8003b80:	e7f4      	b.n	8003b6c <Lb_printf+0x1f0>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8003b82:	2401      	movs	r4, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8003b84:	2073      	movs	r0, #115	; 0x73
 8003b86:	e7f1      	b.n	8003b6c <Lb_printf+0x1f0>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8003b88:	2401      	movs	r4, #1
 8003b8a:	e7ef      	b.n	8003b6c <Lb_printf+0x1f0>
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8003b8c:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8003b8e:	2402      	movs	r4, #2
 8003b90:	e7ec      	b.n	8003b6c <Lb_printf+0x1f0>
 8003b92:	2402      	movs	r4, #2
 8003b94:	2078      	movs	r0, #120	; 0x78
 8003b96:	e7e9      	b.n	8003b6c <Lb_printf+0x1f0>
 8003b98:	2402      	movs	r4, #2
 8003b9a:	2073      	movs	r0, #115	; 0x73
 8003b9c:	e7e6      	b.n	8003b6c <Lb_printf+0x1f0>
 8003b9e:	2402      	movs	r4, #2
 8003ba0:	e7e4      	b.n	8003b6c <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8003ba2:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8003ba4:	2403      	movs	r4, #3
 8003ba6:	e7e1      	b.n	8003b6c <Lb_printf+0x1f0>
 8003ba8:	2403      	movs	r4, #3
 8003baa:	2078      	movs	r0, #120	; 0x78
 8003bac:	e7de      	b.n	8003b6c <Lb_printf+0x1f0>
 8003bae:	2403      	movs	r4, #3
 8003bb0:	2073      	movs	r0, #115	; 0x73
 8003bb2:	e7db      	b.n	8003b6c <Lb_printf+0x1f0>
 8003bb4:	2403      	movs	r4, #3
 8003bb6:	e7d9      	b.n	8003b6c <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8003bb8:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8003bba:	2404      	movs	r4, #4
 8003bbc:	e7d6      	b.n	8003b6c <Lb_printf+0x1f0>
 8003bbe:	2404      	movs	r4, #4
 8003bc0:	2078      	movs	r0, #120	; 0x78
 8003bc2:	e7d3      	b.n	8003b6c <Lb_printf+0x1f0>
 8003bc4:	2404      	movs	r4, #4
 8003bc6:	2073      	movs	r0, #115	; 0x73
 8003bc8:	e7d0      	b.n	8003b6c <Lb_printf+0x1f0>
 8003bca:	2404      	movs	r4, #4
 8003bcc:	e7ce      	b.n	8003b6c <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8003bce:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8003bd0:	2405      	movs	r4, #5
 8003bd2:	e7cb      	b.n	8003b6c <Lb_printf+0x1f0>
 8003bd4:	2405      	movs	r4, #5
 8003bd6:	2078      	movs	r0, #120	; 0x78
 8003bd8:	e7c8      	b.n	8003b6c <Lb_printf+0x1f0>
 8003bda:	2405      	movs	r4, #5
 8003bdc:	2073      	movs	r0, #115	; 0x73
 8003bde:	e7c5      	b.n	8003b6c <Lb_printf+0x1f0>
 8003be0:	2405      	movs	r4, #5
 8003be2:	e7c3      	b.n	8003b6c <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8003be4:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8003be6:	2406      	movs	r4, #6
 8003be8:	e7c0      	b.n	8003b6c <Lb_printf+0x1f0>
 8003bea:	2406      	movs	r4, #6
 8003bec:	2078      	movs	r0, #120	; 0x78
 8003bee:	e7bd      	b.n	8003b6c <Lb_printf+0x1f0>
 8003bf0:	2406      	movs	r4, #6
 8003bf2:	2073      	movs	r0, #115	; 0x73
 8003bf4:	e7ba      	b.n	8003b6c <Lb_printf+0x1f0>
 8003bf6:	2406      	movs	r4, #6
 8003bf8:	e7b8      	b.n	8003b6c <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8003bfa:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8003bfc:	2407      	movs	r4, #7
 8003bfe:	e7b5      	b.n	8003b6c <Lb_printf+0x1f0>
 8003c00:	2407      	movs	r4, #7
 8003c02:	2078      	movs	r0, #120	; 0x78
 8003c04:	e7b2      	b.n	8003b6c <Lb_printf+0x1f0>
 8003c06:	2407      	movs	r4, #7
 8003c08:	2073      	movs	r0, #115	; 0x73
 8003c0a:	e7af      	b.n	8003b6c <Lb_printf+0x1f0>
 8003c0c:	2407      	movs	r4, #7
 8003c0e:	e7ad      	b.n	8003b6c <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8003c10:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8003c12:	2408      	movs	r4, #8
 8003c14:	e7aa      	b.n	8003b6c <Lb_printf+0x1f0>
 8003c16:	2408      	movs	r4, #8
 8003c18:	2078      	movs	r0, #120	; 0x78
 8003c1a:	e7a7      	b.n	8003b6c <Lb_printf+0x1f0>
 8003c1c:	2408      	movs	r4, #8
 8003c1e:	2073      	movs	r0, #115	; 0x73
 8003c20:	e7a4      	b.n	8003b6c <Lb_printf+0x1f0>
 8003c22:	2408      	movs	r4, #8
 8003c24:	e7a2      	b.n	8003b6c <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8003c26:	4610      	mov	r0, r2
 8003c28:	2409      	movs	r4, #9
 8003c2a:	e79f      	b.n	8003b6c <Lb_printf+0x1f0>
 8003c2c:	2409      	movs	r4, #9
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8003c2e:	2078      	movs	r0, #120	; 0x78
 8003c30:	e79c      	b.n	8003b6c <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8003c32:	2409      	movs	r4, #9
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8003c34:	2073      	movs	r0, #115	; 0x73
 8003c36:	e799      	b.n	8003b6c <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8003c38:	2409      	movs	r4, #9
 8003c3a:	e797      	b.n	8003b6c <Lb_printf+0x1f0>
 8003c3c:	20000204 	.word	0x20000204
 8003c40:	08003161 	.word	0x08003161
 8003c44:	08003199 	.word	0x08003199
 8003c48:	080035c9 	.word	0x080035c9
 8003c4c:	080031fd 	.word	0x080031fd

08003c50 <Hw_StartUp_Init>:
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
{
 8003c50:	4668      	mov	r0, sp
 8003c52:	f020 0107 	bic.w	r1, r0, #7
 8003c56:	468d      	mov	sp, r1
 8003c58:	e92d 43f1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, lr}
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8003c5c:	493f      	ldr	r1, [pc, #252]	; (8003d5c <zero_loop+0x60>)
 8003c5e:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8003d68 <zero_loop+0x6c>
	REG_RCC_APB2RSTR = 0x00000000;


	//-- Remap된 IO가 있으면 초기화
	//
	REG_AFIO_MAPR    = 0x00000000;
 8003c62:	2504      	movs	r5, #4
	REG_AFIO_MAPR2   = 0x00000000;
 8003c64:	241c      	movs	r4, #28
	unsigned long *pulSrc, *pulDest;	
	
	
	//-- 주변장치 클럭 및 레지스터 초기화 
	//
	REG_RCC_AHBENR   = 0x00000014;
 8003c66:	f241 0c14 	movw	ip, #4116	; 0x1014
	REG_RCC_APB1ENR  = 0x00000000;
 8003c6a:	f241 0e1c 	movw	lr, #4124	; 0x101c
	REG_RCC_APB2ENR  = 0x00000000;	
 8003c6e:	f241 0718 	movw	r7, #4120	; 0x1018

	REG_RCC_APB1RSTR = 0xFFFFFFFF;
 8003c72:	f241 0010 	movw	r0, #4112	; 0x1010
	REG_RCC_APB2RSTR = 0xFFFFFFFF;
 8003c76:	f241 020c 	movw	r2, #4108	; 0x100c
	
	
	//-- 주변장치 클럭 및 레지스터 초기화 
	//
	REG_RCC_AHBENR   = 0x00000014;
	REG_RCC_APB1ENR  = 0x00000000;
 8003c7a:	2300      	movs	r3, #0
	REG_RCC_APB2ENR  = 0x00000000;	

	REG_RCC_APB1RSTR = 0xFFFFFFFF;
 8003c7c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8003c80:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	REG_RCC_APB2RSTR = 0xFFFFFFFF;
 8003c84:	f2c4 0202 	movt	r2, #16386	; 0x4002
	unsigned long *pulSrc, *pulDest;	
	
	
	//-- 주변장치 클럭 및 레지스터 초기화 
	//
	REG_RCC_AHBENR   = 0x00000014;
 8003c88:	f2c4 0c02 	movt	ip, #16386	; 0x4002
	REG_RCC_APB1ENR  = 0x00000000;
 8003c8c:	f2c4 0e02 	movt	lr, #16386	; 0x4002
	REG_RCC_APB2ENR  = 0x00000000;	
 8003c90:	f2c4 0702 	movt	r7, #16386	; 0x4002
	REG_RCC_APB2RSTR = 0x00000000;


	//-- Remap된 IO가 있으면 초기화
	//
	REG_AFIO_MAPR    = 0x00000000;
 8003c94:	f2c4 0501 	movt	r5, #16385	; 0x4001
	REG_AFIO_MAPR2   = 0x00000000;
 8003c98:	f2c4 0401 	movt	r4, #16385	; 0x4001
	unsigned long *pulSrc, *pulDest;	
	
	
	//-- 주변장치 클럭 및 레지스터 초기화 
	//
	REG_RCC_AHBENR   = 0x00000014;
 8003c9c:	f04f 0914 	mov.w	r9, #20
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8003ca0:	4541      	cmp	r1, r8
	unsigned long *pulSrc, *pulDest;	
	
	
	//-- 주변장치 클럭 및 레지스터 초기화 
	//
	REG_RCC_AHBENR   = 0x00000014;
 8003ca2:	f8cc 9000 	str.w	r9, [ip]
	REG_RCC_APB1ENR  = 0x00000000;
 8003ca6:	f8ce 3000 	str.w	r3, [lr]
	REG_RCC_APB2ENR  = 0x00000000;	
 8003caa:	603b      	str	r3, [r7, #0]

	REG_RCC_APB1RSTR = 0xFFFFFFFF;
 8003cac:	6006      	str	r6, [r0, #0]
	REG_RCC_APB2RSTR = 0xFFFFFFFF;
 8003cae:	6016      	str	r6, [r2, #0]
	REG_RCC_APB1RSTR = 0x00000000;
 8003cb0:	6003      	str	r3, [r0, #0]
	REG_RCC_APB2RSTR = 0x00000000;
 8003cb2:	6013      	str	r3, [r2, #0]


	//-- Remap된 IO가 있으면 초기화
	//
	REG_AFIO_MAPR    = 0x00000000;
 8003cb4:	602b      	str	r3, [r5, #0]
	REG_AFIO_MAPR2   = 0x00000000;
 8003cb6:	6023      	str	r3, [r4, #0]
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8003cb8:	d21c      	bcs.n	8003cf4 <Hw_StartUp_Init+0xa4>
     WORK    :	 
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
 8003cba:	f108 0503 	add.w	r5, r8, #3
 8003cbe:	1d0c      	adds	r4, r1, #4
 8003cc0:	1b2e      	subs	r6, r5, r4
 8003cc2:	4827      	ldr	r0, [pc, #156]	; (8003d60 <zero_loop+0x64>)
 8003cc4:	f026 0203 	bic.w	r2, r6, #3
 8003cc8:	1d16      	adds	r6, r2, #4
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
	{
		*(pulDest++) = *(pulSrc++);
 8003cca:	6805      	ldr	r5, [r0, #0]
 8003ccc:	2304      	movs	r3, #4
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8003cce:	42b3      	cmp	r3, r6
	{
		*(pulDest++) = *(pulSrc++);
 8003cd0:	600d      	str	r5, [r1, #0]
 8003cd2:	f3c2 0280 	ubfx	r2, r2, #2, #1
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8003cd6:	d00d      	beq.n	8003cf4 <Hw_StartUp_Init+0xa4>
 8003cd8:	b122      	cbz	r2, 8003ce4 <Hw_StartUp_Init+0x94>
	{
		*(pulDest++) = *(pulSrc++);
 8003cda:	6842      	ldr	r2, [r0, #4]
 8003cdc:	2308      	movs	r3, #8
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8003cde:	42b3      	cmp	r3, r6
	{
		*(pulDest++) = *(pulSrc++);
 8003ce0:	6022      	str	r2, [r4, #0]
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8003ce2:	d007      	beq.n	8003cf4 <Hw_StartUp_Init+0xa4>
	{
		*(pulDest++) = *(pulSrc++);
 8003ce4:	581d      	ldr	r5, [r3, r0]
 8003ce6:	1d1a      	adds	r2, r3, #4
 8003ce8:	505d      	str	r5, [r3, r1]
 8003cea:	5884      	ldr	r4, [r0, r2]
 8003cec:	3308      	adds	r3, #8
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8003cee:	42b3      	cmp	r3, r6
	{
		*(pulDest++) = *(pulSrc++);
 8003cf0:	508c      	str	r4, [r1, r2]
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8003cf2:	d1f7      	bne.n	8003ce4 <Hw_StartUp_Init+0x94>
		*(pulDest++) = *(pulSrc++);
	}
  
	/* Zero fill the bss segment.  This is done with inline assembly since this
	   will clear the value of pulDest if it is not kept in a register. */
	__asm("  ldr     r0, =_sbss\n"
 8003cf4:	481d      	ldr	r0, [pc, #116]	; (8003d6c <zero_loop+0x70>)
 8003cf6:	491e      	ldr	r1, [pc, #120]	; (8003d70 <zero_loop+0x74>)
 8003cf8:	f04f 0200 	mov.w	r2, #0

08003cfc <zero_loop>:
 8003cfc:	4288      	cmp	r0, r1
 8003cfe:	bfb8      	it	lt
 8003d00:	f840 2b04 	strlt.w	r2, [r0], #4
 8003d04:	f6ff affa 	blt.w	8003cfc <zero_loop>
	
    // HSI or HSE 선택
            
    //-- CR_HSEON_Set
    //
	REG_RCC_CR |= (1<<16);	
 8003d08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d0c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003d10:	6811      	ldr	r1, [r2, #0]
 8003d12:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8003d16:	f441 3080 	orr.w	r0, r1, #65536	; 0x10000
 8003d1a:	6010      	str	r0, [r2, #0]
 8003d1c:	e004      	b.n	8003d28 <zero_loop+0x2c>
		
	//-- 설정된 clock 이 설정 되었는지 확인
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
 8003d1e:	6810      	ldr	r0, [r2, #0]
		TimeOutCnt++;		
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
 8003d20:	0381      	lsls	r1, r0, #14
 8003d22:	d405      	bmi.n	8003d30 <zero_loop+0x34>
 8003d24:	3b01      	subs	r3, #1
 8003d26:	d003      	beq.n	8003d30 <zero_loop+0x34>
		
	//-- 설정된 clock 이 설정 되었는지 확인
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
 8003d28:	6811      	ldr	r1, [r2, #0]
 8003d2a:	3b01      	subs	r3, #1
		TimeOutCnt++;		
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
 8003d2c:	0388      	lsls	r0, r1, #14
 8003d2e:	d5f6      	bpl.n	8003d1e <zero_loop+0x22>
  

	//-- FLASH Access 타이밍 설정
	//
	REG_FLASH_ACR |=  (1<<4);	// Prefetch buffer enable
 8003d30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d34:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8003d38:	680a      	ldr	r2, [r1, #0]
 8003d3a:	f042 0010 	orr.w	r0, r2, #16
 8003d3e:	6008      	str	r0, [r1, #0]
	REG_FLASH_ACR &= ~(3<<0);	// LATENCY Clear
 8003d40:	680b      	ldr	r3, [r1, #0]
 8003d42:	f023 0203 	bic.w	r2, r3, #3
 8003d46:	600a      	str	r2, [r1, #0]
	REG_FLASH_ACR |=  (2<<0);	// LATENCY = two wait
 8003d48:	6808      	ldr	r0, [r1, #0]
 8003d4a:	f040 0302 	orr.w	r3, r0, #2
 8003d4e:	600b      	str	r3, [r1, #0]


    main();
 8003d50:	4904      	ldr	r1, [pc, #16]	; (8003d64 <zero_loop+0x68>)
 8003d52:	4788      	blx	r1

}
 8003d54:	e8bd 43f1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, lr}
 8003d58:	4685      	mov	sp, r0
 8003d5a:	4770      	bx	lr
 8003d5c:	20000000 	.word	0x20000000
 8003d60:	08006438 	.word	0x08006438
 8003d64:	08003019 	.word	0x08003019
 8003d68:	200000e4 	.word	0x200000e4
 8003d6c:	20000200 	.word	0x20000200
 8003d70:	20001034 	.word	0x20001034

08003d74 <Hw_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Init( void )
{
 8003d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//-- PLL 설정
	//
	Hw_PLL_Init();
 8003d76:	f643 7319 	movw	r3, #16153	; 0x3f19
 8003d7a:	f6c0 0300 	movt	r3, #2048	; 0x800
 8003d7e:	4798      	blx	r3
	
	
	//-- 인터럽트 관련 초기화
	//
	Hw_ISR_Init();
 8003d80:	f244 107d 	movw	r0, #16765	; 0x417d
 8003d84:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003d88:	4780      	blx	r0
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 8003d8a:	f640 0604 	movw	r6, #2052	; 0x804
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 8003d8e:	f44f 6e00 	mov.w	lr, #2048	; 0x800
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 8003d92:	f243 47b3 	movw	r7, #13491	; 0x34b3
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 8003d96:	f44f 6540 	mov.w	r5, #3072	; 0xc00
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 8003d9a:	f640 4404 	movw	r4, #3076	; 0xc04
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 8003d9e:	f241 0104 	movw	r1, #4100	; 0x1004
 8003da2:	f244 4044 	movw	r0, #17476	; 0x4444
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 8003da6:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8003daa:	f2c4 0e01 	movt	lr, #16385	; 0x4001
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 8003dae:	f2c3 3044 	movt	r0, #13124	; 0x3344
 8003db2:	f2c4 0101 	movt	r1, #16385	; 0x4001
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 8003db6:	f2c4 0601 	movt	r6, #16385	; 0x4001
 8003dba:	f2c3 3733 	movt	r7, #13107	; 0x3333
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 8003dbe:	f2c4 0501 	movt	r5, #16385	; 0x4001
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 8003dc2:	f2c4 0401 	movt	r4, #16385	; 0x4001
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
	
	//Hw_DMA_Init();
	Hw_Uart_Init();
 8003dc6:	f643 63b1 	movw	r3, #16049	; 0x3eb1
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 8003dca:	f8ce 2000 	str.w	r2, [lr]
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
	
	//Hw_DMA_Init();
	Hw_Uart_Init();
 8003dce:	f6c0 0300 	movt	r3, #2048	; 0x800
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 8003dd2:	6037      	str	r7, [r6, #0]
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 8003dd4:	602a      	str	r2, [r5, #0]
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 8003dd6:	6022      	str	r2, [r4, #0]
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 8003dd8:	6008      	str	r0, [r1, #0]
	
	//Hw_DMA_Init();
	Hw_Uart_Init();
 8003dda:	4798      	blx	r3
	Hw_Led_Init();
 8003ddc:	f643 71d5 	movw	r1, #16341	; 0x3fd5
 8003de0:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003de4:	4788      	blx	r1
	Hw_Timer_Init();
 8003de6:	f244 10cd 	movw	r0, #16845	; 0x41cd
 8003dea:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003dee:	4780      	blx	r0
	//Hw_Si47xx_Init();
	//Hw_N5110G_Init();
	//Hw_I2C_Init();
	
	Hw_VCom_Init();
 8003df0:	f244 4269 	movw	r2, #17513	; 0x4469
 8003df4:	f6c0 0200 	movt	r2, #2048	; 0x800
 8003df8:	4790      	blx	r2
 8003dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003dfc <Hw_ISR_UART1_Handler>:


//-- UART1 ISR
//
void Hw_ISR_UART1_Handler(void)
{
 8003dfc:	b500      	push	{lr}
	u8 UartData;
				
	UartData = REG_USART1_DR;
 8003dfe:	f643 0304 	movw	r3, #14340	; 0x3804
 8003e02:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003e06:	6818      	ldr	r0, [r3, #0]


//-- UART1 ISR
//
void Hw_ISR_UART1_Handler(void)
{
 8003e08:	b083      	sub	sp, #12
	u8 UartData;
				
	UartData = REG_USART1_DR;
 8003e0a:	a902      	add	r1, sp, #8
	
	Hw_Uart_Q_Push( 0, &UartData );
 8003e0c:	f244 028d 	movw	r2, #16525	; 0x408d
//
void Hw_ISR_UART1_Handler(void)
{
	u8 UartData;
				
	UartData = REG_USART1_DR;
 8003e10:	f801 0d01 	strb.w	r0, [r1, #-1]!
	
	Hw_Uart_Q_Push( 0, &UartData );
 8003e14:	f6c0 0200 	movt	r2, #2048	; 0x800
 8003e18:	2000      	movs	r0, #0
 8003e1a:	4790      	blx	r2
}
 8003e1c:	b003      	add	sp, #12
 8003e1e:	bd00      	pop	{pc}

08003e20 <Hw_Uart_Open_COM1>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
 8003e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 8003e24:	f241 0618 	movw	r6, #4120	; 0x1018
 8003e28:	f2c4 0602 	movt	r6, #16386	; 0x4002
 8003e2c:	6835      	ldr	r5, [r6, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 8003e2e:	f240 23b8 	movw	r3, #696	; 0x2b8
 8003e32:	f2c2 0300 	movt	r3, #8192	; 0x2000
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 8003e36:	f643 040c 	movw	r4, #14348	; 0x380c
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8003e3a:	f643 0c10 	movw	ip, #14352	; 0x3810
	REG_USART1_CR3  = 0;
 8003e3e:	f643 0e14 	movw	lr, #14356	; 0x3814
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 8003e42:	f643 0708 	movw	r7, #14344	; 0x3808
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 8003e46:	6058      	str	r0, [r3, #4]
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
 8003e48:	6099      	str	r1, [r3, #8]
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 8003e4a:	f2c4 0401 	movt	r4, #16385	; 0x4001
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8003e4e:	2200      	movs	r2, #0
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 8003e50:	f445 4880 	orr.w	r8, r5, #16384	; 0x4000
	REG_USART1_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8003e54:	f2c4 0c01 	movt	ip, #16385	; 0x4001
	REG_USART1_CR3  = 0;
 8003e58:	f2c4 0e01 	movt	lr, #16385	; 0x4001
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 8003e5c:	200c      	movs	r0, #12
	REG_USART1_CR3  = 0;
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 8003e5e:	f240 2171 	movw	r1, #625	; 0x271
 8003e62:	f2c4 0701 	movt	r7, #16385	; 0x4001
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 8003e66:	f24e 1504 	movw	r5, #57604	; 0xe104
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 8003e6a:	f8c6 8000 	str.w	r8, [r6]
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 8003e6e:	f2ce 0500 	movt	r5, #57344	; 0xe000
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 8003e72:	6020      	str	r0, [r4, #0]
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8003e74:	f8cc 2000 	str.w	r2, [ip]
	REG_USART1_CR3  = 0;
 8003e78:	f8ce 2000 	str.w	r2, [lr]
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 8003e7c:	6039      	str	r1, [r7, #0]
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 8003e7e:	682b      	ldr	r3, [r5, #0]
 8003e80:	f043 0020 	orr.w	r0, r3, #32
 8003e84:	6028      	str	r0, [r5, #0]
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 8003e86:	6821      	ldr	r1, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 8003e88:	f244 1391 	movw	r3, #16785	; 0x4191
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 8003e8c:	f041 0020 	orr.w	r0, r1, #32
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 8003e90:	f643 51fd 	movw	r1, #15869	; 0x3dfd
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 8003e94:	6020      	str	r0, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 8003e96:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003e9a:	2025      	movs	r0, #37	; 0x25
 8003e9c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8003ea0:	4798      	blx	r3
	
	REG_USART1_CR1 |= ( 1 << 13 );	    // USART Enable
 8003ea2:	6822      	ldr	r2, [r4, #0]
 8003ea4:	f442 5100 	orr.w	r1, r2, #8192	; 0x2000
 8003ea8:	6021      	str	r1, [r4, #0]
 8003eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003eae:	bf00      	nop

08003eb0 <Hw_Uart_Init>:
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
{
	u32 i;
	
	Hw_Uart_Q_Init();
 8003eb0:	f244 032d 	movw	r3, #16429	; 0x402d
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
{
 8003eb4:	b510      	push	{r4, lr}
	u32 i;
	
	Hw_Uart_Q_Init();
 8003eb6:	f6c0 0300 	movt	r3, #2048	; 0x800
 8003eba:	4798      	blx	r3
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8003ebc:	f240 23b8 	movw	r3, #696	; 0x2b8
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f2c2 0300 	movt	r3, #8192	; 0x2000
void Hw_Uart_Open( u8 Ch, u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
	switch( Ch )
	{
		case HW_UART_COM1:
			Hw_Uart_Open_COM1( BaudData, ISR_FuncPtr );
 8003ec6:	f643 6421 	movw	r4, #15905	; 0x3e21
 8003eca:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8003ece:	4611      	mov	r1, r2
 8003ed0:	f6c0 0400 	movt	r4, #2048	; 0x800
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8003ed4:	605a      	str	r2, [r3, #4]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8003ed6:	609a      	str	r2, [r3, #8]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8003ed8:	611a      	str	r2, [r3, #16]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8003eda:	615a      	str	r2, [r3, #20]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8003edc:	61da      	str	r2, [r3, #28]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8003ede:	621a      	str	r2, [r3, #32]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8003ee0:	629a      	str	r2, [r3, #40]	; 0x28
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8003ee2:	62da      	str	r2, [r3, #44]	; 0x2c
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8003ee4:	635a      	str	r2, [r3, #52]	; 0x34
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8003ee6:	639a      	str	r2, [r3, #56]	; 0x38
void Hw_Uart_Open( u8 Ch, u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
	switch( Ch )
	{
		case HW_UART_COM1:
			Hw_Uart_Open_COM1( BaudData, ISR_FuncPtr );
 8003ee8:	47a0      	blx	r4
 8003eea:	bd10      	pop	{r4, pc}

08003eec <print_byte>:
//------------------------------- printf 포팅용 --------------------------------
//
void print_byte(unsigned int c)
{
#if HW_USE_USB_VCOM == 1
	if (c == '\n') Hw_VCom_Putch('\r');
 8003eec:	280a      	cmp	r0, #10


//------------------------------- printf 포팅용 --------------------------------
//
void print_byte(unsigned int c)
{
 8003eee:	b538      	push	{r3, r4, r5, lr}
 8003ef0:	4604      	mov	r4, r0
#if HW_USE_USB_VCOM == 1
	if (c == '\n') Hw_VCom_Putch('\r');
 8003ef2:	d003      	beq.n	8003efc <print_byte+0x10>
 8003ef4:	4d03      	ldr	r5, [pc, #12]	; (8003f04 <print_byte+0x18>)
    
    Hw_VCom_Putch(c);
 8003ef6:	b2e0      	uxtb	r0, r4
 8003ef8:	47a8      	blx	r5
 8003efa:	bd38      	pop	{r3, r4, r5, pc}
//------------------------------- printf 포팅용 --------------------------------
//
void print_byte(unsigned int c)
{
#if HW_USE_USB_VCOM == 1
	if (c == '\n') Hw_VCom_Putch('\r');
 8003efc:	200d      	movs	r0, #13
 8003efe:	4d01      	ldr	r5, [pc, #4]	; (8003f04 <print_byte+0x18>)
 8003f00:	47a8      	blx	r5
 8003f02:	e7f8      	b.n	8003ef6 <print_byte+0xa>
 8003f04:	080044c5 	.word	0x080044c5

08003f08 <get_byte>:
#endif    
}


char get_byte(void)
{
 8003f08:	b508      	push	{r3, lr}
	char Ch;
	
#if HW_USE_USB_VCOM == 1	
	Ch = Hw_VCom_Getch();
 8003f0a:	f244 4395 	movw	r3, #17557	; 0x4495
 8003f0e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8003f12:	4798      	blx	r3
#else	
	Ch = Hw_Uart_Getch(HW_UART_COM1);
#endif
	
	return Ch;
}
 8003f14:	bd08      	pop	{r3, pc}
 8003f16:	bf00      	nop

08003f18 <Hw_PLL_Init>:
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
 8003f18:	f241 0304 	movw	r3, #4100	; 0x1004
 8003f1c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003f20:	681a      	ldr	r2, [r3, #0]
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 8003f22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
 8003f26:	f422 107c 	bic.w	r0, r2, #4128768	; 0x3f0000
 8003f2a:	f020 02f0 	bic.w	r2, r0, #240	; 0xf0
 8003f2e:	601a      	str	r2, [r3, #0]
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
 8003f30:	6818      	ldr	r0, [r3, #0]
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 8003f32:	f2c4 0102 	movt	r1, #16386	; 0x4002
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
 8003f36:	f440 12e8 	orr.w	r2, r0, #1900544	; 0x1d0000
 8003f3a:	601a      	str	r2, [r3, #0]
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 8003f3c:	680b      	ldr	r3, [r1, #0]

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 8003f3e:	4608      	mov	r0, r1
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 8003f40:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003f44:	600a      	str	r2, [r1, #0]

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 8003f46:	6801      	ldr	r1, [r0, #0]
 8003f48:	018b      	lsls	r3, r1, #6
 8003f4a:	d5fc      	bpl.n	8003f46 <Hw_PLL_Init+0x2e>
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 8003f4c:	f241 0304 	movw	r3, #4100	; 0x1004
 8003f50:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003f54:	6818      	ldr	r0, [r3, #0]
	//
	REG_RCC_CFGR &= ~(0x7<<11);
	REG_RCC_CFGR |=  (0x0<<11);

    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 8003f56:	461a      	mov	r2, r3
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 8003f58:	f020 0103 	bic.w	r1, r0, #3
 8003f5c:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  0x2;
 8003f5e:	6818      	ldr	r0, [r3, #0]
 8003f60:	f040 0102 	orr.w	r1, r0, #2
 8003f64:	6019      	str	r1, [r3, #0]

	// USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );
 8003f66:	6818      	ldr	r0, [r3, #0]
 8003f68:	f420 0180 	bic.w	r1, r0, #4194304	; 0x400000
 8003f6c:	6019      	str	r1, [r3, #0]

	// APB1 - PCLK1 36Mhz
	//
	REG_RCC_CFGR &= ~(0x7<<8);
 8003f6e:	6818      	ldr	r0, [r3, #0]
 8003f70:	f420 61e0 	bic.w	r1, r0, #1792	; 0x700
 8003f74:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  (0x4<<8);
 8003f76:	6818      	ldr	r0, [r3, #0]
 8003f78:	f440 6180 	orr.w	r1, r0, #1024	; 0x400
 8003f7c:	6019      	str	r1, [r3, #0]
	
	// APB2 - PCLK2 72Mhz
	//
	REG_RCC_CFGR &= ~(0x7<<11);
 8003f7e:	6818      	ldr	r0, [r3, #0]
 8003f80:	f420 5160 	bic.w	r1, r0, #14336	; 0x3800
 8003f84:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  (0x0<<11);
 8003f86:	6818      	ldr	r0, [r3, #0]
 8003f88:	6018      	str	r0, [r3, #0]

    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 8003f8a:	6813      	ldr	r3, [r2, #0]
 8003f8c:	f003 010c 	and.w	r1, r3, #12
 8003f90:	2908      	cmp	r1, #8
 8003f92:	d1fa      	bne.n	8003f8a <Hw_PLL_Init+0x72>
    
    //APB2에 있는 UART 등 주변장치에 Clock 소스 동작제어
    //UART가 동작되기 위해서는 GPIO와 Alternation Function IO가 동작상태에 있어야 함
	REG_RCC_APB2ENR |= 0  |
 8003f94:	f241 0018 	movw	r0, #4120	; 0x1018
 8003f98:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8003f9c:	6802      	ldr	r2, [r0, #0]
 8003f9e:	f442 4380 	orr.w	r3, r2, #16384	; 0x4000
 8003fa2:	f043 011d 	orr.w	r1, r3, #29
 8003fa6:	6001      	str	r1, [r0, #0]
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop

08003fac <Hw_IWDG_GoToBoot>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_IWDG_GoToBoot( void )
{
	REG_IWDG_PR  = 0;	   // divider / 4
 8003fac:	f243 0104 	movw	r1, #12292	; 0x3004
 8003fb0:	f2c4 0100 	movt	r1, #16384	; 0x4000
	REG_IWDG_RLR = 1;
 8003fb4:	f243 0208 	movw	r2, #12296	; 0x3008
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_IWDG_GoToBoot( void )
{
	REG_IWDG_PR  = 0;	   // divider / 4
 8003fb8:	2000      	movs	r0, #0
 8003fba:	6008      	str	r0, [r1, #0]
	REG_IWDG_RLR = 1;
 8003fbc:	f2c4 0200 	movt	r2, #16384	; 0x4000

	REG_IWDG_KR  = 0xCCCC; // Start
 8003fc0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
     RET     : void
---------------------------------------------------------------------------*/
void Hw_IWDG_GoToBoot( void )
{
	REG_IWDG_PR  = 0;	   // divider / 4
	REG_IWDG_RLR = 1;
 8003fc4:	2101      	movs	r1, #1
 8003fc6:	6011      	str	r1, [r2, #0]

	REG_IWDG_KR  = 0xCCCC; // Start
 8003fc8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003fcc:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003fd0:	601a      	str	r2, [r3, #0]
 8003fd2:	4770      	bx	lr

08003fd4 <Hw_Led_Init>:
{
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 8003fd4:	2204      	movs	r2, #4
 8003fd6:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003fda:	6811      	ldr	r1, [r2, #0]
	REG_AFIO_MAPR |=  (0x04 << 24);
	
	PinNum = 9;
	REG_GPIOB_CRH &= ~(0x0F << ((PinNum-8)*4+0));	// Clear
 8003fdc:	f640 4304 	movw	r3, #3076	; 0xc04
{
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 8003fe0:	f021 60e0 	bic.w	r0, r1, #117440512	; 0x7000000
 8003fe4:	6010      	str	r0, [r2, #0]
	REG_AFIO_MAPR |=  (0x04 << 24);
 8003fe6:	6811      	ldr	r1, [r2, #0]
	
	PinNum = 9;
	REG_GPIOB_CRH &= ~(0x0F << ((PinNum-8)*4+0));	// Clear
 8003fe8:	f2c4 0301 	movt	r3, #16385	; 0x4001
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
	REG_AFIO_MAPR |=  (0x04 << 24);
 8003fec:	f041 6080 	orr.w	r0, r1, #67108864	; 0x4000000
 8003ff0:	6010      	str	r0, [r2, #0]
	
	PinNum = 9;
	REG_GPIOB_CRH &= ~(0x0F << ((PinNum-8)*4+0));	// Clear
 8003ff2:	6819      	ldr	r1, [r3, #0]
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 9 );
 8003ff4:	f640 420c 	movw	r2, #3084	; 0xc0c
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
	REG_AFIO_MAPR |=  (0x04 << 24);
	
	PinNum = 9;
	REG_GPIOB_CRH &= ~(0x0F << ((PinNum-8)*4+0));	// Clear
 8003ff8:	f021 00f0 	bic.w	r0, r1, #240	; 0xf0
 8003ffc:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ((PinNum-8)*4+0));	// MODE, PB.3 Output mode, max speed 50Mhz
 8003ffe:	6819      	ldr	r1, [r3, #0]
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 9 );
 8004000:	f2c4 0201 	movt	r2, #16385	; 0x4001
	REG_AFIO_MAPR &= ~(0x07 << 24);
	REG_AFIO_MAPR |=  (0x04 << 24);
	
	PinNum = 9;
	REG_GPIOB_CRH &= ~(0x0F << ((PinNum-8)*4+0));	// Clear
	REG_GPIOB_CRH |=  (0x03 << ((PinNum-8)*4+0));	// MODE, PB.3 Output mode, max speed 50Mhz
 8004004:	f041 0030 	orr.w	r0, r1, #48	; 0x30
 8004008:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x00 << ((PinNum-8)*4+2));	// CNF,  PB.3 General purpose output push-pul
 800400a:	6819      	ldr	r1, [r3, #0]
 800400c:	6019      	str	r1, [r3, #0]
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 9 );
 800400e:	6813      	ldr	r3, [r2, #0]
 8004010:	f443 7000 	orr.w	r0, r3, #512	; 0x200
 8004014:	6010      	str	r0, [r2, #0]
 8004016:	4770      	bx	lr

08004018 <Hw_Led_Toggle>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Led_Toggle( u8 Ch )
{
	switch( Ch )
 8004018:	b938      	cbnz	r0, 800402a <Hw_Led_Toggle+0x12>
	{
		case 0:
			TGL_BIT( REG_GPIOB_ODR, 9 );
 800401a:	f640 430c 	movw	r3, #3084	; 0xc0c
 800401e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	f482 7000 	eor.w	r0, r2, #512	; 0x200
 8004028:	6018      	str	r0, [r3, #0]
 800402a:	4770      	bx	lr

0800402c <Hw_Uart_Q_Init>:
{
	u8 i;

	for( i=0; i<HW_UART_Q_CH_MAX; i++ )
	{
		Hw_Uart_Q_Start[i] = Hw_Uart_Q_End[i] = 0;
 800402c:	f240 31ec 	movw	r1, #1004	; 0x3ec
 8004030:	f240 32fc 	movw	r2, #1020	; 0x3fc
 8004034:	2300      	movs	r3, #0
 8004036:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800403a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800403e:	800b      	strh	r3, [r1, #0]
 8004040:	8013      	strh	r3, [r2, #0]
 8004042:	804b      	strh	r3, [r1, #2]
 8004044:	8053      	strh	r3, [r2, #2]
 8004046:	808b      	strh	r3, [r1, #4]
 8004048:	8093      	strh	r3, [r2, #4]
 800404a:	80cb      	strh	r3, [r1, #6]
 800404c:	80d3      	strh	r3, [r2, #6]
 800404e:	810b      	strh	r3, [r1, #8]
 8004050:	8113      	strh	r3, [r2, #8]
 8004052:	814b      	strh	r3, [r1, #10]
 8004054:	8153      	strh	r3, [r2, #10]
 8004056:	818b      	strh	r3, [r1, #12]
 8004058:	8193      	strh	r3, [r2, #12]
 800405a:	4770      	bx	lr

0800405c <HW_UART_Q_VAILD>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 800405c:	4b09      	ldr	r3, [pc, #36]	; (8004084 <HW_UART_Q_VAILD+0x28>)
 800405e:	490a      	ldr	r1, [pc, #40]	; (8004088 <HW_UART_Q_VAILD+0x2c>)
 8004060:	f933 2010 	ldrsh.w	r2, [r3, r0, lsl #1]
 8004064:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
 8004068:	201f      	movs	r0, #31
 800406a:	1ad2      	subs	r2, r2, r3
 800406c:	3220      	adds	r2, #32
 800406e:	f2c8 0000 	movt	r0, #32768	; 0x8000
 8004072:	4010      	ands	r0, r2
 8004074:	2800      	cmp	r0, #0
 8004076:	db00      	blt.n	800407a <HW_UART_Q_VAILD+0x1e>
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_VAILD( u8 Ch )
{
	return HW_UART_Q_SIZE(Ch);
}
 8004078:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 800407a:	3801      	subs	r0, #1
 800407c:	f060 011f 	orn	r1, r0, #31
 8004080:	1c48      	adds	r0, r1, #1
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_VAILD( u8 Ch )
{
	return HW_UART_Q_SIZE(Ch);
}
 8004082:	4770      	bx	lr
 8004084:	200003fc 	.word	0x200003fc
 8004088:	200003ec 	.word	0x200003ec

0800408c <Hw_Uart_Q_Push>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 800408c:	4a1a      	ldr	r2, [pc, #104]	; (80040f8 <Hw_Uart_Q_Push+0x6c>)
 800408e:	4b1b      	ldr	r3, [pc, #108]	; (80040fc <Hw_Uart_Q_Push+0x70>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{
 8004090:	b4f0      	push	{r4, r5, r6, r7}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8004092:	f832 5010 	ldrh.w	r5, [r2, r0, lsl #1]
 8004096:	f933 6010 	ldrsh.w	r6, [r3, r0, lsl #1]
 800409a:	b22c      	sxth	r4, r5
 800409c:	231f      	movs	r3, #31
 800409e:	1ba6      	subs	r6, r4, r6
 80040a0:	3620      	adds	r6, #32
 80040a2:	f2c8 0300 	movt	r3, #32768	; 0x8000
 80040a6:	4033      	ands	r3, r6
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	db18      	blt.n	80040de <Hw_Uart_Q_Push+0x52>
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 80040ac:	2b1f      	cmp	r3, #31
 80040ae:	d01c      	beq.n	80040ea <Hw_Uart_Q_Push+0x5e>

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 80040b0:	3501      	adds	r5, #1
 80040b2:	b2ad      	uxth	r5, r5
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 80040b4:	231f      	movs	r3, #31
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 80040b6:	780e      	ldrb	r6, [r1, #0]
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 80040b8:	f2c8 0300 	movt	r3, #32768	; 0x8000
 80040bc:	b229      	sxth	r1, r5
 80040be:	400b      	ands	r3, r1
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 80040c0:	eb00 1740 	add.w	r7, r0, r0, lsl #5
 80040c4:	490e      	ldr	r1, [pc, #56]	; (8004100 <Hw_Uart_Q_Push+0x74>)
 80040c6:	193c      	adds	r4, r7, r4
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 80040c8:	2b00      	cmp	r3, #0
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 80040ca:	550e      	strb	r6, [r1, r4]
 80040cc:	f822 5010 	strh.w	r5, [r2, r0, lsl #1]
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 80040d0:	db0d      	blt.n	80040ee <Hw_Uart_Q_Push+0x62>
 80040d2:	4909      	ldr	r1, [pc, #36]	; (80040f8 <Hw_Uart_Q_Push+0x6c>)
 80040d4:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]

	return TRUE;
 80040d8:	2001      	movs	r0, #1
}
 80040da:	bcf0      	pop	{r4, r5, r6, r7}
 80040dc:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 80040de:	3b01      	subs	r3, #1
 80040e0:	f063 031f 	orn	r3, r3, #31
 80040e4:	3301      	adds	r3, #1
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 80040e6:	2b1f      	cmp	r3, #31
 80040e8:	d1e2      	bne.n	80040b0 <Hw_Uart_Q_Push+0x24>
 80040ea:	2000      	movs	r0, #0
 80040ec:	e7f5      	b.n	80040da <Hw_Uart_Q_Push+0x4e>

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 80040ee:	1e5a      	subs	r2, r3, #1
 80040f0:	f062 031f 	orn	r3, r2, #31
 80040f4:	3301      	adds	r3, #1
 80040f6:	e7ec      	b.n	80040d2 <Hw_Uart_Q_Push+0x46>
 80040f8:	200003fc 	.word	0x200003fc
 80040fc:	200003ec 	.word	0x200003ec
 8004100:	200002f4 	.word	0x200002f4

08004104 <Hw_Uart_Q_Pop>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8004104:	4a1a      	ldr	r2, [pc, #104]	; (8004170 <Hw_Uart_Q_Pop+0x6c>)
 8004106:	4b1b      	ldr	r3, [pc, #108]	; (8004174 <Hw_Uart_Q_Pop+0x70>)
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
 8004108:	b470      	push	{r4, r5, r6}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 800410a:	f832 5010 	ldrh.w	r5, [r2, r0, lsl #1]
 800410e:	f933 6010 	ldrsh.w	r6, [r3, r0, lsl #1]
 8004112:	b22c      	sxth	r4, r5
 8004114:	231f      	movs	r3, #31
 8004116:	1b36      	subs	r6, r6, r4
 8004118:	3620      	adds	r6, #32
 800411a:	f2c8 0300 	movt	r3, #32768	; 0x8000
 800411e:	4033      	ands	r3, r6
 8004120:	2b00      	cmp	r3, #0
 8004122:	db17      	blt.n	8004154 <Hw_Uart_Q_Pop+0x50>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;
 8004124:	b1e3      	cbz	r3, 8004160 <Hw_Uart_Q_Pop+0x5c>

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8004126:	eb00 1640 	add.w	r6, r0, r0, lsl #5
 800412a:	3501      	adds	r5, #1
 800412c:	1934      	adds	r4, r6, r4
 800412e:	4e12      	ldr	r6, [pc, #72]	; (8004178 <Hw_Uart_Q_Pop+0x74>)
 8004130:	b2ad      	uxth	r5, r5

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8004132:	231f      	movs	r3, #31
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8004134:	5d34      	ldrb	r4, [r6, r4]

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8004136:	f2c8 0300 	movt	r3, #32768	; 0x8000
 800413a:	b22e      	sxth	r6, r5
 800413c:	4033      	ands	r3, r6
 800413e:	2b00      	cmp	r3, #0
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8004140:	700c      	strb	r4, [r1, #0]
 8004142:	f822 5010 	strh.w	r5, [r2, r0, lsl #1]

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8004146:	db0d      	blt.n	8004164 <Hw_Uart_Q_Pop+0x60>
 8004148:	4909      	ldr	r1, [pc, #36]	; (8004170 <Hw_Uart_Q_Pop+0x6c>)
 800414a:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]

    return TRUE;
 800414e:	2001      	movs	r0, #1
}
 8004150:	bc70      	pop	{r4, r5, r6}
 8004152:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8004154:	3b01      	subs	r3, #1
 8004156:	f063 031f 	orn	r3, r3, #31
 800415a:	3301      	adds	r3, #1
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1e2      	bne.n	8004126 <Hw_Uart_Q_Pop+0x22>
 8004160:	4618      	mov	r0, r3
 8004162:	e7f5      	b.n	8004150 <Hw_Uart_Q_Pop+0x4c>

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8004164:	1e59      	subs	r1, r3, #1
 8004166:	f061 021f 	orn	r2, r1, #31
 800416a:	1c53      	adds	r3, r2, #1
 800416c:	e7ec      	b.n	8004148 <Hw_Uart_Q_Pop+0x44>
 800416e:	bf00      	nop
 8004170:	200003ec 	.word	0x200003ec
 8004174:	200003fc 	.word	0x200003fc
 8004178:	200002f4 	.word	0x200002f4

0800417c <Hw_ISR_Init>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_ISR_Init( void )
{
	REG_SCB_VTOR = (u32)Hw_ISR_VectorTable;
 800417c:	f240 6300 	movw	r3, #1536	; 0x600
 8004180:	f64e 5208 	movw	r2, #60680	; 0xed08
 8004184:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004188:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800418c:	6013      	str	r3, [r2, #0]
 800418e:	4770      	bx	lr

08004190 <Hw_ISR_SetIRQFunc>:
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFunc( u8 ISR_Num, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = 16;
	
	Hw_ISR_VectorTable[ ISR_StartOffset + ISR_Num ] = FuncAddress;	
 8004190:	f240 6300 	movw	r3, #1536	; 0x600
 8004194:	3010      	adds	r0, #16
 8004196:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800419a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 800419e:	4770      	bx	lr

080041a0 <Hw_ISR_SetIRQFuncByAddr>:
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFuncByAddr( u32 ISR_Addr, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = ISR_Addr/4;
	
	Hw_ISR_VectorTable[ ISR_StartOffset ] = FuncAddress;	
 80041a0:	f240 6300 	movw	r3, #1536	; 0x600
     			u8  ISR_Priority : 인터럽트 우선순위(작은값이 우선순위 높음)
     RET     : void
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFuncByAddr( u32 ISR_Addr, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = ISR_Addr/4;
 80041a4:	0880      	lsrs	r0, r0, #2
	
	Hw_ISR_VectorTable[ ISR_StartOffset ] = FuncAddress;	
 80041a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80041aa:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 80041ae:	4770      	bx	lr

080041b0 <Hw_Timer_SetupISR>:
     	 	 	 타이머 H/W 기능을 초기화 한다.
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_SetupISR( void )
{	
 80041b0:	b508      	push	{r3, lr}
	Hw_ISR_SetIRQFuncByAddr( 0x003C, (u32)Hw_Timer_ISR, 0 );	
 80041b2:	f244 4125 	movw	r1, #17445	; 0x4425
 80041b6:	f244 13a1 	movw	r3, #16801	; 0x41a1
 80041ba:	203c      	movs	r0, #60	; 0x3c
 80041bc:	f6c0 0100 	movt	r1, #2048	; 0x800
 80041c0:	2200      	movs	r2, #0
 80041c2:	f6c0 0300 	movt	r3, #2048	; 0x800
 80041c6:	4798      	blx	r3
 80041c8:	bd08      	pop	{r3, pc}
 80041ca:	bf00      	nop

080041cc <Hw_Timer_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Init( void )
{
 80041cc:	b538      	push	{r3, r4, r5, lr}
	u8 i;
	static u8 Excute = 0;

	
	if( Excute == 1 ) return;  // 이미 한번 실행했다면 정지.
 80041ce:	4d28      	ldr	r5, [pc, #160]	; (8004270 <Hw_Timer_Init+0xa4>)
 80041d0:	782b      	ldrb	r3, [r5, #0]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d04a      	beq.n	800426c <Hw_Timer_Init+0xa0>
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 80041d6:	4827      	ldr	r0, [pc, #156]	; (8004274 <Hw_Timer_Init+0xa8>)
 80041d8:	2400      	movs	r4, #0
 80041da:	7004      	strb	r4, [r0, #0]
		Timer_Tbl[i].Timer_Ctn  = 0;
 80041dc:	8044      	strh	r4, [r0, #2]
		Timer_Tbl[i].Timer_Init = 0;
 80041de:	8084      	strh	r4, [r0, #4]
		Timer_Tbl[i].TmrFnct    = NULL;
 80041e0:	6084      	str	r4, [r0, #8]
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 80041e2:	7404      	strb	r4, [r0, #16]
		Timer_Tbl[i].Timer_Ctn  = 0;
 80041e4:	8244      	strh	r4, [r0, #18]
		Timer_Tbl[i].Timer_Init = 0;
 80041e6:	8284      	strh	r4, [r0, #20]
		Timer_Tbl[i].TmrFnct    = NULL;
 80041e8:	6184      	str	r4, [r0, #24]
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 80041ea:	f880 4020 	strb.w	r4, [r0, #32]
		Timer_Tbl[i].Timer_Ctn  = 0;
 80041ee:	8444      	strh	r4, [r0, #34]	; 0x22
		Timer_Tbl[i].Timer_Init = 0;
 80041f0:	8484      	strh	r4, [r0, #36]	; 0x24
		Timer_Tbl[i].TmrFnct    = NULL;
 80041f2:	6284      	str	r4, [r0, #40]	; 0x28
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 80041f4:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
		Timer_Tbl[i].Timer_Ctn  = 0;
 80041f8:	8644      	strh	r4, [r0, #50]	; 0x32
		Timer_Tbl[i].Timer_Init = 0;
 80041fa:	8684      	strh	r4, [r0, #52]	; 0x34
		Timer_Tbl[i].TmrFnct    = NULL;
 80041fc:	6384      	str	r4, [r0, #56]	; 0x38
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 80041fe:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
		Timer_Tbl[i].Timer_Ctn  = 0;
 8004202:	f8a0 4042 	strh.w	r4, [r0, #66]	; 0x42
		Timer_Tbl[i].Timer_Init = 0;
 8004206:	f8a0 4044 	strh.w	r4, [r0, #68]	; 0x44
		Timer_Tbl[i].TmrFnct    = NULL;
 800420a:	6484      	str	r4, [r0, #72]	; 0x48
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 800420c:	f880 4050 	strb.w	r4, [r0, #80]	; 0x50
		Timer_Tbl[i].Timer_Ctn  = 0;
 8004210:	f8a0 4052 	strh.w	r4, [r0, #82]	; 0x52
		Timer_Tbl[i].Timer_Init = 0;
 8004214:	f8a0 4054 	strh.w	r4, [r0, #84]	; 0x54
		Timer_Tbl[i].TmrFnct    = NULL;
 8004218:	6584      	str	r4, [r0, #88]	; 0x58
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 800421a:	f880 4060 	strb.w	r4, [r0, #96]	; 0x60
		Timer_Tbl[i].Timer_Ctn  = 0;
 800421e:	f8a0 4062 	strh.w	r4, [r0, #98]	; 0x62
		Timer_Tbl[i].Timer_Init = 0;
 8004222:	f8a0 4064 	strh.w	r4, [r0, #100]	; 0x64
		Timer_Tbl[i].TmrFnct    = NULL;
 8004226:	6684      	str	r4, [r0, #104]	; 0x68
	}	                   
	
	
	Hw_Timer_SetupISR();
 8004228:	4913      	ldr	r1, [pc, #76]	; (8004278 <Hw_Timer_Init+0xac>)
 800422a:	4788      	blx	r1
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 800422c:	f24e 0114 	movw	r1, #57364	; 0xe014
 8004230:	f641 103f 	movw	r0, #6463	; 0x193f
	
	REG_STK_VAL  = 0;	
 8004234:	f24e 0218 	movw	r2, #57368	; 0xe018
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 8004238:	f2ce 0100 	movt	r1, #57344	; 0xe000
 800423c:	f2c0 0001 	movt	r0, #1
	
	REG_STK_VAL  = 0;	
 8004240:	f2ce 0200 	movt	r2, #57344	; 0xe000
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 8004244:	f24e 0310 	movw	r3, #57360	; 0xe010
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 8004248:	6008      	str	r0, [r1, #0]
	
	REG_STK_VAL  = 0;	
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 800424a:	f2ce 0300 	movt	r3, #57344	; 0xe000
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
	
	REG_STK_VAL  = 0;	
 800424e:	6014      	str	r4, [r2, #0]
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 8004250:	6819      	ldr	r1, [r3, #0]
 8004252:	f041 0004 	orr.w	r0, r1, #4
 8004256:	6018      	str	r0, [r3, #0]
	SET_BIT( REG_STK_CTRL, 1 );	// 인터럽트 활성화		
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	f042 0102 	orr.w	r1, r2, #2
 800425e:	6019      	str	r1, [r3, #0]
	SET_BIT( REG_STK_CTRL, 0 );	// Counter Enable
 8004260:	6818      	ldr	r0, [r3, #0]
 8004262:	f040 0201 	orr.w	r2, r0, #1
 8004266:	601a      	str	r2, [r3, #0]
	
	
	Hw_Timer_SetupISR();
	Hw_Timer_Setup();	

	Excute = 1;
 8004268:	2301      	movs	r3, #1
 800426a:	702b      	strb	r3, [r5, #0]
 800426c:	bd38      	pop	{r3, r4, r5, pc}
 800426e:	bf00      	nop
 8004270:	20000205 	.word	0x20000205
 8004274:	20000208 	.word	0x20000208
 8004278:	080041b1 	.word	0x080041b1

0800427c <Hw_Timer_Tick>:
void Hw_Timer_Tick(void)
{
	u8 i;

	
	Hw_Timer_Counter++;
 800427c:	4b66      	ldr	r3, [pc, #408]	; (8004418 <Hw_Timer_Tick+0x19c>)


	if( Tmr_Ctn ) Tmr_Ctn--;
 800427e:	4a67      	ldr	r2, [pc, #412]	; (800441c <Hw_Timer_Tick+0x1a0>)
void Hw_Timer_Tick(void)
{
	u8 i;

	
	Hw_Timer_Counter++;
 8004280:	6819      	ldr	r1, [r3, #0]
			타이머인터럽트 발생시에 실행되는 함수(1ms 혹은 10ms 단위로 실행)
     ARG	: void
     RET	: void
---------------------------------------------------------------------------*/
void Hw_Timer_Tick(void)
{
 8004282:	b510      	push	{r4, lr}
	u8 i;

	
	Hw_Timer_Counter++;
 8004284:	1c48      	adds	r0, r1, #1
 8004286:	6018      	str	r0, [r3, #0]


	if( Tmr_Ctn ) Tmr_Ctn--;
 8004288:	8814      	ldrh	r4, [r2, #0]
 800428a:	b2a3      	uxth	r3, r4
 800428c:	b11b      	cbz	r3, 8004296 <Hw_Timer_Tick+0x1a>
 800428e:	8811      	ldrh	r1, [r2, #0]
 8004290:	1e48      	subs	r0, r1, #1
 8004292:	b284      	uxth	r4, r0
 8004294:	8014      	strh	r4, [r2, #0]
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8004296:	4c62      	ldr	r4, [pc, #392]	; (8004420 <Hw_Timer_Tick+0x1a4>)
 8004298:	7822      	ldrb	r2, [r4, #0]
 800429a:	2a01      	cmp	r2, #1
 800429c:	d01d      	beq.n	80042da <Hw_Timer_Tick+0x5e>
 800429e:	7c20      	ldrb	r0, [r4, #16]
 80042a0:	4a5f      	ldr	r2, [pc, #380]	; (8004420 <Hw_Timer_Tick+0x1a4>)
 80042a2:	2801      	cmp	r0, #1
 80042a4:	d02b      	beq.n	80042fe <Hw_Timer_Tick+0x82>
 80042a6:	f894 0020 	ldrb.w	r0, [r4, #32]
 80042aa:	4a5d      	ldr	r2, [pc, #372]	; (8004420 <Hw_Timer_Tick+0x1a4>)
 80042ac:	2801      	cmp	r0, #1
 80042ae:	d038      	beq.n	8004322 <Hw_Timer_Tick+0xa6>
 80042b0:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 80042b4:	4a5a      	ldr	r2, [pc, #360]	; (8004420 <Hw_Timer_Tick+0x1a4>)
 80042b6:	2801      	cmp	r0, #1
 80042b8:	d046      	beq.n	8004348 <Hw_Timer_Tick+0xcc>
 80042ba:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80042be:	4a58      	ldr	r2, [pc, #352]	; (8004420 <Hw_Timer_Tick+0x1a4>)
 80042c0:	2801      	cmp	r0, #1
 80042c2:	d054      	beq.n	800436e <Hw_Timer_Tick+0xf2>
 80042c4:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
 80042c8:	4a55      	ldr	r2, [pc, #340]	; (8004420 <Hw_Timer_Tick+0x1a4>)
 80042ca:	2801      	cmp	r0, #1
 80042cc:	d066      	beq.n	800439c <Hw_Timer_Tick+0x120>
 80042ce:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
 80042d2:	4a53      	ldr	r2, [pc, #332]	; (8004420 <Hw_Timer_Tick+0x1a4>)
 80042d4:	2801      	cmp	r0, #1
 80042d6:	d078      	beq.n	80043ca <Hw_Timer_Tick+0x14e>
 80042d8:	bd10      	pop	{r4, pc}
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 80042da:	8863      	ldrh	r3, [r4, #2]
 80042dc:	1e59      	subs	r1, r3, #1
 80042de:	b288      	uxth	r0, r1
 80042e0:	8060      	strh	r0, [r4, #2]

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 80042e2:	2800      	cmp	r0, #0
 80042e4:	d1db      	bne.n	800429e <Hw_Timer_Tick+0x22>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 80042e6:	7862      	ldrb	r2, [r4, #1]
 80042e8:	2a01      	cmp	r2, #1
 80042ea:	f000 8086 	beq.w	80043fa <Hw_Timer_Tick+0x17e>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 80042ee:	88a1      	ldrh	r1, [r4, #4]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 80042f0:	68a3      	ldr	r3, [r4, #8]
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 80042f2:	8061      	strh	r1, [r4, #2]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 80042f4:	4798      	blx	r3
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 80042f6:	7c20      	ldrb	r0, [r4, #16]
 80042f8:	4a49      	ldr	r2, [pc, #292]	; (8004420 <Hw_Timer_Tick+0x1a4>)
 80042fa:	2801      	cmp	r0, #1
 80042fc:	d1d3      	bne.n	80042a6 <Hw_Timer_Tick+0x2a>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 80042fe:	8a51      	ldrh	r1, [r2, #18]
 8004300:	1e4b      	subs	r3, r1, #1
 8004302:	b298      	uxth	r0, r3
 8004304:	8250      	strh	r0, [r2, #18]

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8004306:	2800      	cmp	r0, #0
 8004308:	d1cd      	bne.n	80042a6 <Hw_Timer_Tick+0x2a>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 800430a:	7c51      	ldrb	r1, [r2, #17]
 800430c:	2901      	cmp	r1, #1
 800430e:	d072      	beq.n	80043f6 <Hw_Timer_Tick+0x17a>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8004310:	8aa2      	ldrh	r2, [r4, #20]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8004312:	69a3      	ldr	r3, [r4, #24]
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8004314:	8262      	strh	r2, [r4, #18]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8004316:	4798      	blx	r3
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8004318:	f894 0020 	ldrb.w	r0, [r4, #32]
 800431c:	4a40      	ldr	r2, [pc, #256]	; (8004420 <Hw_Timer_Tick+0x1a4>)
 800431e:	2801      	cmp	r0, #1
 8004320:	d1c6      	bne.n	80042b0 <Hw_Timer_Tick+0x34>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8004322:	8c51      	ldrh	r1, [r2, #34]	; 0x22
 8004324:	1e4b      	subs	r3, r1, #1
 8004326:	b298      	uxth	r0, r3
 8004328:	8450      	strh	r0, [r2, #34]	; 0x22

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 800432a:	2800      	cmp	r0, #0
 800432c:	d1c0      	bne.n	80042b0 <Hw_Timer_Tick+0x34>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 800432e:	f892 1021 	ldrb.w	r1, [r2, #33]	; 0x21
 8004332:	2901      	cmp	r1, #1
 8004334:	d06c      	beq.n	8004410 <Hw_Timer_Tick+0x194>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8004336:	8ca2      	ldrh	r2, [r4, #36]	; 0x24

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8004338:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 800433a:	8462      	strh	r2, [r4, #34]	; 0x22

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 800433c:	4798      	blx	r3
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 800433e:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 8004342:	4a37      	ldr	r2, [pc, #220]	; (8004420 <Hw_Timer_Tick+0x1a4>)
 8004344:	2801      	cmp	r0, #1
 8004346:	d1b8      	bne.n	80042ba <Hw_Timer_Tick+0x3e>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8004348:	8e51      	ldrh	r1, [r2, #50]	; 0x32
 800434a:	1e4b      	subs	r3, r1, #1
 800434c:	b298      	uxth	r0, r3
 800434e:	8650      	strh	r0, [r2, #50]	; 0x32

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8004350:	2800      	cmp	r0, #0
 8004352:	d1b2      	bne.n	80042ba <Hw_Timer_Tick+0x3e>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8004354:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
 8004358:	2901      	cmp	r1, #1
 800435a:	d056      	beq.n	800440a <Hw_Timer_Tick+0x18e>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 800435c:	8ea2      	ldrh	r2, [r4, #52]	; 0x34

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 800435e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8004360:	8662      	strh	r2, [r4, #50]	; 0x32

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8004362:	4798      	blx	r3
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8004364:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8004368:	4a2d      	ldr	r2, [pc, #180]	; (8004420 <Hw_Timer_Tick+0x1a4>)
 800436a:	2801      	cmp	r0, #1
 800436c:	d1aa      	bne.n	80042c4 <Hw_Timer_Tick+0x48>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 800436e:	f8b2 1042 	ldrh.w	r1, [r2, #66]	; 0x42
 8004372:	1e4b      	subs	r3, r1, #1
 8004374:	b298      	uxth	r0, r3
 8004376:	f8a2 0042 	strh.w	r0, [r2, #66]	; 0x42

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 800437a:	2800      	cmp	r0, #0
 800437c:	d1a2      	bne.n	80042c4 <Hw_Timer_Tick+0x48>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 800437e:	f892 1041 	ldrb.w	r1, [r2, #65]	; 0x41
 8004382:	2901      	cmp	r1, #1
 8004384:	d03e      	beq.n	8004404 <Hw_Timer_Tick+0x188>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8004386:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 800438a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 800438c:	f8a4 2042 	strh.w	r2, [r4, #66]	; 0x42

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8004390:	4798      	blx	r3
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8004392:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
 8004396:	4a22      	ldr	r2, [pc, #136]	; (8004420 <Hw_Timer_Tick+0x1a4>)
 8004398:	2801      	cmp	r0, #1
 800439a:	d198      	bne.n	80042ce <Hw_Timer_Tick+0x52>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 800439c:	f8b2 1052 	ldrh.w	r1, [r2, #82]	; 0x52
 80043a0:	1e4b      	subs	r3, r1, #1
 80043a2:	b298      	uxth	r0, r3
 80043a4:	f8a2 0052 	strh.w	r0, [r2, #82]	; 0x52

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 80043a8:	2800      	cmp	r0, #0
 80043aa:	d190      	bne.n	80042ce <Hw_Timer_Tick+0x52>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 80043ac:	f892 1051 	ldrb.w	r1, [r2, #81]	; 0x51
 80043b0:	2901      	cmp	r1, #1
 80043b2:	d024      	beq.n	80043fe <Hw_Timer_Tick+0x182>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 80043b4:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 80043b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 80043ba:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 80043be:	4798      	blx	r3
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 80043c0:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
 80043c4:	4a16      	ldr	r2, [pc, #88]	; (8004420 <Hw_Timer_Tick+0x1a4>)
 80043c6:	2801      	cmp	r0, #1
 80043c8:	d186      	bne.n	80042d8 <Hw_Timer_Tick+0x5c>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 80043ca:	f8b2 1062 	ldrh.w	r1, [r2, #98]	; 0x62
 80043ce:	1e4b      	subs	r3, r1, #1
 80043d0:	b298      	uxth	r0, r3
 80043d2:	f8a2 0062 	strh.w	r0, [r2, #98]	; 0x62

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 80043d6:	2800      	cmp	r0, #0
 80043d8:	f47f af7e 	bne.w	80042d8 <Hw_Timer_Tick+0x5c>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 80043dc:	f892 1061 	ldrb.w	r1, [r2, #97]	; 0x61

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 80043e0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 80043e2:	2901      	cmp	r1, #1

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.
 80043e4:	bf08      	it	eq
 80043e6:	f882 0060 	strbeq.w	r0, [r2, #96]	; 0x60

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 80043ea:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 80043ee:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 80043f2:	4798      	blx	r3
 80043f4:	bd10      	pop	{r4, pc}

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.
 80043f6:	7410      	strb	r0, [r2, #16]
 80043f8:	e78a      	b.n	8004310 <Hw_Timer_Tick+0x94>
 80043fa:	7020      	strb	r0, [r4, #0]
 80043fc:	e777      	b.n	80042ee <Hw_Timer_Tick+0x72>
 80043fe:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
 8004402:	e7d7      	b.n	80043b4 <Hw_Timer_Tick+0x138>
 8004404:	f882 0040 	strb.w	r0, [r2, #64]	; 0x40
 8004408:	e7bd      	b.n	8004386 <Hw_Timer_Tick+0x10a>
 800440a:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
 800440e:	e7a5      	b.n	800435c <Hw_Timer_Tick+0xe0>
 8004410:	f882 0020 	strb.w	r0, [r2, #32]
 8004414:	e78f      	b.n	8004336 <Hw_Timer_Tick+0xba>
 8004416:	bf00      	nop
 8004418:	20000278 	.word	0x20000278
 800441c:	2000027c 	.word	0x2000027c
 8004420:	20000208 	.word	0x20000208

08004424 <Hw_Timer_ISR>:
void Hw_Timer_Setup( void );



void Hw_Timer_ISR(void)
{
 8004424:	b508      	push	{r3, lr}

	Hw_Timer_Tick();  
 8004426:	f244 237d 	movw	r3, #17021	; 0x427d
 800442a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800442e:	4798      	blx	r3
 8004430:	bd08      	pop	{r3, pc}
 8004432:	bf00      	nop

08004434 <Hw_Timer_Set>:
			void (*Fnct)(void),void *arg : 실행할 타이머 함수.
     RET
     	 	void
---------------------------------------------------------------------------*/
void Hw_Timer_Set(u8 TmrNum, u16 TmrData, u8 TmrMode, void (*Fnct)(void),void *arg)
{
 8004434:	b410      	push	{r4}
	Timer_Tbl[TmrNum].Timer_Mode = TmrMode;    // 모트설정
 8004436:	f240 2408 	movw	r4, #520	; 0x208
 800443a:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800443e:	eb04 1000 	add.w	r0, r4, r0, lsl #4
	Timer_Tbl[TmrNum].TmrFnct    = Fnct;       // 실행할 함수
 8004442:	6083      	str	r3, [r0, #8]
	Timer_Tbl[TmrNum].TmrFnctArg = arg;        // 매개변수
 8004444:	9b01      	ldr	r3, [sp, #4]
     RET
     	 	void
---------------------------------------------------------------------------*/
void Hw_Timer_Set(u8 TmrNum, u16 TmrData, u8 TmrMode, void (*Fnct)(void),void *arg)
{
	Timer_Tbl[TmrNum].Timer_Mode = TmrMode;    // 모트설정
 8004446:	7042      	strb	r2, [r0, #1]
	Timer_Tbl[TmrNum].TmrFnct    = Fnct;       // 실행할 함수
	Timer_Tbl[TmrNum].TmrFnctArg = arg;        // 매개변수
 8004448:	60c3      	str	r3, [r0, #12]
	Timer_Tbl[TmrNum].Timer_Ctn  = TmrData;
 800444a:	8041      	strh	r1, [r0, #2]
	Timer_Tbl[TmrNum].Timer_Init = TmrData;
 800444c:	8081      	strh	r1, [r0, #4]
}
 800444e:	bc10      	pop	{r4}
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop

08004454 <Hw_Timer_Start>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Timer_Start(u8 TmrNum)
{
	if(TmrNum < TIMER_MAX)
 8004454:	2806      	cmp	r0, #6
 8004456:	d803      	bhi.n	8004460 <Hw_Timer_Start+0xc>
		Timer_Tbl[TmrNum].Timer_En = ON;
 8004458:	4b02      	ldr	r3, [pc, #8]	; (8004464 <Hw_Timer_Start+0x10>)
 800445a:	0100      	lsls	r0, r0, #4
 800445c:	2201      	movs	r2, #1
 800445e:	541a      	strb	r2, [r3, r0]
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	20000208 	.word	0x20000208

08004468 <Hw_VCom_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VCom_Init( void )
{
 8004468:	b508      	push	{r3, lr}
	Set_System();
 800446a:	f644 6379 	movw	r3, #20089	; 0x4e79
 800446e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8004472:	4798      	blx	r3
	Set_USBClock();
 8004474:	f644 6099 	movw	r0, #20121	; 0x4e99
 8004478:	f6c0 0000 	movt	r0, #2048	; 0x800
 800447c:	4780      	blx	r0
	USB_Interrupts_Config();
 800447e:	f644 61dd 	movw	r1, #20189	; 0x4edd
 8004482:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004486:	4788      	blx	r1
	USB_Init();	
 8004488:	f645 22fd 	movw	r2, #23293	; 0x5afd
 800448c:	f6c0 0200 	movt	r2, #2048	; 0x800
 8004490:	4790      	blx	r2
 8004492:	bd08      	pop	{r3, pc}

08004494 <Hw_VCom_Getch>:
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_VCom_Getch( void )
{
 8004494:	b510      	push	{r4, lr}
	u8 Uart_GetData = 0;
 8004496:	2300      	movs	r3, #0
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_VCom_Getch( void )
{
 8004498:	b082      	sub	sp, #8
 800449a:	4c08      	ldr	r4, [pc, #32]	; (80044bc <Hw_VCom_Getch+0x28>)
	u8 Uart_GetData = 0;
 800449c:	f88d 3007 	strb.w	r3, [sp, #7]

	while( 1 )
	{
		// 버퍼에 데이터 들어올때까지 기다린다.
		if( HW_UART_Q_VAILD(5) > 0 ) break;
 80044a0:	2005      	movs	r0, #5
 80044a2:	47a0      	blx	r4
 80044a4:	2800      	cmp	r0, #0
 80044a6:	ddfb      	ble.n	80044a0 <Hw_VCom_Getch+0xc>
	}

	Hw_Uart_Q_Pop( 5, &Uart_GetData );
 80044a8:	2005      	movs	r0, #5
 80044aa:	f10d 0107 	add.w	r1, sp, #7
 80044ae:	4a04      	ldr	r2, [pc, #16]	; (80044c0 <Hw_VCom_Getch+0x2c>)
 80044b0:	4790      	blx	r2

	return Uart_GetData;
}
 80044b2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80044b6:	b002      	add	sp, #8
 80044b8:	bd10      	pop	{r4, pc}
 80044ba:	bf00      	nop
 80044bc:	0800405d 	.word	0x0800405d
 80044c0:	08004105 	.word	0x08004105

080044c4 <Hw_VCom_Putch>:
			: 시리얼 포트로 문자 1바이트 전송
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_VCom_Putch( char Uart_PutData )
{
 80044c4:	b508      	push	{r3, lr}
	USB_Send_Data( Uart_PutData );
 80044c6:	f245 03bd 	movw	r3, #20669	; 0x50bd
 80044ca:	f6c0 0300 	movt	r3, #2048	; 0x800
 80044ce:	4798      	blx	r3
 80044d0:	bd08      	pop	{r3, pc}
 80044d2:	bf00      	nop

080044d4 <EP1_IN_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP1_IN_Callback (void)
{
 80044d4:	b538      	push	{r3, r4, r5, lr}
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if (USB_Tx_State == 1)
 80044d6:	4b15      	ldr	r3, [pc, #84]	; (800452c <EP1_IN_Callback+0x58>)
 80044d8:	781a      	ldrb	r2, [r3, #0]
 80044da:	2a01      	cmp	r2, #1
 80044dc:	d000      	beq.n	80044e0 <EP1_IN_Callback+0xc>
 80044de:	bd38      	pop	{r3, r4, r5, pc}
  {
    if (USART_Rx_length == 0) 
 80044e0:	4c13      	ldr	r4, [pc, #76]	; (8004530 <EP1_IN_Callback+0x5c>)
 80044e2:	6820      	ldr	r0, [r4, #0]
 80044e4:	b300      	cbz	r0, 8004528 <EP1_IN_Callback+0x54>
    {
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
 80044e6:	2840      	cmp	r0, #64	; 0x40
        USB_Tx_ptr = USART_Rx_ptr_out;
 80044e8:	4a12      	ldr	r2, [pc, #72]	; (8004534 <EP1_IN_Callback+0x60>)
    {
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
 80044ea:	d814      	bhi.n	8004516 <EP1_IN_Callback+0x42>
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 80044ec:	6811      	ldr	r1, [r2, #0]
        USB_Tx_length = USART_Rx_length;
 80044ee:	b285      	uxth	r5, r0
        
        USART_Rx_ptr_out += USART_Rx_length;
 80044f0:	1808      	adds	r0, r1, r0
 80044f2:	6010      	str	r0, [r2, #0]
        USART_Rx_length = 0;
 80044f4:	2200      	movs	r2, #0
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 80044f6:	b28b      	uxth	r3, r1
        USB_Tx_length = USART_Rx_length;
        
        USART_Rx_ptr_out += USART_Rx_length;
        USART_Rx_length = 0;
 80044f8:	6022      	str	r2, [r4, #0]
      }
      UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 80044fa:	480f      	ldr	r0, [pc, #60]	; (8004538 <EP1_IN_Callback+0x64>)
 80044fc:	21c0      	movs	r1, #192	; 0xc0
 80044fe:	18c0      	adds	r0, r0, r3
 8004500:	462a      	mov	r2, r5
 8004502:	4b0e      	ldr	r3, [pc, #56]	; (800453c <EP1_IN_Callback+0x68>)
 8004504:	4798      	blx	r3
      SetEPTxCount(ENDP1, USB_Tx_length);
 8004506:	2001      	movs	r0, #1
 8004508:	4629      	mov	r1, r5
 800450a:	4a0d      	ldr	r2, [pc, #52]	; (8004540 <EP1_IN_Callback+0x6c>)
 800450c:	4790      	blx	r2
      SetEPTxValid(ENDP1); 
 800450e:	2001      	movs	r0, #1
 8004510:	490c      	ldr	r1, [pc, #48]	; (8004544 <EP1_IN_Callback+0x70>)
 8004512:	4788      	blx	r1
 8004514:	bd38      	pop	{r3, r4, r5, pc}
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
 8004516:	6815      	ldr	r5, [r2, #0]
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
 8004518:	3840      	subs	r0, #64	; 0x40
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
 800451a:	f105 0140 	add.w	r1, r5, #64	; 0x40
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
 800451e:	b2ab      	uxth	r3, r5
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
 8004520:	6020      	str	r0, [r4, #0]
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
 8004522:	6011      	str	r1, [r2, #0]
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 8004524:	2540      	movs	r5, #64	; 0x40
 8004526:	e7e8      	b.n	80044fa <EP1_IN_Callback+0x26>
  
  if (USB_Tx_State == 1)
  {
    if (USART_Rx_length == 0) 
    {
      USB_Tx_State = 0;
 8004528:	7018      	strb	r0, [r3, #0]
 800452a:	bd38      	pop	{r3, r4, r5, pc}
 800452c:	200002a0 	.word	0x200002a0
 8004530:	200002ac 	.word	0x200002ac
 8004534:	200002a8 	.word	0x200002a8
 8004538:	200007f8 	.word	0x200007f8
 800453c:	08005b41 	.word	0x08005b41
 8004540:	08005df1 	.word	0x08005df1
 8004544:	08005cb5 	.word	0x08005cb5

08004548 <EP3_OUT_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP3_OUT_Callback(void)
{
 8004548:	b538      	push	{r3, r4, r5, lr}
  uint16_t USB_Rx_Cnt;
  char *BootCodeStr = "CM9X";
  uint16_t i;

  /* Get the received data buffer and update the counter */
  USB_Rx_Cnt = USB_SIL_Read(EP3_OUT, USB_Rx_Buffer);
 800454a:	4c13      	ldr	r4, [pc, #76]	; (8004598 <EP3_OUT_Callback+0x50>)
 800454c:	2003      	movs	r0, #3
 800454e:	4621      	mov	r1, r4
 8004550:	4b12      	ldr	r3, [pc, #72]	; (800459c <EP3_OUT_Callback+0x54>)
 8004552:	4798      	blx	r3
 8004554:	4605      	mov	r5, r0
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the USART Xfer */

  if( reset_state == DTR_NEGEDGE ) 
 8004556:	4812      	ldr	r0, [pc, #72]	; (80045a0 <EP3_OUT_Callback+0x58>)
 8004558:	7802      	ldrb	r2, [r0, #0]
 800455a:	2a02      	cmp	r2, #2
 800455c:	d007      	beq.n	800456e <EP3_OUT_Callback+0x26>
        Hw_IWDG_GoToBoot();
      }
    }
  }

  USB_To_USART_Send_Data(USB_Rx_Buffer, USB_Rx_Cnt);
 800455e:	480e      	ldr	r0, [pc, #56]	; (8004598 <EP3_OUT_Callback+0x50>)
 8004560:	b2e9      	uxtb	r1, r5
 8004562:	4a10      	ldr	r2, [pc, #64]	; (80045a4 <EP3_OUT_Callback+0x5c>)
 8004564:	4790      	blx	r2
 
  /* Enable the receive of data on EP3 */
  SetEPRxValid(ENDP3);
 8004566:	2003      	movs	r0, #3
 8004568:	4b0f      	ldr	r3, [pc, #60]	; (80045a8 <EP3_OUT_Callback+0x60>)
 800456a:	4798      	blx	r3
 800456c:	bd38      	pop	{r3, r4, r5, pc}
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the USART Xfer */

  if( reset_state == DTR_NEGEDGE ) 
  {
    reset_state = DTR_LOW;
 800456e:	2103      	movs	r1, #3

    if( USB_Rx_Cnt >= 4 )
 8004570:	b2ab      	uxth	r3, r5
 8004572:	428b      	cmp	r3, r1
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the USART Xfer */

  if( reset_state == DTR_NEGEDGE ) 
  {
    reset_state = DTR_LOW;
 8004574:	7001      	strb	r1, [r0, #0]

    if( USB_Rx_Cnt >= 4 )
 8004576:	d9f2      	bls.n	800455e <EP3_OUT_Callback+0x16>
    {
      for( i=0; i<4; i++ )
      {
        if( BootCodeStr[i] != USB_Rx_Buffer[i] ) break;
 8004578:	7820      	ldrb	r0, [r4, #0]
 800457a:	2843      	cmp	r0, #67	; 0x43
 800457c:	d1ef      	bne.n	800455e <EP3_OUT_Callback+0x16>
 800457e:	7862      	ldrb	r2, [r4, #1]
 8004580:	2a4d      	cmp	r2, #77	; 0x4d
 8004582:	d1ec      	bne.n	800455e <EP3_OUT_Callback+0x16>
 8004584:	78a3      	ldrb	r3, [r4, #2]
 8004586:	2b39      	cmp	r3, #57	; 0x39
 8004588:	d1e9      	bne.n	800455e <EP3_OUT_Callback+0x16>
 800458a:	78e1      	ldrb	r1, [r4, #3]
 800458c:	2958      	cmp	r1, #88	; 0x58
 800458e:	d1e6      	bne.n	800455e <EP3_OUT_Callback+0x16>
      }

      if( i == 4 )
      {
        Hw_IWDG_GoToBoot();
 8004590:	4806      	ldr	r0, [pc, #24]	; (80045ac <EP3_OUT_Callback+0x64>)
 8004592:	4780      	blx	r0
 8004594:	e7e3      	b.n	800455e <EP3_OUT_Callback+0x16>
 8004596:	bf00      	nop
 8004598:	20000790 	.word	0x20000790
 800459c:	08005eb1 	.word	0x08005eb1
 80045a0:	20000290 	.word	0x20000290
 80045a4:	08004fa9 	.word	0x08004fa9
 80045a8:	08005cd9 	.word	0x08005cd9
 80045ac:	08003fad 	.word	0x08003fad

080045b0 <SOF_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SOF_Callback(void)
{
 80045b0:	b508      	push	{r3, lr}
  static uint32_t FrameCount = 0;
  
  if(bDeviceState == CONFIGURED)
 80045b2:	4b08      	ldr	r3, [pc, #32]	; (80045d4 <SOF_Callback+0x24>)
 80045b4:	6818      	ldr	r0, [r3, #0]
 80045b6:	2805      	cmp	r0, #5
 80045b8:	d000      	beq.n	80045bc <SOF_Callback+0xc>
 80045ba:	bd08      	pop	{r3, pc}
  {
    if (FrameCount++ == VCOMPORT_IN_FRAME_INTERVAL)
 80045bc:	4b06      	ldr	r3, [pc, #24]	; (80045d8 <SOF_Callback+0x28>)
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	1c51      	adds	r1, r2, #1
 80045c2:	2a05      	cmp	r2, #5
 80045c4:	6019      	str	r1, [r3, #0]
 80045c6:	d1f8      	bne.n	80045ba <SOF_Callback+0xa>
    {
      /* Reset the frame counter */
      FrameCount = 0;
 80045c8:	2000      	movs	r0, #0
 80045ca:	6018      	str	r0, [r3, #0]
      
      /* Check the data to be sent through IN pipe */
      Handle_USBAsynchXfer();
 80045cc:	4b03      	ldr	r3, [pc, #12]	; (80045dc <SOF_Callback+0x2c>)
 80045ce:	4798      	blx	r3
 80045d0:	e7f3      	b.n	80045ba <SOF_Callback+0xa>
 80045d2:	bf00      	nop
 80045d4:	20000294 	.word	0x20000294
 80045d8:	20000280 	.word	0x20000280
 80045dc:	08005019 	.word	0x08005019

080045e0 <USB_Istr>:
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 80045e0:	f645 4244 	movw	r2, #23620	; 0x5c44
 80045e4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80045e8:	6813      	ldr	r3, [r2, #0]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 80045ea:	b530      	push	{r4, r5, lr}
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 80045ec:	4c8f      	ldr	r4, [pc, #572]	; (800482c <USB_Istr+0x24c>)
 80045ee:	b298      	uxth	r0, r3

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 80045f0:	4d8f      	ldr	r5, [pc, #572]	; (8004830 <USB_Istr+0x250>)
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 80045f2:	8020      	strh	r0, [r4, #0]

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 80045f4:	8821      	ldrh	r1, [r4, #0]
 80045f6:	882b      	ldrh	r3, [r5, #0]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 80045f8:	b089      	sub	sp, #36	; 0x24
  wIstr = _GetISTR();

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 80045fa:	4019      	ands	r1, r3
 80045fc:	f401 7000 	and.w	r0, r1, #512	; 0x200
 8004600:	b281      	uxth	r1, r0
 8004602:	2900      	cmp	r1, #0
 8004604:	d168      	bne.n	80046d8 <USB_Istr+0xf8>
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
  
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 8004606:	8822      	ldrh	r2, [r4, #0]
 8004608:	f402 4100 	and.w	r1, r2, #32768	; 0x8000
 800460c:	420b      	tst	r3, r1
 800460e:	d15f      	bne.n	80046d0 <USB_Istr+0xf0>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 8004610:	8822      	ldrh	r2, [r4, #0]
 8004612:	f402 6180 	and.w	r1, r2, #1024	; 0x400
 8004616:	420b      	tst	r3, r1
 8004618:	d14e      	bne.n	80046b8 <USB_Istr+0xd8>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_ERR)
  if (wIstr & ISTR_ERR & wInterrupt_Mask)
 800461a:	8820      	ldrh	r0, [r4, #0]
 800461c:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
 8004620:	4213      	tst	r3, r2
 8004622:	d006      	beq.n	8004632 <USB_Istr+0x52>
  {
    _SetISTR((uint16_t)CLR_ERR);
 8004624:	f645 4044 	movw	r0, #23620	; 0x5c44
 8004628:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800462c:	f64d 71ff 	movw	r1, #57343	; 0xdfff
 8004630:	6001      	str	r1, [r0, #0]
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
 8004632:	8822      	ldrh	r2, [r4, #0]
 8004634:	f402 5080 	and.w	r0, r2, #4096	; 0x1000
 8004638:	4203      	tst	r3, r0
 800463a:	d131      	bne.n	80046a0 <USB_Istr+0xc0>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_SUSP)
  if (wIstr & ISTR_SUSP & wInterrupt_Mask)
 800463c:	8820      	ldrh	r0, [r4, #0]
 800463e:	f400 6100 	and.w	r1, r0, #2048	; 0x800
 8004642:	420b      	tst	r3, r1
 8004644:	d00e      	beq.n	8004664 <USB_Istr+0x84>
  {
	//printf(" in susp ");
    /* check if SUSPEND is possible */
    if(fSuspendEnabled)
 8004646:	4b7b      	ldr	r3, [pc, #492]	; (8004834 <USB_Istr+0x254>)
 8004648:	781a      	ldrb	r2, [r3, #0]
 800464a:	2a00      	cmp	r2, #0
 800464c:	d125      	bne.n	800469a <USB_Istr+0xba>
    }
    else
    {
      //printf("l\n");    	
      /* if not possible then resume after xx ms */
      Resume(RESUME_LATER);
 800464e:	2002      	movs	r0, #2
 8004650:	4979      	ldr	r1, [pc, #484]	; (8004838 <USB_Istr+0x258>)
 8004652:	4788      	blx	r1
    }
    
    //printf(" out susp ");
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    _SetISTR((uint16_t)CLR_SUSP);
 8004654:	f645 4244 	movw	r2, #23620	; 0x5c44
 8004658:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800465c:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 8004660:	882b      	ldrh	r3, [r5, #0]
 8004662:	6011      	str	r1, [r2, #0]
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
 8004664:	8820      	ldrh	r0, [r4, #0]
 8004666:	f400 7280 	and.w	r2, r0, #256	; 0x100
 800466a:	4213      	tst	r3, r2
 800466c:	d013      	beq.n	8004696 <USB_Istr+0xb6>
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 800466e:	f645 4344 	movw	r3, #23620	; 0x5c44
 8004672:	f2c4 0300 	movt	r3, #16384	; 0x4000
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 8004676:	f645 4048 	movw	r0, #23624	; 0x5c48

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 800467a:	f64f 61ff 	movw	r1, #65279	; 0xfeff
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 800467e:	f2c4 0000 	movt	r0, #16384	; 0x4000

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 8004682:	6019      	str	r1, [r3, #0]
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 8004684:	6802      	ldr	r2, [r0, #0]
 8004686:	0410      	lsls	r0, r2, #16
 8004688:	d432      	bmi.n	80046f0 <USB_Istr+0x110>
        esof_counter = 0;
      }
    }
    else
    {
        esof_counter = 0;
 800468a:	4b6c      	ldr	r3, [pc, #432]	; (800483c <USB_Istr+0x25c>)
 800468c:	2000      	movs	r0, #0
 800468e:	6018      	str	r0, [r3, #0]
    }
    
    /* resume handling timing is made with ESOFs */
    Resume(RESUME_ESOF); /* request without change of the machine state */
 8004690:	2007      	movs	r0, #7
 8004692:	4b69      	ldr	r3, [pc, #420]	; (8004838 <USB_Istr+0x258>)
 8004694:	4798      	blx	r3
#ifdef ESOF_CALLBACK
    ESOF_Callback();
#endif
  }
#endif
} /* USB_Istr */
 8004696:	b009      	add	sp, #36	; 0x24
 8004698:	bd30      	pop	{r4, r5, pc}
	//printf(" in susp ");
    /* check if SUSPEND is possible */
    if(fSuspendEnabled)
    {
      //printf("k\n");
      Suspend();
 800469a:	4869      	ldr	r0, [pc, #420]	; (8004840 <USB_Istr+0x260>)
 800469c:	4780      	blx	r0
 800469e:	e7d9      	b.n	8004654 <USB_Istr+0x74>
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
  {
    _SetISTR((uint16_t)CLR_WKUP);
 80046a0:	f645 4344 	movw	r3, #23620	; 0x5c44
 80046a4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80046a8:	f64e 71ff 	movw	r1, #61439	; 0xefff
 80046ac:	6019      	str	r1, [r3, #0]
    Resume(RESUME_EXTERNAL);
 80046ae:	2000      	movs	r0, #0
 80046b0:	4a61      	ldr	r2, [pc, #388]	; (8004838 <USB_Istr+0x258>)
 80046b2:	4790      	blx	r2
 80046b4:	882b      	ldrh	r3, [r5, #0]
 80046b6:	e7c1      	b.n	800463c <USB_Istr+0x5c>
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
  {
  	//printf(" ISTR_RESET ");
  	
    _SetISTR((uint16_t)CLR_RESET);
    Device_Property.Reset();
 80046b8:	4a62      	ldr	r2, [pc, #392]	; (8004844 <USB_Istr+0x264>)
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
  {
  	//printf(" ISTR_RESET ");
  	
    _SetISTR((uint16_t)CLR_RESET);
 80046ba:	f645 4344 	movw	r3, #23620	; 0x5c44
 80046be:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80046c2:	f64f 30ff 	movw	r0, #64511	; 0xfbff
 80046c6:	6018      	str	r0, [r3, #0]
    Device_Property.Reset();
 80046c8:	6851      	ldr	r1, [r2, #4]
 80046ca:	4788      	blx	r1
 80046cc:	882b      	ldrh	r3, [r5, #0]
 80046ce:	e7a4      	b.n	800461a <USB_Istr+0x3a>
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    CTR_LP();
 80046d0:	485d      	ldr	r0, [pc, #372]	; (8004848 <USB_Istr+0x268>)
 80046d2:	4780      	blx	r0
 80046d4:	882b      	ldrh	r3, [r5, #0]
 80046d6:	e79b      	b.n	8004610 <USB_Istr+0x30>
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
    bIntPackSOF++;
 80046d8:	4b5c      	ldr	r3, [pc, #368]	; (800484c <USB_Istr+0x26c>)
#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
 80046da:	f64f 50ff 	movw	r0, #65023	; 0xfdff
 80046de:	6010      	str	r0, [r2, #0]
    bIntPackSOF++;
 80046e0:	781a      	ldrb	r2, [r3, #0]
 80046e2:	1c51      	adds	r1, r2, #1
 80046e4:	b2c8      	uxtb	r0, r1
 80046e6:	7018      	strb	r0, [r3, #0]

#ifdef SOF_CALLBACK
    SOF_Callback();
 80046e8:	4b59      	ldr	r3, [pc, #356]	; (8004850 <USB_Istr+0x270>)
 80046ea:	4798      	blx	r3
 80046ec:	882b      	ldrh	r3, [r5, #0]
 80046ee:	e78a      	b.n	8004606 <USB_Istr+0x26>
    _SetISTR((uint16_t)CLR_ESOF);
    
    if ((_GetFNR()&FNR_RXDP)!=0)
    {
      /* increment ESOF counter */
      esof_counter ++;
 80046f0:	4852      	ldr	r0, [pc, #328]	; (800483c <USB_Istr+0x25c>)
 80046f2:	6801      	ldr	r1, [r0, #0]
 80046f4:	1c4a      	adds	r2, r1, #1
 80046f6:	6002      	str	r2, [r0, #0]
      
      /* test if we enter in ESOF more than 3 times with FSUSP =0 and RXDP =1=>> possible missing SUSP flag*/
      if ((esof_counter >3)&&((_GetCNTR()&CNTR_FSUSP)==0))
 80046f8:	6801      	ldr	r1, [r0, #0]
 80046fa:	2903      	cmp	r1, #3
 80046fc:	d9c8      	bls.n	8004690 <USB_Istr+0xb0>
 80046fe:	f645 4240 	movw	r2, #23616	; 0x5c40
 8004702:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004706:	6811      	ldr	r1, [r2, #0]
 8004708:	0709      	lsls	r1, r1, #28
 800470a:	d4c1      	bmi.n	8004690 <USB_Istr+0xb0>
      {           
        /* this a sequence to apply a force RESET*/
      
        /*Store CNTR value */
        wCNTR = _GetCNTR(); 
 800470c:	6815      	ldr	r5, [r2, #0]
 800470e:	4951      	ldr	r1, [pc, #324]	; (8004854 <USB_Istr+0x274>)
 8004710:	b2ad      	uxth	r5, r5
      
        /*Store endpoints registers status */
        for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8004712:	f44f 44b8 	mov.w	r4, #23552	; 0x5c00
      if ((esof_counter >3)&&((_GetCNTR()&CNTR_FSUSP)==0))
      {           
        /* this a sequence to apply a force RESET*/
      
        /*Store CNTR value */
        wCNTR = _GetCNTR(); 
 8004716:	600d      	str	r5, [r1, #0]
      
        /*Store endpoints registers status */
        for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8004718:	f2c4 0400 	movt	r4, #16384	; 0x4000
 800471c:	6825      	ldr	r5, [r4, #0]
 800471e:	f645 4404 	movw	r4, #23556	; 0x5c04
 8004722:	b2ad      	uxth	r5, r5
 8004724:	9500      	str	r5, [sp, #0]
 8004726:	f2c4 0400 	movt	r4, #16384	; 0x4000
 800472a:	6825      	ldr	r5, [r4, #0]
 800472c:	f645 4408 	movw	r4, #23560	; 0x5c08
 8004730:	b2ad      	uxth	r5, r5
 8004732:	9501      	str	r5, [sp, #4]
 8004734:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8004738:	6825      	ldr	r5, [r4, #0]
 800473a:	f645 440c 	movw	r4, #23564	; 0x5c0c
 800473e:	b2ad      	uxth	r5, r5
 8004740:	9502      	str	r5, [sp, #8]
 8004742:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8004746:	6825      	ldr	r5, [r4, #0]
 8004748:	f645 4410 	movw	r4, #23568	; 0x5c10
 800474c:	b2ad      	uxth	r5, r5
 800474e:	9503      	str	r5, [sp, #12]
 8004750:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8004754:	6825      	ldr	r5, [r4, #0]
 8004756:	f645 4414 	movw	r4, #23572	; 0x5c14
 800475a:	b2ad      	uxth	r5, r5
 800475c:	9504      	str	r5, [sp, #16]
 800475e:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8004762:	6825      	ldr	r5, [r4, #0]
 8004764:	f645 4418 	movw	r4, #23576	; 0x5c18
 8004768:	b2ad      	uxth	r5, r5
 800476a:	9505      	str	r5, [sp, #20]
 800476c:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8004770:	6825      	ldr	r5, [r4, #0]
 8004772:	f645 441c 	movw	r4, #23580	; 0x5c1c
 8004776:	b2ad      	uxth	r5, r5
 8004778:	9506      	str	r5, [sp, #24]
 800477a:	f2c4 0400 	movt	r4, #16384	; 0x4000
 800477e:	6824      	ldr	r4, [r4, #0]
 8004780:	b2a4      	uxth	r4, r4
 8004782:	9407      	str	r4, [sp, #28]
      
        /*apply FRES */
        wCNTR|=CNTR_FRES;
 8004784:	680c      	ldr	r4, [r1, #0]
 8004786:	f044 0401 	orr.w	r4, r4, #1
 800478a:	600c      	str	r4, [r1, #0]
        _SetCNTR(wCNTR);
 800478c:	680c      	ldr	r4, [r1, #0]
 800478e:	b2a4      	uxth	r4, r4
 8004790:	6014      	str	r4, [r2, #0]
 
        /*clear FRES*/
        wCNTR&=~CNTR_FRES;
 8004792:	680c      	ldr	r4, [r1, #0]
 8004794:	f024 0401 	bic.w	r4, r4, #1
 8004798:	600c      	str	r4, [r1, #0]
        _SetCNTR(wCNTR);
 800479a:	6809      	ldr	r1, [r1, #0]
 800479c:	b289      	uxth	r1, r1
 800479e:	6011      	str	r1, [r2, #0]
      
        /*poll for RESET flag in ISTR*/
        while((_GetISTR()&ISTR_RESET) == 0);
 80047a0:	6819      	ldr	r1, [r3, #0]
 80047a2:	f645 4244 	movw	r2, #23620	; 0x5c44
 80047a6:	0549      	lsls	r1, r1, #21
 80047a8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80047ac:	d5f8      	bpl.n	80047a0 <USB_Istr+0x1c0>
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
 80047ae:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 80047b2:	6013      	str	r3, [r2, #0]
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
        _SetENDPOINT(i, EP[i]);
 80047b4:	9900      	ldr	r1, [sp, #0]
 80047b6:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 80047ba:	b28a      	uxth	r2, r1
 80047bc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80047c0:	601a      	str	r2, [r3, #0]
 80047c2:	9901      	ldr	r1, [sp, #4]
 80047c4:	f645 4304 	movw	r3, #23556	; 0x5c04
 80047c8:	b28a      	uxth	r2, r1
 80047ca:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	9902      	ldr	r1, [sp, #8]
 80047d2:	f645 4308 	movw	r3, #23560	; 0x5c08
 80047d6:	b28a      	uxth	r2, r1
 80047d8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80047dc:	601a      	str	r2, [r3, #0]
 80047de:	9903      	ldr	r1, [sp, #12]
 80047e0:	f645 430c 	movw	r3, #23564	; 0x5c0c
 80047e4:	b28a      	uxth	r2, r1
 80047e6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	9904      	ldr	r1, [sp, #16]
 80047ee:	f645 4310 	movw	r3, #23568	; 0x5c10
 80047f2:	b28a      	uxth	r2, r1
 80047f4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80047f8:	601a      	str	r2, [r3, #0]
 80047fa:	9905      	ldr	r1, [sp, #20]
 80047fc:	f645 4314 	movw	r3, #23572	; 0x5c14
 8004800:	b28a      	uxth	r2, r1
 8004802:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	9906      	ldr	r1, [sp, #24]
 800480a:	f645 4318 	movw	r3, #23576	; 0x5c18
 800480e:	b28a      	uxth	r2, r1
 8004810:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004814:	601a      	str	r2, [r3, #0]
 8004816:	9907      	ldr	r1, [sp, #28]
 8004818:	f645 431c 	movw	r3, #23580	; 0x5c1c
 800481c:	b28a      	uxth	r2, r1
 800481e:	f2c4 0300 	movt	r3, #16384	; 0x4000
      
        esof_counter = 0;
 8004822:	2100      	movs	r1, #0
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
        _SetENDPOINT(i, EP[i]);
 8004824:	601a      	str	r2, [r3, #0]
      
        esof_counter = 0;
 8004826:	6001      	str	r1, [r0, #0]
 8004828:	e732      	b.n	8004690 <USB_Istr+0xb0>
 800482a:	bf00      	nop
 800482c:	200007d0 	.word	0x200007d0
 8004830:	2000102c 	.word	0x2000102c
 8004834:	20000298 	.word	0x20000298
 8004838:	08004d25 	.word	0x08004d25
 800483c:	2000028c 	.word	0x2000028c
 8004840:	08004b55 	.word	0x08004b55
 8004844:	2000005c 	.word	0x2000005c
 8004848:	08005ee9 	.word	0x08005ee9
 800484c:	20000288 	.word	0x20000288
 8004850:	080045b1 	.word	0x080045b1
 8004854:	20000284 	.word	0x20000284

08004858 <Virtual_Com_Port_SetConfiguration>:
*******************************************************************************/
void Virtual_Com_Port_SetConfiguration(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  if (pInfo->Current_Configuration != 0)
 8004858:	4b03      	ldr	r3, [pc, #12]	; (8004868 <Virtual_Com_Port_SetConfiguration+0x10>)
 800485a:	7a98      	ldrb	r0, [r3, #10]
 800485c:	b110      	cbz	r0, 8004864 <Virtual_Com_Port_SetConfiguration+0xc>
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 800485e:	4903      	ldr	r1, [pc, #12]	; (800486c <Virtual_Com_Port_SetConfiguration+0x14>)
 8004860:	2205      	movs	r2, #5
 8004862:	600a      	str	r2, [r1, #0]
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	20001008 	.word	0x20001008
 800486c:	20000294 	.word	0x20000294

08004870 <Virtual_Com_Port_SetDeviceAddress>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_SetDeviceAddress (void)
{
  bDeviceState = ADDRESSED;
 8004870:	f240 2394 	movw	r3, #660	; 0x294
 8004874:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004878:	2204      	movs	r2, #4
 800487a:	601a      	str	r2, [r3, #0]
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop

08004880 <Virtual_Com_Port_Status_In>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_In(void)
{
  if (Request == SET_LINE_CODING)
 8004880:	4b03      	ldr	r3, [pc, #12]	; (8004890 <Virtual_Com_Port_Status_In+0x10>)
 8004882:	781a      	ldrb	r2, [r3, #0]
 8004884:	2a20      	cmp	r2, #32
 8004886:	d101      	bne.n	800488c <Virtual_Com_Port_Status_In+0xc>
  {
    //USART_Config();
    Request = 0;
 8004888:	2000      	movs	r0, #0
 800488a:	7018      	strb	r0, [r3, #0]
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	20000291 	.word	0x20000291

08004894 <Virtual_Com_Port_Status_Out>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_Out(void)
{}
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop

08004898 <Virtual_Com_Port_Data_Setup>:
{
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 8004898:	2821      	cmp	r0, #33	; 0x21
* Input          : Request Nb.
* Output         : None.
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_Data_Setup(uint8_t RequestNo)
{
 800489a:	b510      	push	{r4, lr}
 800489c:	4603      	mov	r3, r0
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 800489e:	d003      	beq.n	80048a8 <Virtual_Com_Port_Data_Setup+0x10>
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
 80048a0:	2820      	cmp	r0, #32
 80048a2:	d011      	beq.n	80048c8 <Virtual_Com_Port_Data_Setup+0x30>
    Request = SET_LINE_CODING;
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 80048a4:	2002      	movs	r0, #2
 80048a6:	bd10      	pop	{r4, pc}

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 80048a8:	4a0f      	ldr	r2, [pc, #60]	; (80048e8 <Virtual_Com_Port_Data_Setup+0x50>)
 80048aa:	6813      	ldr	r3, [r2, #0]
 80048ac:	7818      	ldrb	r0, [r3, #0]
 80048ae:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 80048b2:	2921      	cmp	r1, #33	; 0x21
 80048b4:	d1f6      	bne.n	80048a4 <Virtual_Com_Port_Data_Setup+0xc>
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
 80048b6:	490d      	ldr	r1, [pc, #52]	; (80048ec <Virtual_Com_Port_Data_Setup+0x54>)
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 80048b8:	6812      	ldr	r2, [r2, #0]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 80048ba:	2400      	movs	r4, #0
  (*CopyRoutine)(0);
 80048bc:	4620      	mov	r0, r4
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 80048be:	6191      	str	r1, [r2, #24]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 80048c0:	8254      	strh	r4, [r2, #18]
  (*CopyRoutine)(0);
 80048c2:	4788      	blx	r1
  return USB_SUCCESS;
 80048c4:	4620      	mov	r0, r4
 80048c6:	bd10      	pop	{r4, pc}
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 80048c8:	4a07      	ldr	r2, [pc, #28]	; (80048e8 <Virtual_Com_Port_Data_Setup+0x50>)
 80048ca:	6811      	ldr	r1, [r2, #0]
 80048cc:	7808      	ldrb	r0, [r1, #0]
 80048ce:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 80048d2:	2921      	cmp	r1, #33	; 0x21
 80048d4:	d003      	beq.n	80048de <Virtual_Com_Port_Data_Setup+0x46>
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 80048d6:	4a06      	ldr	r2, [pc, #24]	; (80048f0 <Virtual_Com_Port_Data_Setup+0x58>)
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 80048d8:	2002      	movs	r0, #2
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 80048da:	7013      	strb	r3, [r2, #0]

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
  pInformation->Ctrl_Info.Usb_wOffset = 0;
  (*CopyRoutine)(0);
  return USB_SUCCESS;
}
 80048dc:	bd10      	pop	{r4, pc}
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 80048de:	4c04      	ldr	r4, [pc, #16]	; (80048f0 <Virtual_Com_Port_Data_Setup+0x58>)
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
 80048e0:	4904      	ldr	r1, [pc, #16]	; (80048f4 <Virtual_Com_Port_Data_Setup+0x5c>)
    }
    Request = SET_LINE_CODING;
 80048e2:	7023      	strb	r3, [r4, #0]
 80048e4:	e7e8      	b.n	80048b8 <Virtual_Com_Port_Data_Setup+0x20>
 80048e6:	bf00      	nop
 80048e8:	20001028 	.word	0x20001028
 80048ec:	08004945 	.word	0x08004945
 80048f0:	20000291 	.word	0x20000291
 80048f4:	0800495d 	.word	0x0800495d

080048f8 <Virtual_Com_Port_NoData_Setup>:
*******************************************************************************/
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{
  uint8_t new_signal;
  
  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 80048f8:	4b0c      	ldr	r3, [pc, #48]	; (800492c <Virtual_Com_Port_NoData_Setup+0x34>)
 80048fa:	6819      	ldr	r1, [r3, #0]
 80048fc:	780a      	ldrb	r2, [r1, #0]
 80048fe:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 8004902:	2b21      	cmp	r3, #33	; 0x21
 8004904:	d001      	beq.n	800490a <Virtual_Com_Port_NoData_Setup+0x12>

      return USB_SUCCESS;
    }
  }

  return USB_UNSUPPORT;
 8004906:	2002      	movs	r0, #2
 8004908:	4770      	bx	lr
{
  uint8_t new_signal;
  
  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
  {
    if (RequestNo == SET_COMM_FEATURE)
 800490a:	2802      	cmp	r0, #2
 800490c:	d008      	beq.n	8004920 <Virtual_Com_Port_NoData_Setup+0x28>
    {
      return USB_SUCCESS;
    }
    else if (RequestNo == SET_CONTROL_LINE_STATE)
 800490e:	2822      	cmp	r0, #34	; 0x22
 8004910:	d1f9      	bne.n	8004906 <Virtual_Com_Port_NoData_Setup+0xe>
    {

            new_signal = pInformation->USBwValues.bw.bb0 & (CONTROL_LINE_DTR | CONTROL_LINE_RTS);
 8004912:	78c8      	ldrb	r0, [r1, #3]
            if(new_signal == DTR_NEGEDGE)
 8004914:	f000 0103 	and.w	r1, r0, #3
            {
                reset_state = DTR_NEGEDGE;
            }


      return USB_SUCCESS;
 8004918:	2000      	movs	r0, #0
    }
    else if (RequestNo == SET_CONTROL_LINE_STATE)
    {

            new_signal = pInformation->USBwValues.bw.bb0 & (CONTROL_LINE_DTR | CONTROL_LINE_RTS);
            if(new_signal == DTR_NEGEDGE)
 800491a:	2902      	cmp	r1, #2
 800491c:	d002      	beq.n	8004924 <Virtual_Com_Port_NoData_Setup+0x2c>
      return USB_SUCCESS;
    }
  }

  return USB_UNSUPPORT;
}
 800491e:	4770      	bx	lr
  
  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
  {
    if (RequestNo == SET_COMM_FEATURE)
    {
      return USB_SUCCESS;
 8004920:	2000      	movs	r0, #0
 8004922:	4770      	bx	lr
    {

            new_signal = pInformation->USBwValues.bw.bb0 & (CONTROL_LINE_DTR | CONTROL_LINE_RTS);
            if(new_signal == DTR_NEGEDGE)
            {
                reset_state = DTR_NEGEDGE;
 8004924:	4a02      	ldr	r2, [pc, #8]	; (8004930 <Virtual_Com_Port_NoData_Setup+0x38>)
 8004926:	7011      	strb	r1, [r2, #0]
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	20001028 	.word	0x20001028
 8004930:	20000290 	.word	0x20000290

08004934 <Virtual_Com_Port_Get_Interface_Setting>:
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
RESULT Virtual_Com_Port_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
  if (AlternateSetting > 0)
 8004934:	b109      	cbz	r1, 800493a <Virtual_Com_Port_Get_Interface_Setting+0x6>
  {
    return USB_UNSUPPORT;
 8004936:	2002      	movs	r0, #2
 8004938:	4770      	bx	lr
  }
  else if (Interface > 1)
 800493a:	2801      	cmp	r0, #1
 800493c:	d8fb      	bhi.n	8004936 <Virtual_Com_Port_Get_Interface_Setting+0x2>
  {
    return USB_UNSUPPORT;
  }
  return USB_SUCCESS;
 800493e:	4608      	mov	r0, r1
}
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop

08004944 <Virtual_Com_Port_GetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
 8004944:	b108      	cbz	r0, 800494a <Virtual_Com_Port_GetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 8004946:	4803      	ldr	r0, [pc, #12]	; (8004954 <Virtual_Com_Port_GetLineCoding+0x10>)
}
 8004948:	4770      	bx	lr
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 800494a:	4b03      	ldr	r3, [pc, #12]	; (8004958 <Virtual_Com_Port_GetLineCoding+0x14>)
 800494c:	2208      	movs	r2, #8
 800494e:	6819      	ldr	r1, [r3, #0]
 8004950:	820a      	strh	r2, [r1, #16]
    return NULL;
 8004952:	4770      	bx	lr
 8004954:	200000d8 	.word	0x200000d8
 8004958:	20001028 	.word	0x20001028

0800495c <Virtual_Com_Port_SetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
 800495c:	b108      	cbz	r0, 8004962 <Virtual_Com_Port_SetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 800495e:	4803      	ldr	r0, [pc, #12]	; (800496c <Virtual_Com_Port_SetLineCoding+0x10>)
}
 8004960:	4770      	bx	lr
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 8004962:	4b03      	ldr	r3, [pc, #12]	; (8004970 <Virtual_Com_Port_SetLineCoding+0x14>)
 8004964:	2208      	movs	r2, #8
 8004966:	6819      	ldr	r1, [r3, #0]
 8004968:	820a      	strh	r2, [r1, #16]
    return NULL;
 800496a:	4770      	bx	lr
 800496c:	200000d8 	.word	0x200000d8
 8004970:	20001028 	.word	0x20001028

08004974 <Virtual_Com_Port_GetStringDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
 8004974:	b508      	push	{r3, lr}
  uint8_t wValue0 = pInformation->USBwValue0;
 8004976:	4b06      	ldr	r3, [pc, #24]	; (8004990 <Virtual_Com_Port_GetStringDescriptor+0x1c>)
 8004978:	6819      	ldr	r1, [r3, #0]
 800497a:	78ca      	ldrb	r2, [r1, #3]
  if (wValue0 > 4)
 800497c:	2a04      	cmp	r2, #4
 800497e:	d805      	bhi.n	800498c <Virtual_Com_Port_GetStringDescriptor+0x18>
  {
    return NULL;
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
 8004980:	4b04      	ldr	r3, [pc, #16]	; (8004994 <Virtual_Com_Port_GetStringDescriptor+0x20>)
 8004982:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8004986:	4a04      	ldr	r2, [pc, #16]	; (8004998 <Virtual_Com_Port_GetStringDescriptor+0x24>)
 8004988:	4790      	blx	r2
 800498a:	bd08      	pop	{r3, pc}
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
  uint8_t wValue0 = pInformation->USBwValue0;
  if (wValue0 > 4)
  {
    return NULL;
 800498c:	2000      	movs	r0, #0
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
  }
}
 800498e:	bd08      	pop	{r3, pc}
 8004990:	20001028 	.word	0x20001028
 8004994:	200000b8 	.word	0x200000b8
 8004998:	08005509 	.word	0x08005509

0800499c <Virtual_Com_Port_GetConfigDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the configuration descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetConfigDescriptor(uint16_t Length)
{
 800499c:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Config_Descriptor);
 800499e:	f240 0154 	movw	r1, #84	; 0x54
 80049a2:	f245 5309 	movw	r3, #21769	; 0x5509
 80049a6:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80049aa:	f6c0 0300 	movt	r3, #2048	; 0x800
 80049ae:	4798      	blx	r3
}
 80049b0:	bd08      	pop	{r3, pc}
 80049b2:	bf00      	nop

080049b4 <Virtual_Com_Port_GetDeviceDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the device descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetDeviceDescriptor(uint16_t Length)
{
 80049b4:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Device_Descriptor);
 80049b6:	f240 01b0 	movw	r1, #176	; 0xb0
 80049ba:	f245 5309 	movw	r3, #21769	; 0x5509
 80049be:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80049c2:	f6c0 0300 	movt	r3, #2048	; 0x800
 80049c6:	4798      	blx	r3
}
 80049c8:	bd08      	pop	{r3, pc}
 80049ca:	bf00      	nop

080049cc <Virtual_Com_Port_Reset>:
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 80049cc:	f241 0228 	movw	r2, #4136	; 0x1028

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 80049d0:	f246 33f4 	movw	r3, #25588	; 0x63f4
 80049d4:	f6c0 0300 	movt	r3, #2048	; 0x800
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 80049d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80049dc:	6810      	ldr	r0, [r2, #0]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 80049de:	79d9      	ldrb	r1, [r3, #7]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
 80049e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 80049e4:	2400      	movs	r4, #0
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);
 80049e6:	f645 4509 	movw	r5, #23561	; 0x5c09
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 80049ea:	7241      	strb	r1, [r0, #9]
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 80049ec:	7284      	strb	r4, [r0, #10]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;
 80049ee:	72c4      	strb	r4, [r0, #11]

  SetBTABLE(BTABLE_ADDRESS);
 80049f0:	f6c0 0500 	movt	r5, #2048	; 0x800
 80049f4:	4620      	mov	r0, r4

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 80049f6:	f645 461d 	movw	r6, #23581	; 0x5c1d
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);
 80049fa:	47a8      	blx	r5

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 80049fc:	f6c0 0600 	movt	r6, #2048	; 0x800
 8004a00:	4620      	mov	r0, r4
 8004a02:	f44f 7100 	mov.w	r1, #512	; 0x200
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 8004a06:	f645 4535 	movw	r5, #23605	; 0x5c35
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 8004a0a:	47b0      	blx	r6
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 8004a0c:	f6c0 0500 	movt	r5, #2048	; 0x800
 8004a10:	2110      	movs	r1, #16
 8004a12:	4620      	mov	r0, r4
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8004a14:	f645 5a89 	movw	sl, #23945	; 0x5d89

  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 8004a18:	47a8      	blx	r5
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8004a1a:	f6c0 0a00 	movt	sl, #2048	; 0x800
 8004a1e:	2140      	movs	r1, #64	; 0x40
 8004a20:	4620      	mov	r0, r4
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8004a22:	f645 5865 	movw	r8, #23909	; 0x5d65
  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
  SetEPTxStatus(ENDP0, EP_TX_STALL);
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8004a26:	47d0      	blx	sl
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8004a28:	f6c0 0800 	movt	r8, #2048	; 0x800
 8004a2c:	2180      	movs	r1, #128	; 0x80
 8004a2e:	4620      	mov	r0, r4
  Clear_Status_Out(ENDP0);
 8004a30:	f645 47fd 	movw	r7, #23805	; 0x5cfd

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
  SetEPTxStatus(ENDP0, EP_TX_STALL);
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8004a34:	47c0      	blx	r8
  Clear_Status_Out(ENDP0);
 8004a36:	f6c0 0700 	movt	r7, #2048	; 0x800
 8004a3a:	4620      	mov	r0, r4
 8004a3c:	47b8      	blx	r7
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8004a3e:	f240 025c 	movw	r2, #92	; 0x5c
 8004a42:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004a46:	f645 6911 	movw	r9, #24081	; 0x5e11
 8004a4a:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 8004a4e:	f6c0 0900 	movt	r9, #2048	; 0x800
 8004a52:	4620      	mov	r0, r4
 8004a54:	47c8      	blx	r9
  SetEPRxValid(ENDP0);
 8004a56:	f645 43d9 	movw	r3, #23769	; 0x5cd9
 8004a5a:	f6c0 0300 	movt	r3, #2048	; 0x800
 8004a5e:	4620      	mov	r0, r4
 8004a60:	4798      	blx	r3

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_BULK);
 8004a62:	2001      	movs	r0, #1
 8004a64:	4621      	mov	r1, r4
 8004a66:	47b0      	blx	r6
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
 8004a68:	2001      	movs	r0, #1
 8004a6a:	21c0      	movs	r1, #192	; 0xc0
 8004a6c:	47c0      	blx	r8
  SetEPTxStatus(ENDP1, EP_TX_NAK);
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 8004a6e:	f645 4775 	movw	r7, #23669	; 0x5c75
  SetEPRxValid(ENDP0);

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_BULK);
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
  SetEPTxStatus(ENDP1, EP_TX_NAK);
 8004a72:	2001      	movs	r0, #1
 8004a74:	2120      	movs	r1, #32
 8004a76:	47a8      	blx	r5
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 8004a78:	f6c0 0700 	movt	r7, #2048	; 0x800
 8004a7c:	2001      	movs	r0, #1
 8004a7e:	4621      	mov	r1, r4
 8004a80:	47b8      	blx	r7

  /* Initialize Endpoint 2 */
  SetEPType(ENDP2, EP_INTERRUPT);
 8004a82:	2002      	movs	r0, #2
 8004a84:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004a88:	47b0      	blx	r6
  SetEPTxAddr(ENDP2, ENDP2_TXADDR);
 8004a8a:	2002      	movs	r0, #2
 8004a8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a90:	47c0      	blx	r8
  SetEPRxStatus(ENDP2, EP_RX_DIS);
 8004a92:	2002      	movs	r0, #2
 8004a94:	4621      	mov	r1, r4
 8004a96:	47b8      	blx	r7
  SetEPTxStatus(ENDP2, EP_TX_NAK);
 8004a98:	2002      	movs	r0, #2
 8004a9a:	2120      	movs	r1, #32
 8004a9c:	47a8      	blx	r5

  /* Initialize Endpoint 3 */
  SetEPType(ENDP3, EP_BULK);
 8004a9e:	2003      	movs	r0, #3
 8004aa0:	4621      	mov	r1, r4
 8004aa2:	47b0      	blx	r6
  SetEPRxAddr(ENDP3, ENDP3_RXADDR);
 8004aa4:	2003      	movs	r0, #3
 8004aa6:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004aaa:	47d0      	blx	sl
  SetEPRxCount(ENDP3, VIRTUAL_COM_PORT_DATA_SIZE);
 8004aac:	2003      	movs	r0, #3
 8004aae:	2140      	movs	r1, #64	; 0x40
 8004ab0:	47c8      	blx	r9
  SetEPRxStatus(ENDP3, EP_RX_VALID);
 8004ab2:	2003      	movs	r0, #3
 8004ab4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004ab8:	47b8      	blx	r7
  SetEPTxStatus(ENDP3, EP_TX_DIS);
 8004aba:	4621      	mov	r1, r4
 8004abc:	2003      	movs	r0, #3
 8004abe:	47a8      	blx	r5

  /* Set this device to response on default address */
  SetDeviceAddress(0);
 8004ac0:	f645 11e5 	movw	r1, #23013	; 0x59e5
 8004ac4:	4620      	mov	r0, r4
 8004ac6:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004aca:	4788      	blx	r1
  
  bDeviceState = ATTACHED;
 8004acc:	f240 2094 	movw	r0, #660	; 0x294
 8004ad0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	6002      	str	r2, [r0, #0]
 8004ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004adc <Virtual_Com_Port_init>:
void Virtual_Com_Port_init(void)
{

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
 8004adc:	f245 03f5 	movw	r3, #20725	; 0x50f5
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_init(void)
{
 8004ae0:	b510      	push	{r4, lr}

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
 8004ae2:	f6c0 0300 	movt	r3, #2048	; 0x800
 8004ae6:	4798      	blx	r3

  pInformation->Current_Configuration = 0;
 8004ae8:	f241 0028 	movw	r0, #4136	; 0x1028
 8004aec:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004af0:	6802      	ldr	r2, [r0, #0]
 8004af2:	2400      	movs	r4, #0

  /* Connect the device */
  PowerOn();
 8004af4:	f644 3119 	movw	r1, #19225	; 0x4b19

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();

  pInformation->Current_Configuration = 0;
 8004af8:	7294      	strb	r4, [r2, #10]

  /* Connect the device */
  PowerOn();
 8004afa:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004afe:	4788      	blx	r1

  /* Perform basic device initialization operations */
  USB_SIL_Init();
 8004b00:	f645 6385 	movw	r3, #24197	; 0x5e85
 8004b04:	f6c0 0300 	movt	r3, #2048	; 0x800
 8004b08:	4798      	blx	r3

  /* configure the USART to the default settings */
  //USART_Config_Default();

  bDeviceState = UNCONNECTED;
 8004b0a:	f240 2094 	movw	r0, #660	; 0x294
 8004b0e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004b12:	6004      	str	r4, [r0, #0]
 8004b14:	bd10      	pop	{r4, pc}
 8004b16:	bf00      	nop

08004b18 <PowerOn>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOn(void)
{
 8004b18:	b538      	push	{r3, r4, r5, lr}
  uint16_t wRegVal;

  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);
 8004b1a:	f644 738d 	movw	r3, #20365	; 0x4f8d
 8004b1e:	2001      	movs	r0, #1
 8004b20:	f6c0 0300 	movt	r3, #2048	; 0x800
 8004b24:	4798      	blx	r3

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 8004b26:	f645 4544 	movw	r5, #23620	; 0x5c44
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8004b2a:	f645 4340 	movw	r3, #23616	; 0x5c40
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8004b2e:	f241 022c 	movw	r2, #4140	; 0x102c
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8004b32:	f2c4 0300 	movt	r3, #16384	; 0x4000

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 8004b36:	2100      	movs	r1, #0
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8004b38:	f44f 54e0 	mov.w	r4, #7168	; 0x1c00
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8004b3c:	2001      	movs	r0, #1

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 8004b3e:	f2c4 0500 	movt	r5, #16384	; 0x4000
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8004b42:	f2c2 0200 	movt	r2, #8192	; 0x2000
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8004b46:	6018      	str	r0, [r3, #0]

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 8004b48:	6019      	str	r1, [r3, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
  _SetCNTR(wInterrupt_Mask);
  
  return USB_SUCCESS;
}
 8004b4a:	4608      	mov	r0, r1

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 8004b4c:	6029      	str	r1, [r5, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8004b4e:	8014      	strh	r4, [r2, #0]
  _SetCNTR(wInterrupt_Mask);
 8004b50:	601c      	str	r4, [r3, #0]
  
  return USB_SUCCESS;
}
 8004b52:	bd38      	pop	{r3, r4, r5, pc}

08004b54 <Suspend>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
 8004b54:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t i =0;
	uint16_t wCNTR;
	uint32_t tmpreg = 0;
  __IO uint32_t savePWR_CR=0;
 8004b56:	2100      	movs	r1, #0
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
 8004b58:	b083      	sub	sp, #12
  __IO uint32_t savePWR_CR=0;
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 8004b5a:	f645 4340 	movw	r3, #23616	; 0x5c40

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8004b5e:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
void Suspend(void)
{
	uint32_t i =0;
	uint16_t wCNTR;
	uint32_t tmpreg = 0;
  __IO uint32_t savePWR_CR=0;
 8004b62:	9101      	str	r1, [sp, #4]
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 8004b64:	f2c4 0300 	movt	r3, #16384	; 0x4000

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8004b68:	f2c4 0200 	movt	r2, #16384	; 0x4000
  __IO uint32_t savePWR_CR=0;
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 8004b6c:	6818      	ldr	r0, [r3, #0]

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8004b6e:	6814      	ldr	r4, [r2, #0]
 8004b70:	4960      	ldr	r1, [pc, #384]	; (8004cf4 <Suspend+0x1a0>)
 8004b72:	b2a5      	uxth	r5, r4
 8004b74:	f645 4604 	movw	r6, #23556	; 0x5c04
 8004b78:	600d      	str	r5, [r1, #0]
 8004b7a:	f2c4 0600 	movt	r6, #16384	; 0x4000
 8004b7e:	6837      	ldr	r7, [r6, #0]
 8004b80:	f645 4208 	movw	r2, #23560	; 0x5c08
 8004b84:	b2bc      	uxth	r4, r7
 8004b86:	604c      	str	r4, [r1, #4]
 8004b88:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004b8c:	6815      	ldr	r5, [r2, #0]
 8004b8e:	f645 460c 	movw	r6, #23564	; 0x5c0c
 8004b92:	b2af      	uxth	r7, r5
 8004b94:	608f      	str	r7, [r1, #8]
 8004b96:	f2c4 0600 	movt	r6, #16384	; 0x4000
 8004b9a:	6834      	ldr	r4, [r6, #0]
 8004b9c:	f645 4210 	movw	r2, #23568	; 0x5c10
 8004ba0:	b2a5      	uxth	r5, r4
 8004ba2:	60cd      	str	r5, [r1, #12]
 8004ba4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004ba8:	6816      	ldr	r6, [r2, #0]
 8004baa:	f645 4714 	movw	r7, #23572	; 0x5c14
 8004bae:	b2b4      	uxth	r4, r6
 8004bb0:	610c      	str	r4, [r1, #16]
 8004bb2:	f2c4 0700 	movt	r7, #16384	; 0x4000
 8004bb6:	683d      	ldr	r5, [r7, #0]
 8004bb8:	f645 4218 	movw	r2, #23576	; 0x5c18
 8004bbc:	b2ae      	uxth	r6, r5
 8004bbe:	614e      	str	r6, [r1, #20]
 8004bc0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004bc4:	6817      	ldr	r7, [r2, #0]
 8004bc6:	f645 451c 	movw	r5, #23580	; 0x5c1c
 8004bca:	b2bc      	uxth	r4, r7
 8004bcc:	618c      	str	r4, [r1, #24]
 8004bce:	f2c4 0500 	movt	r5, #16384	; 0x4000
 8004bd2:	682e      	ldr	r6, [r5, #0]
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 8004bd4:	b282      	uxth	r2, r0
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 8004bd6:	f64f 74fe 	movw	r4, #65534	; 0xfffe
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 8004bda:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 8004bde:	4004      	ands	r4, r0
	wCNTR = _GetCNTR();  

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8004be0:	b2b7      	uxth	r7, r6
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 8004be2:	f444 6580 	orr.w	r5, r4, #1024	; 0x400
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
	
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
 8004be6:	f042 0601 	orr.w	r6, r2, #1
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 8004bea:	f645 4044 	movw	r0, #23620	; 0x5c44
	wCNTR = _GetCNTR();  

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8004bee:	61cf      	str	r7, [r1, #28]
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 8004bf0:	f2c4 0000 	movt	r0, #16384	; 0x4000
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 8004bf4:	601a      	str	r2, [r3, #0]
	
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
 8004bf6:	601e      	str	r6, [r3, #0]
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
 8004bf8:	601d      	str	r5, [r3, #0]
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 8004bfa:	6802      	ldr	r2, [r0, #0]
 8004bfc:	f645 4344 	movw	r3, #23620	; 0x5c44
 8004c00:	0552      	lsls	r2, r2, #21
 8004c02:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004c06:	d5f8      	bpl.n	8004bfa <Suspend+0xa6>
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
 8004c08:	f64f 30ff 	movw	r0, #64511	; 0xfbff
 8004c0c:	6018      	str	r0, [r3, #0]
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
 8004c0e:	6808      	ldr	r0, [r1, #0]
 8004c10:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 8004c14:	b280      	uxth	r0, r0
 8004c16:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004c1a:	6010      	str	r0, [r2, #0]
 8004c1c:	6848      	ldr	r0, [r1, #4]
 8004c1e:	f645 4204 	movw	r2, #23556	; 0x5c04
 8004c22:	b280      	uxth	r0, r0
 8004c24:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004c28:	6010      	str	r0, [r2, #0]
 8004c2a:	6888      	ldr	r0, [r1, #8]
 8004c2c:	f645 4208 	movw	r2, #23560	; 0x5c08
 8004c30:	b280      	uxth	r0, r0
 8004c32:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004c36:	6010      	str	r0, [r2, #0]
 8004c38:	68c8      	ldr	r0, [r1, #12]
 8004c3a:	f645 420c 	movw	r2, #23564	; 0x5c0c
 8004c3e:	b280      	uxth	r0, r0
 8004c40:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004c44:	6010      	str	r0, [r2, #0]
 8004c46:	6908      	ldr	r0, [r1, #16]
 8004c48:	f645 4210 	movw	r2, #23568	; 0x5c10
 8004c4c:	b280      	uxth	r0, r0
 8004c4e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004c52:	6010      	str	r0, [r2, #0]
 8004c54:	6948      	ldr	r0, [r1, #20]
 8004c56:	f645 4214 	movw	r2, #23572	; 0x5c14
 8004c5a:	b280      	uxth	r0, r0
 8004c5c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004c60:	6010      	str	r0, [r2, #0]
 8004c62:	6988      	ldr	r0, [r1, #24]
 8004c64:	f645 4218 	movw	r2, #23576	; 0x5c18
 8004c68:	b280      	uxth	r0, r0
 8004c6a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004c6e:	6010      	str	r0, [r2, #0]
 8004c70:	69c8      	ldr	r0, [r1, #28]
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 8004c72:	f645 4240 	movw	r2, #23616	; 0x5c40
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
 8004c76:	f645 411c 	movw	r1, #23580	; 0x5c1c
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 8004c7a:	f2c4 0200 	movt	r2, #16384	; 0x4000
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
 8004c7e:	b280      	uxth	r0, r0
 8004c80:	f2c4 0100 	movt	r1, #16384	; 0x4000
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
 8004c84:	f444 6481 	orr.w	r4, r4, #1032	; 0x408
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
 8004c88:	6008      	str	r0, [r1, #0]
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 8004c8a:	6014      	str	r4, [r2, #0]
	
	/* force low-power mode in the macrocell */
	wCNTR = _GetCNTR();
 8004c8c:	6810      	ldr	r0, [r2, #0]
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 8004c8e:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
	_SetCNTR(wCNTR);
	
	/* force low-power mode in the macrocell */
	wCNTR = _GetCNTR();
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
 8004c92:	b284      	uxth	r4, r0
 8004c94:	f044 0004 	orr.w	r0, r4, #4
 8004c98:	6010      	str	r0, [r2, #0]
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 8004c9a:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8004c9e:	6808      	ldr	r0, [r1, #0]
	REG_PWR_CR = tmpreg;
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 8004ca0:	f64e 5410 	movw	r4, #60688	; 0xed10
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 8004ca4:	9001      	str	r0, [sp, #4]
	
	tmpreg = REG_PWR_CR;
 8004ca6:	6808      	ldr	r0, [r1, #0]
	REG_PWR_CR = tmpreg;
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 8004ca8:	f2ce 0400 	movt	r4, #57344	; 0xe000
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
	
	tmpreg = REG_PWR_CR;
	/* Clear PDDS and LPDS bits */
	tmpreg &= ((uint32_t)0xFFFFFFFC);
 8004cac:	f020 0003 	bic.w	r0, r0, #3
	/* Set LPDS bit according to PWR_Regulator value */
	tmpreg |= PWR_Regulator_LowPower;
 8004cb0:	f040 0001 	orr.w	r0, r0, #1
	/* Store the new value */
	REG_PWR_CR = tmpreg;
 8004cb4:	6008      	str	r0, [r1, #0]
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 8004cb6:	6820      	ldr	r0, [r4, #0]
 8004cb8:	f040 0004 	orr.w	r0, r0, #4
 8004cbc:	6020      	str	r0, [r4, #0]
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
 8004cbe:	6818      	ldr	r0, [r3, #0]
 8004cc0:	04c0      	lsls	r0, r0, #19
 8004cc2:	d50f      	bpl.n	8004ce4 <Suspend+0x190>
#endif
	}
	else
	{
		/* Clear Wakeup flag */
		_SetISTR(CLR_WKUP);
 8004cc4:	f64e 70ff 	movw	r0, #61439	; 0xefff
 8004cc8:	6018      	str	r0, [r3, #0]
		/* clear FSUSP to abort entry in suspend mode  */
        wCNTR = _GetCNTR();
 8004cca:	6810      	ldr	r0, [r2, #0]
        wCNTR&=~CNTR_FSUSP;
 8004ccc:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8004cd0:	4003      	ands	r3, r0
        _SetCNTR(wCNTR);
 8004cd2:	6013      	str	r3, [r2, #0]
		
		/*restore sleep mode configuration */ 
		/* restore Power regulator config in sleep mode*/
		REG_PWR_CR = savePWR_CR;
 8004cd4:	9a01      	ldr	r2, [sp, #4]
 8004cd6:	600a      	str	r2, [r1, #0]
		
		/* Reset SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)		
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
#else
                REG_SCB_SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP);
 8004cd8:	6821      	ldr	r1, [r4, #0]
 8004cda:	f021 0004 	bic.w	r0, r1, #4
 8004cde:	6020      	str	r0, [r4, #0]
#endif
    }
}
 8004ce0:	b003      	add	sp, #12
 8004ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
	{
		__WFI();
 8004ce4:	4b04      	ldr	r3, [pc, #16]	; (8004cf8 <Suspend+0x1a4>)
 8004ce6:	4798      	blx	r3
		/* Reset SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk); 
#else
                REG_SCB_SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP); 
 8004ce8:	6822      	ldr	r2, [r4, #0]
 8004cea:	f022 0104 	bic.w	r1, r2, #4
 8004cee:	6021      	str	r1, [r4, #0]
 8004cf0:	e7f6      	b.n	8004ce0 <Suspend+0x18c>
 8004cf2:	bf00      	nop
 8004cf4:	200007d8 	.word	0x200007d8
 8004cf8:	08005139 	.word	0x08005139

08004cfc <Resume_Init>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Resume_Init(void)
{
 8004cfc:	b510      	push	{r4, lr}
  /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
  /* restart the clocks */
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
 8004cfe:	f645 4440 	movw	r4, #23616	; 0x5c40
 8004d02:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8004d06:	6823      	ldr	r3, [r4, #0]
  wCNTR &= (~CNTR_LPMODE);
 8004d08:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 8004d0c:	401a      	ands	r2, r3
  _SetCNTR(wCNTR);    
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 8004d0e:	f644 60bd 	movw	r0, #20157	; 0x4ebd
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);    
 8004d12:	6022      	str	r2, [r4, #0]
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 8004d14:	f6c0 0000 	movt	r0, #2048	; 0x800
 8004d18:	4780      	blx	r0

  /* reset FSUSP bit */
  _SetCNTR(IMR_MSK);
 8004d1a:	f44f 413f 	mov.w	r1, #48896	; 0xbf00
 8004d1e:	6021      	str	r1, [r4, #0]
 8004d20:	bd10      	pop	{r4, pc}
 8004d22:	bf00      	nop

08004d24 <Resume>:
*                  decrementing of the ESOF counter in different states.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
 8004d24:	b510      	push	{r4, lr}
  uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
    ResumeS.eState = eResumeSetVal;
 8004d26:	4c2b      	ldr	r4, [pc, #172]	; (8004dd4 <Resume+0xb0>)
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
  uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
 8004d28:	2807      	cmp	r0, #7
    ResumeS.eState = eResumeSetVal;
 8004d2a:	bf18      	it	ne
 8004d2c:	7020      	strbne	r0, [r4, #0]
  switch (ResumeS.eState)
 8004d2e:	7823      	ldrb	r3, [r4, #0]
 8004d30:	2b05      	cmp	r3, #5
 8004d32:	d819      	bhi.n	8004d68 <Resume+0x44>
 8004d34:	e8df f003 	tbb	[pc, r3]
 8004d38:	2f2a221b 	.word	0x2f2a221b
 8004d3c:	033a      	.short	0x033a
      _SetCNTR(wCNTR);
      ResumeS.eState = RESUME_ON;
      ResumeS.bESOFcnt = 10;
      break;
    case RESUME_ON:    
      ResumeS.bESOFcnt--;
 8004d3e:	7860      	ldrb	r0, [r4, #1]
 8004d40:	1e41      	subs	r1, r0, #1
 8004d42:	b2ca      	uxtb	r2, r1
 8004d44:	7062      	strb	r2, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 8004d46:	7863      	ldrb	r3, [r4, #1]
 8004d48:	b983      	cbnz	r3, 8004d6c <Resume+0x48>
      {
        wCNTR = _GetCNTR();
 8004d4a:	f645 4240 	movw	r2, #23616	; 0x5c40
 8004d4e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004d52:	6810      	ldr	r0, [r2, #0]
        wCNTR &= (~CNTR_RESUME);
 8004d54:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8004d58:	4001      	ands	r1, r0
        _SetCNTR(wCNTR);
 8004d5a:	6011      	str	r1, [r2, #0]
        ResumeS.eState = RESUME_OFF;
 8004d5c:	4a1d      	ldr	r2, [pc, #116]	; (8004dd4 <Resume+0xb0>)
        remotewakeupon = 0;
 8004d5e:	491e      	ldr	r1, [pc, #120]	; (8004dd8 <Resume+0xb4>)
      if (ResumeS.bESOFcnt == 0)
      {
        wCNTR = _GetCNTR();
        wCNTR &= (~CNTR_RESUME);
        _SetCNTR(wCNTR);
        ResumeS.eState = RESUME_OFF;
 8004d60:	2006      	movs	r0, #6
 8004d62:	7010      	strb	r0, [r2, #0]
        remotewakeupon = 0;
 8004d64:	600b      	str	r3, [r1, #0]
 8004d66:	bd10      	pop	{r4, pc}
      }
      break;
    case RESUME_OFF:
    case RESUME_ESOF:
    default:
      ResumeS.eState = RESUME_OFF;
 8004d68:	2106      	movs	r1, #6
 8004d6a:	7021      	strb	r1, [r4, #0]
 8004d6c:	bd10      	pop	{r4, pc}
  if (eResumeSetVal != RESUME_ESOF)
    ResumeS.eState = eResumeSetVal;
  switch (ResumeS.eState)
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
 8004d6e:	4a1a      	ldr	r2, [pc, #104]	; (8004dd8 <Resume+0xb4>)
 8004d70:	6811      	ldr	r1, [r2, #0]
 8004d72:	2900      	cmp	r1, #0
 8004d74:	d028      	beq.n	8004dc8 <Resume+0xa4>
        Resume_Init();
        ResumeS.eState = RESUME_OFF;
      }
      else /* RESUME detected during the RemoteWAkeup signalling => keep RemoteWakeup handling*/
      {
        ResumeS.eState = RESUME_ON;
 8004d76:	2005      	movs	r0, #5
 8004d78:	7020      	strb	r0, [r4, #0]
 8004d7a:	bd10      	pop	{r4, pc}
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
 8004d7c:	4a17      	ldr	r2, [pc, #92]	; (8004ddc <Resume+0xb8>)
 8004d7e:	4790      	blx	r2
      ResumeS.eState = RESUME_START;
      remotewakeupon = 1;
 8004d80:	4b15      	ldr	r3, [pc, #84]	; (8004dd8 <Resume+0xb4>)
        ResumeS.eState = RESUME_ON;
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
      ResumeS.eState = RESUME_START;
 8004d82:	2104      	movs	r1, #4
      remotewakeupon = 1;
 8004d84:	2001      	movs	r0, #1
        ResumeS.eState = RESUME_ON;
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
      ResumeS.eState = RESUME_START;
 8004d86:	7021      	strb	r1, [r4, #0]
      remotewakeupon = 1;
 8004d88:	6018      	str	r0, [r3, #0]
      break;
 8004d8a:	bd10      	pop	{r4, pc}
    case RESUME_LATER:
      ResumeS.bESOFcnt = 2;
 8004d8c:	2302      	movs	r3, #2
      ResumeS.eState = RESUME_WAIT;
 8004d8e:	2003      	movs	r0, #3
      Resume_Init();
      ResumeS.eState = RESUME_START;
      remotewakeupon = 1;
      break;
    case RESUME_LATER:
      ResumeS.bESOFcnt = 2;
 8004d90:	7063      	strb	r3, [r4, #1]
      ResumeS.eState = RESUME_WAIT;
 8004d92:	7020      	strb	r0, [r4, #0]
      break;
 8004d94:	bd10      	pop	{r4, pc}
    case RESUME_WAIT:
      ResumeS.bESOFcnt--;
 8004d96:	7862      	ldrb	r2, [r4, #1]
 8004d98:	1e51      	subs	r1, r2, #1
 8004d9a:	b2cb      	uxtb	r3, r1
 8004d9c:	7063      	strb	r3, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 8004d9e:	7860      	ldrb	r0, [r4, #1]
 8004da0:	2800      	cmp	r0, #0
 8004da2:	d1e3      	bne.n	8004d6c <Resume+0x48>
        ResumeS.eState = RESUME_START;
 8004da4:	490b      	ldr	r1, [pc, #44]	; (8004dd4 <Resume+0xb0>)
 8004da6:	2204      	movs	r2, #4
 8004da8:	700a      	strb	r2, [r1, #0]
 8004daa:	bd10      	pop	{r4, pc}
      break;
    case RESUME_START:
      wCNTR = _GetCNTR();
 8004dac:	f645 4340 	movw	r3, #23616	; 0x5c40
 8004db0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004db4:	6818      	ldr	r0, [r3, #0]
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
 8004db6:	b282      	uxth	r2, r0
 8004db8:	f042 0110 	orr.w	r1, r2, #16
 8004dbc:	6019      	str	r1, [r3, #0]
      ResumeS.eState = RESUME_ON;
      ResumeS.bESOFcnt = 10;
 8004dbe:	200a      	movs	r0, #10
      break;
    case RESUME_START:
      wCNTR = _GetCNTR();
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
      ResumeS.eState = RESUME_ON;
 8004dc0:	2305      	movs	r3, #5
 8004dc2:	7023      	strb	r3, [r4, #0]
      ResumeS.bESOFcnt = 10;
 8004dc4:	7060      	strb	r0, [r4, #1]
      break;
 8004dc6:	bd10      	pop	{r4, pc}
  switch (ResumeS.eState)
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
      {
        Resume_Init();
 8004dc8:	4b04      	ldr	r3, [pc, #16]	; (8004ddc <Resume+0xb8>)
 8004dca:	4798      	blx	r3
        ResumeS.eState = RESUME_OFF;
 8004dcc:	2206      	movs	r2, #6
 8004dce:	7022      	strb	r2, [r4, #0]
 8004dd0:	bd10      	pop	{r4, pc}
 8004dd2:	bf00      	nop
 8004dd4:	200007d4 	.word	0x200007d4
 8004dd8:	2000029c 	.word	0x2000029c
 8004ddc:	08004cfd 	.word	0x08004cfd

08004de0 <USBWakeUp_IRQHandler>:


void USBWakeUp_IRQHandler(void)
{
	//EXTI_ClearITPendingBit(EXTI_Line18);
	REG_EXTI_PR = (1 << 18 );
 8004de0:	f240 4314 	movw	r3, #1044	; 0x414
 8004de4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004de8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004dec:	601a      	str	r2, [r3, #0]
 8004dee:	4770      	bx	lr

08004df0 <IntToUnicode>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 8004df0:	b470      	push	{r4, r5, r6}
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8004df2:	b38a      	cbz	r2, 8004e58 <IntToUnicode+0x68>
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 8004df4:	1e56      	subs	r6, r2, #1
 8004df6:	b2f2      	uxtb	r2, r6
 8004df8:	1c53      	adds	r3, r2, #1
 8004dfa:	005e      	lsls	r6, r3, #1
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8004dfc:	0f03      	lsrs	r3, r0, #28
 8004dfe:	1eb2      	subs	r2, r6, #2
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8004e00:	2400      	movs	r4, #0
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8004e02:	2b09      	cmp	r3, #9
 8004e04:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8004e08:	d928      	bls.n	8004e5c <IntToUnicode+0x6c>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8004e0a:	3337      	adds	r3, #55	; 0x37
 8004e0c:	700b      	strb	r3, [r1, #0]
 8004e0e:	2302      	movs	r3, #2
    }
    
    value = value << 4;
 8004e10:	0100      	lsls	r0, r0, #4
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8004e12:	42b3      	cmp	r3, r6
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8004e14:	704c      	strb	r4, [r1, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8004e16:	d01f      	beq.n	8004e58 <IntToUnicode+0x68>
 8004e18:	b152      	cbz	r2, 8004e30 <IntToUnicode+0x40>
  {
    if( ((value >> 28)) < 0xA )
 8004e1a:	0f02      	lsrs	r2, r0, #28
 8004e1c:	2a09      	cmp	r2, #9
 8004e1e:	d913      	bls.n	8004e48 <IntToUnicode+0x58>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8004e20:	3237      	adds	r2, #55	; 0x37
 8004e22:	54ca      	strb	r2, [r1, r3]
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 8004e24:	18ca      	adds	r2, r1, r3
 8004e26:	3302      	adds	r3, #2
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 8004e28:	0100      	lsls	r0, r0, #4
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8004e2a:	42b3      	cmp	r3, r6
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8004e2c:	7054      	strb	r4, [r2, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8004e2e:	d013      	beq.n	8004e58 <IntToUnicode+0x68>
  {
    if( ((value >> 28)) < 0xA )
 8004e30:	0f05      	lsrs	r5, r0, #28
 8004e32:	2d09      	cmp	r5, #9
 8004e34:	d815      	bhi.n	8004e62 <IntToUnicode+0x72>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8004e36:	3530      	adds	r5, #48	; 0x30
 8004e38:	54cd      	strb	r5, [r1, r3]
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 8004e3a:	0100      	lsls	r0, r0, #4
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8004e3c:	0f02      	lsrs	r2, r0, #28
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 8004e3e:	18cd      	adds	r5, r1, r3
 8004e40:	3302      	adds	r3, #2
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8004e42:	2a09      	cmp	r2, #9
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8004e44:	706c      	strb	r4, [r5, #1]
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8004e46:	d8eb      	bhi.n	8004e20 <IntToUnicode+0x30>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8004e48:	3230      	adds	r2, #48	; 0x30
 8004e4a:	54ca      	strb	r2, [r1, r3]
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 8004e4c:	18ca      	adds	r2, r1, r3
 8004e4e:	3302      	adds	r3, #2
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 8004e50:	0100      	lsls	r0, r0, #4
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8004e52:	42b3      	cmp	r3, r6
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8004e54:	7054      	strb	r4, [r2, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8004e56:	d1eb      	bne.n	8004e30 <IntToUnicode+0x40>
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
  }
}
 8004e58:	bc70      	pop	{r4, r5, r6}
 8004e5a:	4770      	bx	lr
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8004e5c:	3330      	adds	r3, #48	; 0x30
 8004e5e:	700b      	strb	r3, [r1, #0]
 8004e60:	e7d5      	b.n	8004e0e <IntToUnicode+0x1e>
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8004e62:	3537      	adds	r5, #55	; 0x37
 8004e64:	54cd      	strb	r5, [r1, r3]
 8004e66:	e7e8      	b.n	8004e3a <IntToUnicode+0x4a>

08004e68 <USB_LP_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_IRQHandler(void)
{
 8004e68:	b508      	push	{r3, lr}
	//printf("USB\n");	
	USB_Istr();
 8004e6a:	f244 53e1 	movw	r3, #17889	; 0x45e1
 8004e6e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8004e72:	4798      	blx	r3
 8004e74:	bd08      	pop	{r3, pc}
 8004e76:	bf00      	nop

08004e78 <Set_System>:
*******************************************************************************/
void Set_System(void)
{  	
	#if HW_USE_USB_SMARTROBOT_BD == 1
	//-- PC.13
	REG_GPIOC_CRH &= ~(0x0F << (20));	// Clear
 8004e78:	f241 0304 	movw	r3, #4100	; 0x1004
 8004e7c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	f422 0070 	bic.w	r0, r2, #15728640	; 0xf00000
 8004e86:	6018      	str	r0, [r3, #0]
	REG_GPIOC_CRH |=  (0x02 << (20));	// MODE, PC.13 Output mode, max speed 2Mhz
 8004e88:	6819      	ldr	r1, [r3, #0]
 8004e8a:	f441 1200 	orr.w	r2, r1, #2097152	; 0x200000
 8004e8e:	601a      	str	r2, [r3, #0]
	REG_GPIOC_CRH |=  (0x00 << (22));	// CNF,  PC.13 General purpose output push-pul
 8004e90:	6818      	ldr	r0, [r3, #0]
 8004e92:	6018      	str	r0, [r3, #0]
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop

08004e98 <Set_USBClock>:
*******************************************************************************/
void Set_USBClock(void)
{
	//-- USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );	
 8004e98:	f241 0204 	movw	r2, #4100	; 0x1004
 8004e9c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004ea0:	6811      	ldr	r1, [r2, #0]
	
	//-- USB Clock Enable 
	//
	SET_BIT( REG_RCC_APB1ENR, 23 );
 8004ea2:	f241 031c 	movw	r3, #4124	; 0x101c
*******************************************************************************/
void Set_USBClock(void)
{
	//-- USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );	
 8004ea6:	f421 0080 	bic.w	r0, r1, #4194304	; 0x400000
 8004eaa:	6010      	str	r0, [r2, #0]
	
	//-- USB Clock Enable 
	//
	SET_BIT( REG_RCC_APB1ENR, 23 );
 8004eac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	f442 0100 	orr.w	r1, r2, #8388608	; 0x800000
 8004eb6:	6019      	str	r1, [r3, #0]
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop

08004ebc <Leave_LowPowerMode>:
void Leave_LowPowerMode(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  /* Set the device state to the correct state */
  if (pInfo->Current_Configuration != 0)
 8004ebc:	4b05      	ldr	r3, [pc, #20]	; (8004ed4 <Leave_LowPowerMode+0x18>)
 8004ebe:	7a98      	ldrb	r0, [r3, #10]
 8004ec0:	b918      	cbnz	r0, 8004eca <Leave_LowPowerMode+0xe>
    /* Device configured */
    bDeviceState = CONFIGURED;
  }
  else
  {
    bDeviceState = ATTACHED;
 8004ec2:	4905      	ldr	r1, [pc, #20]	; (8004ed8 <Leave_LowPowerMode+0x1c>)
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	600a      	str	r2, [r1, #0]
 8004ec8:	4770      	bx	lr

  /* Set the device state to the correct state */
  if (pInfo->Current_Configuration != 0)
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 8004eca:	4b03      	ldr	r3, [pc, #12]	; (8004ed8 <Leave_LowPowerMode+0x1c>)
 8004ecc:	2005      	movs	r0, #5
 8004ece:	6018      	str	r0, [r3, #0]
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	20001008 	.word	0x20001008
 8004ed8:	20000294 	.word	0x20000294

08004edc <USB_Interrupts_Config>:
void USB_Interrupts_Config(void)
{

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 8004edc:	f240 4214 	movw	r2, #1044	; 0x414
* Description    : Configures the USB interrupts
* Input          : None.
* Return         : None.
*******************************************************************************/
void USB_Interrupts_Config(void)
{
 8004ee0:	b538      	push	{r3, r4, r5, lr}

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 8004ee2:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004ee6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 8004eea:	f44f 6380 	mov.w	r3, #1024	; 0x400
void USB_Interrupts_Config(void)
{

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 8004eee:	6011      	str	r1, [r2, #0]
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 8004ef0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004ef4:	6818      	ldr	r0, [r3, #0]
	CLR_BIT( REG_EXTI_EMR,  18 );
 8004ef6:	f240 4404 	movw	r4, #1028	; 0x404

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 8004efa:	f420 2580 	bic.w	r5, r0, #262144	; 0x40000
 8004efe:	601d      	str	r5, [r3, #0]
	CLR_BIT( REG_EXTI_EMR,  18 );
 8004f00:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8004f04:	6822      	ldr	r2, [r4, #0]
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 8004f06:	f44f 6181 	mov.w	r1, #1032	; 0x408
	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
 8004f0a:	f422 2080 	bic.w	r0, r2, #262144	; 0x40000
 8004f0e:	6020      	str	r0, [r4, #0]
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 8004f10:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8004f14:	680c      	ldr	r4, [r1, #0]
	CLR_BIT( REG_EXTI_FTSR, 18 );
 8004f16:	f240 450c 	movw	r5, #1036	; 0x40c
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 8004f1a:	f444 2280 	orr.w	r2, r4, #262144	; 0x40000
 8004f1e:	600a      	str	r2, [r1, #0]
	CLR_BIT( REG_EXTI_FTSR, 18 );
 8004f20:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8004f24:	6829      	ldr	r1, [r5, #0]
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 8004f26:	f244 14a1 	movw	r4, #16801	; 0x41a1
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
 8004f2a:	f421 2080 	bic.w	r0, r1, #262144	; 0x40000
 8004f2e:	6028      	str	r0, [r5, #0]
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 8004f30:	681d      	ldr	r5, [r3, #0]

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 8004f32:	f644 6169 	movw	r1, #20073	; 0x4e69
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 8004f36:	f445 2580 	orr.w	r5, r5, #262144	; 0x40000

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 8004f3a:	2090      	movs	r0, #144	; 0x90
 8004f3c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004f40:	2200      	movs	r2, #0
 8004f42:	f6c0 0400 	movt	r4, #2048	; 0x800
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 8004f46:	601d      	str	r5, [r3, #0]

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 8004f48:	47a0      	blx	r4
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 8004f4a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8004f4e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8004f52:	681a      	ldr	r2, [r3, #0]
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 8004f54:	20e8      	movs	r0, #232	; 0xe8
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 8004f56:	f442 1180 	orr.w	r1, r2, #1048576	; 0x100000
 8004f5a:	6019      	str	r1, [r3, #0]
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 8004f5c:	f644 51e1 	movw	r1, #19937	; 0x4de1
 8004f60:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004f64:	2200      	movs	r2, #0
 8004f66:	47a0      	blx	r4
	SET_BIT( REG_NVIC_ISER( 42/32 ), 42%32 );	// NVIC 42번 USB Wake Up 인터럽트 활성화 
 8004f68:	f24e 1004 	movw	r0, #57604	; 0xe104
 8004f6c:	f2ce 0000 	movt	r0, #57344	; 0xe000
 8004f70:	6802      	ldr	r2, [r0, #0]

	SET_BIT( REG_EXTI_SWIER, 18 );
 8004f72:	f44f 6382 	mov.w	r3, #1040	; 0x410
  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 42/32 ), 42%32 );	// NVIC 42번 USB Wake Up 인터럽트 활성화 
 8004f76:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
 8004f7a:	6001      	str	r1, [r0, #0]

	SET_BIT( REG_EXTI_SWIER, 18 );
 8004f7c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004f80:	6818      	ldr	r0, [r3, #0]
 8004f82:	f440 2280 	orr.w	r2, r0, #262144	; 0x40000
 8004f86:	601a      	str	r2, [r3, #0]
 8004f88:	bd38      	pop	{r3, r4, r5, pc}
 8004f8a:	bf00      	nop

08004f8c <USB_Cable_Config>:
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	CLR_BIT( REG_GPIOC_ODR, 13 );
 8004f8c:	f241 030c 	movw	r3, #4108	; 0x100c
 8004f90:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004f94:	681a      	ldr	r2, [r3, #0]
* Input          : None.
* Return         : Status
*******************************************************************************/
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
 8004f96:	b918      	cbnz	r0, 8004fa0 <USB_Cable_Config+0x14>
	#endif
  }
  else
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	SET_BIT( REG_GPIOC_ODR, 13 );    
 8004f98:	f442 5000 	orr.w	r0, r2, #8192	; 0x2000
 8004f9c:	6018      	str	r0, [r3, #0]
 8004f9e:	4770      	bx	lr
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	CLR_BIT( REG_GPIOC_ODR, 13 );
 8004fa0:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8004fa4:	6019      	str	r1, [r3, #0]
 8004fa6:	4770      	bx	lr

08004fa8 <USB_To_USART_Send_Data>:
* Input          : data_buffer: data address.
                   Nb_bytes: number of bytes to send.
* Return         : none.
*******************************************************************************/
void USB_To_USART_Send_Data(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8004fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8004fac:	460f      	mov	r7, r1
* Input          : data_buffer: data address.
                   Nb_bytes: number of bytes to send.
* Return         : none.
*******************************************************************************/
void USB_To_USART_Send_Data(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8004fae:	b082      	sub	sp, #8
 8004fb0:	4605      	mov	r5, r0
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8004fb2:	b361      	cbz	r1, 800500e <USB_To_USART_Send_Data+0x66>
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8004fb4:	7803      	ldrb	r3, [r0, #0]
 8004fb6:	1e4a      	subs	r2, r1, #1
    Hw_Uart_Q_Push( 5, &UartData );	//
 8004fb8:	2005      	movs	r0, #5
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8004fba:	2401      	movs	r4, #1
 8004fbc:	4e15      	ldr	r6, [pc, #84]	; (8005014 <USB_To_USART_Send_Data+0x6c>)
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
    Hw_Uart_Q_Push( 5, &UartData );	//
 8004fbe:	f10d 0107 	add.w	r1, sp, #7
 8004fc2:	ea02 0804 	and.w	r8, r2, r4
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8004fc6:	f88d 3007 	strb.w	r3, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 8004fca:	47b0      	blx	r6
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8004fcc:	42bc      	cmp	r4, r7
 8004fce:	d21e      	bcs.n	800500e <USB_To_USART_Send_Data+0x66>
 8004fd0:	f1b8 0f00 	cmp.w	r8, #0
 8004fd4:	d009      	beq.n	8004fea <USB_To_USART_Send_Data+0x42>
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8004fd6:	786b      	ldrb	r3, [r5, #1]
    Hw_Uart_Q_Push( 5, &UartData );	//
 8004fd8:	2005      	movs	r0, #5
 8004fda:	f10d 0107 	add.w	r1, sp, #7
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8004fde:	2402      	movs	r4, #2
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8004fe0:	f88d 3007 	strb.w	r3, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 8004fe4:	47b0      	blx	r6
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8004fe6:	42bc      	cmp	r4, r7
 8004fe8:	d211      	bcs.n	800500e <USB_To_USART_Send_Data+0x66>
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8004fea:	5d2a      	ldrb	r2, [r5, r4]
    Hw_Uart_Q_Push( 5, &UartData );	//
 8004fec:	f10d 0107 	add.w	r1, sp, #7
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8004ff0:	3401      	adds	r4, #1
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
    Hw_Uart_Q_Push( 5, &UartData );	//
 8004ff2:	2005      	movs	r0, #5
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8004ff4:	f88d 2007 	strb.w	r2, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 8004ff8:	47b0      	blx	r6
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8004ffa:	5d2b      	ldrb	r3, [r5, r4]
    Hw_Uart_Q_Push( 5, &UartData );	//
 8004ffc:	2005      	movs	r0, #5
 8004ffe:	f10d 0107 	add.w	r1, sp, #7
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8005002:	3401      	adds	r4, #1
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8005004:	f88d 3007 	strb.w	r3, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 8005008:	47b0      	blx	r6
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 800500a:	42bc      	cmp	r4, r7
 800500c:	d3ed      	bcc.n	8004fea <USB_To_USART_Send_Data+0x42>
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
    Hw_Uart_Q_Push( 5, &UartData );	//
  }  
}
 800500e:	b002      	add	sp, #8
 8005010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005014:	0800408d 	.word	0x0800408d

08005018 <Handle_USBAsynchXfer>:
* Description    : send data to USB.
* Input          : None.
* Return         : none.
*******************************************************************************/
void Handle_USBAsynchXfer (void)
{
 8005018:	b570      	push	{r4, r5, r6, lr}
  
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if(USB_Tx_State != 1)
 800501a:	4c20      	ldr	r4, [pc, #128]	; (800509c <Handle_USBAsynchXfer+0x84>)
 800501c:	7823      	ldrb	r3, [r4, #0]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d023      	beq.n	800506a <Handle_USBAsynchXfer+0x52>
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
 8005022:	4d1f      	ldr	r5, [pc, #124]	; (80050a0 <Handle_USBAsynchXfer+0x88>)
 8005024:	682b      	ldr	r3, [r5, #0]
 8005026:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800502a:	d02c      	beq.n	8005086 <Handle_USBAsynchXfer+0x6e>
    {
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 800502c:	4a1d      	ldr	r2, [pc, #116]	; (80050a4 <Handle_USBAsynchXfer+0x8c>)
 800502e:	6811      	ldr	r1, [r2, #0]
 8005030:	428b      	cmp	r3, r1
 8005032:	d02f      	beq.n	8005094 <Handle_USBAsynchXfer+0x7c>
    {
      USB_Tx_State = 0; 
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
 8005034:	d81a      	bhi.n	800506c <Handle_USBAsynchXfer+0x54>
 8005036:	b298      	uxth	r0, r3
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
    }
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 8005038:	1ace      	subs	r6, r1, r3
 800503a:	4a1b      	ldr	r2, [pc, #108]	; (80050a8 <Handle_USBAsynchXfer+0x90>)
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 800503c:	2e40      	cmp	r6, #64	; 0x40
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
    }
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 800503e:	6016      	str	r6, [r2, #0]
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 8005040:	d91b      	bls.n	800507a <Handle_USBAsynchXfer+0x62>
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
 8005042:	3e40      	subs	r6, #64	; 0x40
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
 8005044:	3340      	adds	r3, #64	; 0x40
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
 8005046:	6016      	str	r6, [r2, #0]
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
 8005048:	602b      	str	r3, [r5, #0]
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 800504a:	2640      	movs	r6, #64	; 0x40
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 800504c:	4b17      	ldr	r3, [pc, #92]	; (80050ac <Handle_USBAsynchXfer+0x94>)
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 800504e:	2501      	movs	r5, #1
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8005050:	1818      	adds	r0, r3, r0
 8005052:	4632      	mov	r2, r6
 8005054:	21c0      	movs	r1, #192	; 0xc0
 8005056:	4b16      	ldr	r3, [pc, #88]	; (80050b0 <Handle_USBAsynchXfer+0x98>)
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 8005058:	7025      	strb	r5, [r4, #0]
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 800505a:	4798      	blx	r3
    SetEPTxCount(ENDP1, USB_Tx_length);
 800505c:	4628      	mov	r0, r5
 800505e:	4631      	mov	r1, r6
 8005060:	4a14      	ldr	r2, [pc, #80]	; (80050b4 <Handle_USBAsynchXfer+0x9c>)
 8005062:	4790      	blx	r2
    SetEPTxValid(ENDP1); 
 8005064:	4628      	mov	r0, r5
 8005066:	4914      	ldr	r1, [pc, #80]	; (80050b8 <Handle_USBAsynchXfer+0xa0>)
 8005068:	4788      	blx	r1
 800506a:	bd70      	pop	{r4, r5, r6, pc}
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 800506c:	f5c3 6600 	rsb	r6, r3, #2048	; 0x800
 8005070:	4a0d      	ldr	r2, [pc, #52]	; (80050a8 <Handle_USBAsynchXfer+0x90>)
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 8005072:	2e40      	cmp	r6, #64	; 0x40
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 8005074:	6016      	str	r6, [r2, #0]
 8005076:	b298      	uxth	r0, r3
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 8005078:	d8e3      	bhi.n	8005042 <Handle_USBAsynchXfer+0x2a>
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
 800507a:	18f1      	adds	r1, r6, r3
 800507c:	6029      	str	r1, [r5, #0]
      USART_Rx_length = 0;
 800507e:	2500      	movs	r5, #0
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
    }
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = USART_Rx_length;
 8005080:	b2b6      	uxth	r6, r6
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
 8005082:	6015      	str	r5, [r2, #0]
 8005084:	e7e2      	b.n	800504c <Handle_USBAsynchXfer+0x34>
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 8005086:	4907      	ldr	r1, [pc, #28]	; (80050a4 <Handle_USBAsynchXfer+0x8c>)
  
  if(USB_Tx_State != 1)
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
 8005088:	2000      	movs	r0, #0
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 800508a:	6809      	ldr	r1, [r1, #0]
  
  if(USB_Tx_State != 1)
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
 800508c:	6028      	str	r0, [r5, #0]
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 800508e:	b109      	cbz	r1, 8005094 <Handle_USBAsynchXfer+0x7c>
 8005090:	4603      	mov	r3, r0
 8005092:	e7d1      	b.n	8005038 <Handle_USBAsynchXfer+0x20>
    {
      USB_Tx_State = 0; 
 8005094:	2000      	movs	r0, #0
 8005096:	7020      	strb	r0, [r4, #0]
      return;
 8005098:	bd70      	pop	{r4, r5, r6, pc}
 800509a:	bf00      	nop
 800509c:	200002a0 	.word	0x200002a0
 80050a0:	200002a8 	.word	0x200002a8
 80050a4:	200002a4 	.word	0x200002a4
 80050a8:	200002ac 	.word	0x200002ac
 80050ac:	200007f8 	.word	0x200007f8
 80050b0:	08005b41 	.word	0x08005b41
 80050b4:	08005df1 	.word	0x08005df1
 80050b8:	08005cb5 	.word	0x08005cb5

080050bc <USB_Send_Data>:
	
	//-- 전송 버퍼가 꽉 차면 기다린다.
	//
	while(1)
	{
		if( (USART_Rx_length + 1) < USART_RX_DATA_SIZE ) break;
 80050bc:	4b0a      	ldr	r3, [pc, #40]	; (80050e8 <USB_Send_Data+0x2c>)
* Description    : send the received data from UART 0 to USB.
* Input          : None.
* Return         : none.
*******************************************************************************/
void USB_Send_Data( u8 SendData )
{
 80050be:	b410      	push	{r4}
	
	//-- 전송 버퍼가 꽉 차면 기다린다.
	//
	while(1)
	{
		if( (USART_Rx_length + 1) < USART_RX_DATA_SIZE ) break;
 80050c0:	6819      	ldr	r1, [r3, #0]
 80050c2:	1c4a      	adds	r2, r1, #1
 80050c4:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80050c8:	d20c      	bcs.n	80050e4 <USB_Send_Data+0x28>
	}
	
	
	USART_Rx_Buffer[USART_Rx_ptr_in] = SendData;
 80050ca:	4b08      	ldr	r3, [pc, #32]	; (80050ec <USB_Send_Data+0x30>)
 80050cc:	4c08      	ldr	r4, [pc, #32]	; (80050f0 <USB_Send_Data+0x34>)
 80050ce:	6819      	ldr	r1, [r3, #0]
	USART_Rx_ptr_in++;
 80050d0:	1c4a      	adds	r2, r1, #1
  
	/* To avoid buffer overflow */
	if(USART_Rx_ptr_in == USART_RX_DATA_SIZE)
 80050d2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
	{
		if( (USART_Rx_length + 1) < USART_RX_DATA_SIZE ) break;
	}
	
	
	USART_Rx_Buffer[USART_Rx_ptr_in] = SendData;
 80050d6:	5460      	strb	r0, [r4, r1]
	USART_Rx_ptr_in++;
 80050d8:	601a      	str	r2, [r3, #0]
  
	/* To avoid buffer overflow */
	if(USART_Rx_ptr_in == USART_RX_DATA_SIZE)
 80050da:	d101      	bne.n	80050e0 <USB_Send_Data+0x24>
	{
		USART_Rx_ptr_in = 0;
 80050dc:	2000      	movs	r0, #0
 80050de:	6018      	str	r0, [r3, #0]
	}
}
 80050e0:	bc10      	pop	{r4}
 80050e2:	4770      	bx	lr
 80050e4:	e7fe      	b.n	80050e4 <USB_Send_Data+0x28>
 80050e6:	bf00      	nop
 80050e8:	200002ac 	.word	0x200002ac
 80050ec:	200002a4 	.word	0x200002a4
 80050f0:	200007f8 	.word	0x200007f8

080050f4 <Get_SerialNum>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Get_SerialNum(void)
{
 80050f4:	b538      	push	{r3, r4, r5, lr}
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 80050f6:	f24f 72e8 	movw	r2, #63464	; 0xf7e8
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  
 80050fa:	f24f 73f0 	movw	r3, #63472	; 0xf7f0
*******************************************************************************/
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 80050fe:	f6c1 72ff 	movt	r2, #8191	; 0x1fff
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  
 8005102:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
*******************************************************************************/
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 8005106:	6810      	ldr	r0, [r2, #0]
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;
 8005108:	681a      	ldr	r2, [r3, #0]
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
  Device_Serial1 = *(uint32_t*)ID2;
 800510a:	f24f 71ec 	movw	r1, #63468	; 0xf7ec
 800510e:	f6c1 71ff 	movt	r1, #8191	; 0x1fff
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;

  if (Device_Serial0 != 0)
 8005112:	1880      	adds	r0, r0, r2
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
  Device_Serial1 = *(uint32_t*)ID2;
 8005114:	680c      	ldr	r4, [r1, #0]
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;

  if (Device_Serial0 != 0)
 8005116:	d007      	beq.n	8005128 <Get_SerialNum+0x34>
  {
    IntToUnicode (Device_Serial0, &Virtual_Com_Port_StringSerial[2] , 8);
 8005118:	4904      	ldr	r1, [pc, #16]	; (800512c <Get_SerialNum+0x38>)
 800511a:	2208      	movs	r2, #8
 800511c:	4d04      	ldr	r5, [pc, #16]	; (8005130 <Get_SerialNum+0x3c>)
 800511e:	47a8      	blx	r5
    IntToUnicode (Device_Serial1, &Virtual_Com_Port_StringSerial[18], 4);
 8005120:	4620      	mov	r0, r4
 8005122:	4904      	ldr	r1, [pc, #16]	; (8005134 <Get_SerialNum+0x40>)
 8005124:	2204      	movs	r2, #4
 8005126:	47a8      	blx	r5
 8005128:	bd38      	pop	{r3, r4, r5, pc}
 800512a:	bf00      	nop
 800512c:	20000002 	.word	0x20000002
 8005130:	08004df1 	.word	0x08004df1
 8005134:	20000012 	.word	0x20000012

08005138 <__WFI>:
}


void __WFI(void)
{
	 __asm("wfi");
 8005138:	bf30      	wfi
 800513a:	4770      	bx	lr

0800513c <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
 800513c:	b508      	push	{r3, lr}
  if (Length == 0)
 800513e:	b138      	cbz	r0, 8005150 <Standard_GetConfiguration+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_Configuration);
    return 0;
  }
  pUser_Standard_Requests->User_GetConfiguration();
 8005140:	4b06      	ldr	r3, [pc, #24]	; (800515c <Standard_GetConfiguration+0x20>)
 8005142:	6818      	ldr	r0, [r3, #0]
 8005144:	6801      	ldr	r1, [r0, #0]
 8005146:	4788      	blx	r1
  return (uint8_t *)&pInformation->Current_Configuration;
 8005148:	4a05      	ldr	r2, [pc, #20]	; (8005160 <Standard_GetConfiguration+0x24>)
 800514a:	6810      	ldr	r0, [r2, #0]
 800514c:	300a      	adds	r0, #10
}
 800514e:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8005150:	4b03      	ldr	r3, [pc, #12]	; (8005160 <Standard_GetConfiguration+0x24>)
 8005152:	2201      	movs	r2, #1
 8005154:	6819      	ldr	r1, [r3, #0]
 8005156:	820a      	strh	r2, [r1, #16]
      sizeof(pInformation->Current_Configuration);
    return 0;
 8005158:	bd08      	pop	{r3, pc}
 800515a:	bf00      	nop
 800515c:	20001024 	.word	0x20001024
 8005160:	20001028 	.word	0x20001028

08005164 <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
 8005164:	b508      	push	{r3, lr}
  if (Length == 0)
 8005166:	b138      	cbz	r0, 8005178 <Standard_GetInterface+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
  }
  pUser_Standard_Requests->User_GetInterface();
 8005168:	4b06      	ldr	r3, [pc, #24]	; (8005184 <Standard_GetInterface+0x20>)
 800516a:	6818      	ldr	r0, [r3, #0]
 800516c:	6881      	ldr	r1, [r0, #8]
 800516e:	4788      	blx	r1
  return (uint8_t *)&pInformation->Current_AlternateSetting;
 8005170:	4a05      	ldr	r2, [pc, #20]	; (8005188 <Standard_GetInterface+0x24>)
 8005172:	6810      	ldr	r0, [r2, #0]
 8005174:	300c      	adds	r0, #12
}
 8005176:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8005178:	4b03      	ldr	r3, [pc, #12]	; (8005188 <Standard_GetInterface+0x24>)
 800517a:	2201      	movs	r2, #1
 800517c:	6819      	ldr	r1, [r3, #0]
 800517e:	820a      	strh	r2, [r1, #16]
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
 8005180:	bd08      	pop	{r3, pc}
 8005182:	bf00      	nop
 8005184:	20001024 	.word	0x20001024
 8005188:	20001028 	.word	0x20001028

0800518c <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
 800518c:	b508      	push	{r3, lr}
  if (Length == 0)
 800518e:	2800      	cmp	r0, #0
 8005190:	d03b      	beq.n	800520a <Standard_GetStatus+0x7e>
  }

  /* Reset Status Information */
  StatusInfo.w = 0;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8005192:	4b23      	ldr	r3, [pc, #140]	; (8005220 <Standard_GetStatus+0x94>)
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 8005194:	4823      	ldr	r0, [pc, #140]	; (8005224 <Standard_GetStatus+0x98>)
 8005196:	2100      	movs	r1, #0

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8005198:	681a      	ldr	r2, [r3, #0]
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 800519a:	8001      	strh	r1, [r0, #0]

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800519c:	7813      	ldrb	r3, [r2, #0]
 800519e:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 80051a2:	d112      	bne.n	80051ca <Standard_GetStatus+0x3e>
  {
    /*Get Device Status */
    uint8_t Feature = pInformation->Current_Feature;
 80051a4:	7a53      	ldrb	r3, [r2, #9]

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
 80051a6:	f003 0220 	and.w	r2, r3, #32
 80051aa:	b2d1      	uxtb	r1, r2
 80051ac:	bb59      	cbnz	r1, 8005206 <Standard_GetStatus+0x7a>
 80051ae:	7802      	ldrb	r2, [r0, #0]
    {
      ClrBit(StatusInfo0, 1);
    }      

    /* Bus-powered */
    if (ValBit(Feature, 6))
 80051b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b4:	b2d9      	uxtb	r1, r3
 80051b6:	b311      	cbz	r1, 80051fe <Standard_GetStatus+0x72>
    {
      SetBit(StatusInfo0, 0);
 80051b8:	f042 0301 	orr.w	r3, r2, #1
 80051bc:	7003      	strb	r3, [r0, #0]
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 80051be:	481a      	ldr	r0, [pc, #104]	; (8005228 <Standard_GetStatus+0x9c>)
 80051c0:	6801      	ldr	r1, [r0, #0]
 80051c2:	690a      	ldr	r2, [r1, #16]
 80051c4:	4790      	blx	r2
  return (uint8_t *)&StatusInfo;
 80051c6:	4817      	ldr	r0, [pc, #92]	; (8005224 <Standard_GetStatus+0x98>)
 80051c8:	bd08      	pop	{r3, pc}
    {
      ClrBit(StatusInfo0, 0);
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d016      	beq.n	80051fc <Standard_GetStatus+0x70>
  {
    return (uint8_t *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d113      	bne.n	80051fa <Standard_GetStatus+0x6e>
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;
 80051d2:	7951      	ldrb	r1, [r2, #5]

    Related_Endpoint = (wIndex0 & 0x0f);
 80051d4:	f001 020f 	and.w	r2, r1, #15
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 80051d8:	0093      	lsls	r3, r2, #2
 80051da:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 80051de:	f502 43b8 	add.w	r3, r2, #23552	; 0x5c00
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 80051e2:	f011 0f80 	tst.w	r1, #128	; 0x80
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 80051e6:	6819      	ldr	r1, [r3, #0]
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 80051e8:	d114      	bne.n	8005214 <Standard_GetStatus+0x88>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 80051ea:	f401 5240 	and.w	r2, r1, #12288	; 0x3000
 80051ee:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80051f2:	d1e4      	bne.n	80051be <Standard_GetStatus+0x32>
      {
        SetBit(StatusInfo0, 0); /* OUT Endpoint stalled */
 80051f4:	2101      	movs	r1, #1
 80051f6:	7001      	strb	r1, [r0, #0]
 80051f8:	e7e1      	b.n	80051be <Standard_GetStatus+0x32>
    }

  }
  else
  {
    return NULL;
 80051fa:	4608      	mov	r0, r1
  }
  pUser_Standard_Requests->User_GetStatus();
  return (uint8_t *)&StatusInfo;
}
 80051fc:	bd08      	pop	{r3, pc}
    {
      SetBit(StatusInfo0, 0);
    }
    else /* Self-powered */
    {
      ClrBit(StatusInfo0, 0);
 80051fe:	f022 0201 	bic.w	r2, r2, #1
 8005202:	7002      	strb	r2, [r0, #0]
 8005204:	e7db      	b.n	80051be <Standard_GetStatus+0x32>
    uint8_t Feature = pInformation->Current_Feature;

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
    {
      SetBit(StatusInfo0, 1);
 8005206:	2202      	movs	r2, #2
 8005208:	e7d2      	b.n	80051b0 <Standard_GetStatus+0x24>
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
 800520a:	4b05      	ldr	r3, [pc, #20]	; (8005220 <Standard_GetStatus+0x94>)
 800520c:	2202      	movs	r2, #2
 800520e:	6819      	ldr	r1, [r3, #0]
 8005210:	820a      	strh	r2, [r1, #16]
    return 0;
 8005212:	bd08      	pop	{r3, pc}

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8005214:	f001 0330 	and.w	r3, r1, #48	; 0x30
 8005218:	2b10      	cmp	r3, #16
 800521a:	d1d0      	bne.n	80051be <Standard_GetStatus+0x32>
 800521c:	e7ea      	b.n	80051f4 <Standard_GetStatus+0x68>
 800521e:	bf00      	nop
 8005220:	20001028 	.word	0x20001028
 8005224:	20000ff8 	.word	0x20000ff8
 8005228:	20001024 	.word	0x20001024

0800522c <DataStageIn>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 800522c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 8005230:	4e27      	ldr	r6, [pc, #156]	; (80052d0 <DataStageIn+0xa4>)
 8005232:	6834      	ldr	r4, [r6, #0]
  uint32_t save_wLength = pEPinfo->Usb_wLength;
 8005234:	8a23      	ldrh	r3, [r4, #16]
  uint32_t ControlState = pInformation->ControlState;
 8005236:	7a27      	ldrb	r7, [r4, #8]

  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 8005238:	b923      	cbnz	r3, 8005244 <DataStageIn+0x18>
 800523a:	2f04      	cmp	r7, #4
 800523c:	d02a      	beq.n	8005294 <DataStageIn+0x68>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 800523e:	8aa5      	ldrh	r5, [r4, #20]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 8005240:	2704      	movs	r7, #4
 8005242:	e003      	b.n	800524c <DataStageIn+0x20>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 8005244:	8aa5      	ldrh	r5, [r4, #20]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 8005246:	42ab      	cmp	r3, r5
 8005248:	d9fa      	bls.n	8005240 <DataStageIn+0x14>
 800524a:	2702      	movs	r7, #2
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 800524c:	429d      	cmp	r5, r3
 800524e:	bf28      	it	cs
 8005250:	461d      	movcs	r5, r3
 8005252:	69a1      	ldr	r1, [r4, #24]
 8005254:	4628      	mov	r0, r5
 8005256:	4788      	blx	r1
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 8005258:	4a1e      	ldr	r2, [pc, #120]	; (80052d4 <DataStageIn+0xa8>)
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 800525a:	4680      	mov	r8, r0
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 800525c:	2000      	movs	r0, #0
 800525e:	4790      	blx	r2
 8005260:	462a      	mov	r2, r5
 8005262:	4601      	mov	r1, r0
 8005264:	4b1c      	ldr	r3, [pc, #112]	; (80052d8 <DataStageIn+0xac>)
 8005266:	4640      	mov	r0, r8
 8005268:	4798      	blx	r3

  SetEPTxCount(ENDP0, Length);
 800526a:	4629      	mov	r1, r5
 800526c:	2000      	movs	r0, #0
 800526e:	4a1b      	ldr	r2, [pc, #108]	; (80052dc <DataStageIn+0xb0>)
 8005270:	4790      	blx	r2

  pEPinfo->Usb_wLength -= Length;
 8005272:	8a20      	ldrh	r0, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 8005274:	8a61      	ldrh	r1, [r4, #18]
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 8005276:	1b43      	subs	r3, r0, r5
 8005278:	8223      	strh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 800527a:	186d      	adds	r5, r5, r1
  vSetEPTxStatus(EP_TX_VALID);
 800527c:	4818      	ldr	r0, [pc, #96]	; (80052e0 <DataStageIn+0xb4>)

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 800527e:	4b19      	ldr	r3, [pc, #100]	; (80052e4 <DataStageIn+0xb8>)
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
 8005280:	8265      	strh	r5, [r4, #18]
  vSetEPTxStatus(EP_TX_VALID);
 8005282:	2230      	movs	r2, #48	; 0x30

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8005284:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005288:	6834      	ldr	r4, [r6, #0]

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);
 800528a:	8002      	strh	r2, [r0, #0]

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 800528c:	8019      	strh	r1, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 800528e:	7227      	strb	r7, [r4, #8]
 8005290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
 8005294:	4a14      	ldr	r2, [pc, #80]	; (80052e8 <DataStageIn+0xbc>)
 8005296:	7810      	ldrb	r0, [r2, #0]
 8005298:	2801      	cmp	r0, #1
 800529a:	d006      	beq.n	80052aa <DataStageIn+0x7e>
    }
    else 
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
      vSetEPTxStatus(EP_TX_STALL);
 800529c:	4910      	ldr	r1, [pc, #64]	; (80052e0 <DataStageIn+0xb4>)
 800529e:	2710      	movs	r7, #16
 80052a0:	800f      	strh	r7, [r1, #0]
 80052a2:	2707      	movs	r7, #7
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 80052a4:	7227      	strb	r7, [r4, #8]
 80052a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 80052aa:	f645 4050 	movw	r0, #23632	; 0x5c50
 80052ae:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80052b2:	6800      	ldr	r0, [r0, #0]
 80052b4:	f243 0102 	movw	r1, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 80052b8:	b280      	uxth	r0, r0
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 80052ba:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80052be:	1841      	adds	r1, r0, r1
 80052c0:	0048      	lsls	r0, r1, #1
 80052c2:	4907      	ldr	r1, [pc, #28]	; (80052e0 <DataStageIn+0xb4>)
 80052c4:	6003      	str	r3, [r0, #0]
 80052c6:	2030      	movs	r0, #48	; 0x30
 80052c8:	8008      	strh	r0, [r1, #0]
      ControlState = LAST_IN_DATA;
      Data_Mul_MaxPacketSize = FALSE;
 80052ca:	7013      	strb	r3, [r2, #0]
 80052cc:	e7df      	b.n	800528e <DataStageIn+0x62>
 80052ce:	bf00      	nop
 80052d0:	20001028 	.word	0x20001028
 80052d4:	08005db1 	.word	0x08005db1
 80052d8:	08005b41 	.word	0x08005b41
 80052dc:	08005df1 	.word	0x08005df1
 80052e0:	20001030 	.word	0x20001030
 80052e4:	2000102e 	.word	0x2000102e
 80052e8:	200002b0 	.word	0x200002b0

080052ec <Standard_SetConfiguration>:
* Output         : None.
* Return         : Return USB_SUCCESS, if the request is performed.
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{
 80052ec:	b510      	push	{r4, lr}

  if ((pInformation->USBwValue0 <=
 80052ee:	4b0b      	ldr	r3, [pc, #44]	; (800531c <Standard_SetConfiguration+0x30>)
 80052f0:	4a0b      	ldr	r2, [pc, #44]	; (8005320 <Standard_SetConfiguration+0x34>)
 80052f2:	6818      	ldr	r0, [r3, #0]
 80052f4:	7851      	ldrb	r1, [r2, #1]
 80052f6:	78c3      	ldrb	r3, [r0, #3]
 80052f8:	4299      	cmp	r1, r3
 80052fa:	d201      	bcs.n	8005300 <Standard_SetConfiguration+0x14>
    pUser_Standard_Requests->User_SetConfiguration();
    return USB_SUCCESS;
  }
  else
  {
    return USB_UNSUPPORT;
 80052fc:	2002      	movs	r0, #2
  }
}
 80052fe:	bd10      	pop	{r4, pc}
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{

  if ((pInformation->USBwValue0 <=
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8005300:	7882      	ldrb	r2, [r0, #2]
 8005302:	2a00      	cmp	r2, #0
 8005304:	d1fa      	bne.n	80052fc <Standard_SetConfiguration+0x10>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 8005306:	8884      	ldrh	r4, [r0, #4]
 8005308:	2c00      	cmp	r4, #0
 800530a:	d1f7      	bne.n	80052fc <Standard_SetConfiguration+0x10>
  {
    pInformation->Current_Configuration = pInformation->USBwValue0;
 800530c:	7283      	strb	r3, [r0, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 800530e:	4805      	ldr	r0, [pc, #20]	; (8005324 <Standard_SetConfiguration+0x38>)
 8005310:	6801      	ldr	r1, [r0, #0]
 8005312:	684b      	ldr	r3, [r1, #4]
 8005314:	4798      	blx	r3
    return USB_SUCCESS;
 8005316:	4620      	mov	r0, r4
 8005318:	bd10      	pop	{r4, pc}
 800531a:	bf00      	nop
 800531c:	20001028 	.word	0x20001028
 8005320:	200000e0 	.word	0x200000e0
 8005324:	20001024 	.word	0x20001024

08005328 <Standard_SetInterface>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetInterface(void)
{
 8005328:	b538      	push	{r3, r4, r5, lr}
  RESULT Re;
  /*Test if the specified Interface and Alternate Setting are supported by
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 800532a:	4a10      	ldr	r2, [pc, #64]	; (800536c <Standard_SetInterface+0x44>)
 800532c:	4c10      	ldr	r4, [pc, #64]	; (8005370 <Standard_SetInterface+0x48>)
 800532e:	6811      	ldr	r1, [r2, #0]
 8005330:	6823      	ldr	r3, [r4, #0]
 8005332:	698a      	ldr	r2, [r1, #24]
 8005334:	7958      	ldrb	r0, [r3, #5]
 8005336:	78d9      	ldrb	r1, [r3, #3]
 8005338:	4790      	blx	r2

  if (pInformation->Current_Configuration != 0)
 800533a:	6823      	ldr	r3, [r4, #0]
 800533c:	7a99      	ldrb	r1, [r3, #10]
 800533e:	b909      	cbnz	r1, 8005344 <Standard_SetInterface+0x1c>
      return USB_SUCCESS;
    }

  }

  return USB_UNSUPPORT;
 8005340:	2002      	movs	r0, #2
}
 8005342:	bd38      	pop	{r3, r4, r5, pc}
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);

  if (pInformation->Current_Configuration != 0)
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 8005344:	2800      	cmp	r0, #0
 8005346:	d1fb      	bne.n	8005340 <Standard_SetInterface+0x18>
 8005348:	7918      	ldrb	r0, [r3, #4]
 800534a:	2800      	cmp	r0, #0
 800534c:	d1f8      	bne.n	8005340 <Standard_SetInterface+0x18>
        || (pInformation->USBwValue1 != 0))
 800534e:	789d      	ldrb	r5, [r3, #2]
 8005350:	2d00      	cmp	r5, #0
 8005352:	d1f5      	bne.n	8005340 <Standard_SetInterface+0x18>
    {
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
 8005354:	4a07      	ldr	r2, [pc, #28]	; (8005374 <Standard_SetInterface+0x4c>)
 8005356:	6813      	ldr	r3, [r2, #0]
 8005358:	68d9      	ldr	r1, [r3, #12]
 800535a:	4788      	blx	r1
      pInformation->Current_Interface = pInformation->USBwIndex0;
 800535c:	6823      	ldr	r3, [r4, #0]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
      return USB_SUCCESS;
 800535e:	4628      	mov	r0, r5
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8005360:	7959      	ldrb	r1, [r3, #5]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 8005362:	78da      	ldrb	r2, [r3, #3]
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8005364:	72d9      	strb	r1, [r3, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 8005366:	731a      	strb	r2, [r3, #12]
      return USB_SUCCESS;
 8005368:	bd38      	pop	{r3, r4, r5, pc}
 800536a:	bf00      	nop
 800536c:	20001000 	.word	0x20001000
 8005370:	20001028 	.word	0x20001028
 8005374:	20001024 	.word	0x20001024

08005378 <Standard_ClearFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_ClearFeature(void)
{
 8005378:	b538      	push	{r3, r4, r5, lr}
  uint32_t     Type_Rec = Type_Recipient;
 800537a:	4b35      	ldr	r3, [pc, #212]	; (8005450 <Standard_ClearFeature+0xd8>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	7818      	ldrb	r0, [r3, #0]
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8005380:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 8005384:	d003      	beq.n	800538e <Standard_ClearFeature+0x16>
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
    return USB_SUCCESS;
  }
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8005386:	2802      	cmp	r0, #2
 8005388:	d006      	beq.n	8005398 <Standard_ClearFeature+0x20>
    }
    pUser_Standard_Requests->User_ClearFeature();
    return USB_SUCCESS;
  }

  return USB_UNSUPPORT;
 800538a:	2002      	movs	r0, #2
}
 800538c:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
 800538e:	7a59      	ldrb	r1, [r3, #9]
 8005390:	f021 0220 	bic.w	r2, r1, #32
 8005394:	725a      	strb	r2, [r3, #9]
    return USB_SUCCESS;
 8005396:	bd38      	pop	{r3, r4, r5, pc}
    DEVICE* pDev;
    uint32_t Related_Endpoint;
    uint32_t wIndex0;
    uint32_t rEP;

    if ((pInformation->USBwValue != ENDPOINT_STALL)
 8005398:	885a      	ldrh	r2, [r3, #2]
 800539a:	2a00      	cmp	r2, #0
 800539c:	d1f6      	bne.n	800538c <Standard_ClearFeature+0x14>
        || (pInformation->USBwIndex1 != 0))
 800539e:	7919      	ldrb	r1, [r3, #4]
 80053a0:	2900      	cmp	r1, #0
 80053a2:	d1f3      	bne.n	800538c <Standard_ClearFeature+0x14>
    {
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
 80053a4:	795a      	ldrb	r2, [r3, #5]
    rEP = wIndex0 & ~0x80;
 80053a6:	f022 0080 	bic.w	r0, r2, #128	; 0x80

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 80053aa:	0081      	lsls	r1, r0, #2
 80053ac:	f101 4480 	add.w	r4, r1, #1073741824	; 0x40000000
    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
    Related_Endpoint = ENDP0 + rEP;

    if (ValBit(pInformation->USBwIndex0, 7))
 80053b0:	0615      	lsls	r5, r2, #24
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 80053b2:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 80053b6:	bf56      	itet	pl
 80053b8:	6824      	ldrpl	r4, [r4, #0]

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 80053ba:	6825      	ldrmi	r5, [r4, #0]
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 80053bc:	f404 5540 	andpl.w	r5, r4, #12288	; 0x3000
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 80053c0:	4c24      	ldr	r4, [pc, #144]	; (8005454 <Standard_ClearFeature+0xdc>)

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 80053c2:	bf48      	it	mi
 80053c4:	f005 0530 	andmi.w	r5, r5, #48	; 0x30
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 80053c8:	7824      	ldrb	r4, [r4, #0]
 80053ca:	42a0      	cmp	r0, r4
 80053cc:	d2dd      	bcs.n	800538a <Standard_ClearFeature+0x12>
 80053ce:	2d00      	cmp	r5, #0
 80053d0:	d0db      	beq.n	800538a <Standard_ClearFeature+0x12>
        || (pInformation->Current_Configuration == 0))
 80053d2:	7a9b      	ldrb	r3, [r3, #10]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d0d8      	beq.n	800538a <Standard_ClearFeature+0x12>
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 80053d8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80053dc:	b2d3      	uxtb	r3, r2
 80053de:	b173      	cbz	r3, 80053fe <Standard_ClearFeature+0x86>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 80053e0:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80053e4:	f501 42b8 	add.w	r2, r1, #23552	; 0x5c00
 80053e8:	6813      	ldr	r3, [r2, #0]
 80053ea:	f003 0130 	and.w	r1, r3, #48	; 0x30
 80053ee:	2910      	cmp	r1, #16
 80053f0:	d021      	beq.n	8005436 <Standard_ClearFeature+0xbe>
          ClearDTOG_RX(Related_Endpoint);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
      }
    }
    pUser_Standard_Requests->User_ClearFeature();
 80053f2:	4819      	ldr	r0, [pc, #100]	; (8005458 <Standard_ClearFeature+0xe0>)
 80053f4:	6801      	ldr	r1, [r0, #0]
 80053f6:	694a      	ldr	r2, [r1, #20]
 80053f8:	4790      	blx	r2
    return USB_SUCCESS;
 80053fa:	2000      	movs	r0, #0
 80053fc:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 80053fe:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8005402:	f501 44b8 	add.w	r4, r1, #23552	; 0x5c00
 8005406:	6822      	ldr	r2, [r4, #0]
 8005408:	f402 5340 	and.w	r3, r2, #12288	; 0x3000
 800540c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005410:	d1ef      	bne.n	80053f2 <Standard_ClearFeature+0x7a>
      {
        if (Related_Endpoint == ENDP0)
 8005412:	b9c8      	cbnz	r0, 8005448 <Standard_ClearFeature+0xd0>
        {
          /* After clear the STALL, enable the default endpoint receiver */
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 8005414:	4a11      	ldr	r2, [pc, #68]	; (800545c <Standard_ClearFeature+0xe4>)
 8005416:	4b12      	ldr	r3, [pc, #72]	; (8005460 <Standard_ClearFeature+0xe8>)
 8005418:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 800541c:	4798      	blx	r3
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 800541e:	6820      	ldr	r0, [r4, #0]
 8005420:	f64b 718f 	movw	r1, #49039	; 0xbf8f
 8005424:	4001      	ands	r1, r0
 8005426:	f481 5240 	eor.w	r2, r1, #12288	; 0x3000
 800542a:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 800542e:	f043 0080 	orr.w	r0, r3, #128	; 0x80
 8005432:	6020      	str	r0, [r4, #0]
 8005434:	e7dd      	b.n	80053f2 <Standard_ClearFeature+0x7a>
    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
      {
        ClearDTOG_TX(Related_Endpoint);
 8005436:	b2c4      	uxtb	r4, r0
 8005438:	4620      	mov	r0, r4
 800543a:	4a0a      	ldr	r2, [pc, #40]	; (8005464 <Standard_ClearFeature+0xec>)
 800543c:	4790      	blx	r2
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 800543e:	4620      	mov	r0, r4
 8005440:	2130      	movs	r1, #48	; 0x30
 8005442:	4b09      	ldr	r3, [pc, #36]	; (8005468 <Standard_ClearFeature+0xf0>)
 8005444:	4798      	blx	r3
 8005446:	e7d4      	b.n	80053f2 <Standard_ClearFeature+0x7a>
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
 8005448:	4908      	ldr	r1, [pc, #32]	; (800546c <Standard_ClearFeature+0xf4>)
 800544a:	4788      	blx	r1
 800544c:	e7e7      	b.n	800541e <Standard_ClearFeature+0xa6>
 800544e:	bf00      	nop
 8005450:	20001028 	.word	0x20001028
 8005454:	200000e0 	.word	0x200000e0
 8005458:	20001024 	.word	0x20001024
 800545c:	2000005c 	.word	0x2000005c
 8005460:	08005e11 	.word	0x08005e11
 8005464:	08005d41 	.word	0x08005d41
 8005468:	08005c35 	.word	0x08005c35
 800546c:	08005d1d 	.word	0x08005d1d

08005470 <Standard_SetEndPointFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetEndPointFeature(void)
{
 8005470:	b538      	push	{r3, r4, r5, lr}
  uint32_t    wIndex0;
  uint32_t    Related_Endpoint;
  uint32_t    rEP;
  uint32_t    Status;

  wIndex0 = pInformation->USBwIndex0;
 8005472:	4b22      	ldr	r3, [pc, #136]	; (80054fc <Standard_SetEndPointFeature+0x8c>)
 8005474:	6819      	ldr	r1, [r3, #0]
 8005476:	794b      	ldrb	r3, [r1, #5]
  rEP = wIndex0 & ~0x80;
 8005478:	f023 0280 	bic.w	r2, r3, #128	; 0x80

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 800547c:	0090      	lsls	r0, r2, #2
 800547e:	f100 4480 	add.w	r4, r0, #1073741824	; 0x40000000

  wIndex0 = pInformation->USBwIndex0;
  rEP = wIndex0 & ~0x80;
  Related_Endpoint = ENDP0 + rEP;

  if (ValBit(pInformation->USBwIndex0, 7))
 8005482:	061d      	lsls	r5, r3, #24
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8005484:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 8005488:	bf56      	itet	pl
 800548a:	6824      	ldrpl	r4, [r4, #0]

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 800548c:	6825      	ldrmi	r5, [r4, #0]
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 800548e:	f404 5540 	andpl.w	r5, r4, #12288	; 0x3000
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8005492:	4c1b      	ldr	r4, [pc, #108]	; (8005500 <Standard_SetEndPointFeature+0x90>)

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8005494:	bf48      	it	mi
 8005496:	f005 0530 	andmi.w	r5, r5, #48	; 0x30
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 800549a:	7824      	ldrb	r4, [r4, #0]
 800549c:	42a2      	cmp	r2, r4
 800549e:	d301      	bcc.n	80054a4 <Standard_SetEndPointFeature+0x34>
      || pInformation->USBwValue != 0 || Status == 0
      || pInformation->Current_Configuration == 0)
  {
    return USB_UNSUPPORT;
 80054a0:	2002      	movs	r0, #2
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
  return USB_SUCCESS;
}
 80054a2:	bd38      	pop	{r3, r4, r5, pc}
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
      || pInformation->USBwValue != 0 || Status == 0
 80054a4:	884a      	ldrh	r2, [r1, #2]
 80054a6:	2a00      	cmp	r2, #0
 80054a8:	d1fa      	bne.n	80054a0 <Standard_SetEndPointFeature+0x30>
 80054aa:	2d00      	cmp	r5, #0
 80054ac:	d0f8      	beq.n	80054a0 <Standard_SetEndPointFeature+0x30>
      || pInformation->Current_Configuration == 0)
 80054ae:	7a89      	ldrb	r1, [r1, #10]
 80054b0:	2900      	cmp	r1, #0
 80054b2:	d0f5      	beq.n	80054a0 <Standard_SetEndPointFeature+0x30>
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 80054b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 80054b8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80054bc:	f500 42b8 	add.w	r2, r0, #23552	; 0x5c00
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 80054c0:	b2db      	uxtb	r3, r3
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 80054c2:	6811      	ldr	r1, [r2, #0]
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 80054c4:	b17b      	cbz	r3, 80054e6 <Standard_SetEndPointFeature+0x76>
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 80054c6:	f648 70bf 	movw	r0, #36799	; 0x8fbf
 80054ca:	4008      	ands	r0, r1
 80054cc:	f080 0110 	eor.w	r1, r0, #16
 80054d0:	f441 4300 	orr.w	r3, r1, #32768	; 0x8000
 80054d4:	f043 0080 	orr.w	r0, r3, #128	; 0x80
 80054d8:	6010      	str	r0, [r2, #0]
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
 80054da:	4a0a      	ldr	r2, [pc, #40]	; (8005504 <Standard_SetEndPointFeature+0x94>)
 80054dc:	6811      	ldr	r1, [r2, #0]
 80054de:	698b      	ldr	r3, [r1, #24]
 80054e0:	4798      	blx	r3
  return USB_SUCCESS;
 80054e2:	2000      	movs	r0, #0
 80054e4:	bd38      	pop	{r3, r4, r5, pc}
    }

    else
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 80054e6:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 80054ea:	400b      	ands	r3, r1
 80054ec:	f483 5080 	eor.w	r0, r3, #4096	; 0x1000
 80054f0:	f440 4100 	orr.w	r1, r0, #32768	; 0x8000
 80054f4:	f041 0380 	orr.w	r3, r1, #128	; 0x80
 80054f8:	6013      	str	r3, [r2, #0]
 80054fa:	e7ee      	b.n	80054da <Standard_SetEndPointFeature+0x6a>
 80054fc:	20001028 	.word	0x20001028
 8005500:	200000e0 	.word	0x200000e0
 8005504:	20001024 	.word	0x20001024

08005508 <Standard_GetDescriptorData>:
*******************************************************************************/
uint8_t *Standard_GetDescriptorData(uint16_t Length, ONE_DESCRIPTOR *pDesc)
{
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 8005508:	4b05      	ldr	r3, [pc, #20]	; (8005520 <Standard_GetDescriptorData+0x18>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	8a5a      	ldrh	r2, [r3, #18]
  if (Length == 0)
 800550e:	b110      	cbz	r0, 8005516 <Standard_GetDescriptorData+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
    return 0;
  }

  return pDesc->Descriptor + wOffset;
 8005510:	6808      	ldr	r0, [r1, #0]
 8005512:	1880      	adds	r0, r0, r2
}
 8005514:	4770      	bx	lr
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 8005516:	8889      	ldrh	r1, [r1, #4]
 8005518:	1a8a      	subs	r2, r1, r2
 800551a:	821a      	strh	r2, [r3, #16]
    return 0;
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	20001028 	.word	0x20001028

08005524 <Post0_Process>:
* Output         : None.
* Return         : - 0 if the control State is in PAUSE
*                  - 1 if not.
*******************************************************************************/
uint8_t Post0_Process(void)
{
 8005524:	b508      	push	{r3, lr}
   
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8005526:	4b0c      	ldr	r3, [pc, #48]	; (8005558 <Post0_Process+0x34>)
 8005528:	2000      	movs	r0, #0
 800552a:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 800552e:	4a0b      	ldr	r2, [pc, #44]	; (800555c <Post0_Process+0x38>)
 8005530:	4790      	blx	r2

  if (pInformation->ControlState == STALLED)
 8005532:	480b      	ldr	r0, [pc, #44]	; (8005560 <Post0_Process+0x3c>)
 8005534:	6801      	ldr	r1, [r0, #0]
 8005536:	7a08      	ldrb	r0, [r1, #8]
 8005538:	2808      	cmp	r0, #8
 800553a:	d106      	bne.n	800554a <Post0_Process+0x26>
  {
    vSetEPRxStatus(EP_RX_STALL);
 800553c:	4b09      	ldr	r3, [pc, #36]	; (8005564 <Post0_Process+0x40>)
 800553e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005542:	801a      	strh	r2, [r3, #0]
    vSetEPTxStatus(EP_TX_STALL);
 8005544:	4a08      	ldr	r2, [pc, #32]	; (8005568 <Post0_Process+0x44>)
 8005546:	2110      	movs	r1, #16
 8005548:	8011      	strh	r1, [r2, #0]
  }

  return (pInformation->ControlState == PAUSE);
}
 800554a:	f1b0 0c09 	subs.w	ip, r0, #9
 800554e:	f1dc 0000 	rsbs	r0, ip, #0
 8005552:	eb50 000c 	adcs.w	r0, r0, ip
 8005556:	bd08      	pop	{r3, pc}
 8005558:	2000005c 	.word	0x2000005c
 800555c:	08005e11 	.word	0x08005e11
 8005560:	20001028 	.word	0x20001028
 8005564:	2000102e 	.word	0x2000102e
 8005568:	20001030 	.word	0x20001030

0800556c <Out0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Out0_Process(void)
{
 800556c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t ControlState = pInformation->ControlState;
 800556e:	4d33      	ldr	r5, [pc, #204]	; (800563c <Out0_Process+0xd0>)
 8005570:	682c      	ldr	r4, [r5, #0]
 8005572:	7a23      	ldrb	r3, [r4, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 8005574:	2b02      	cmp	r3, #2
 8005576:	d007      	beq.n	8005588 <Out0_Process+0x1c>
 8005578:	2b04      	cmp	r3, #4
 800557a:	d005      	beq.n	8005588 <Out0_Process+0x1c>
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 800557c:	2b03      	cmp	r3, #3
 800557e:	d008      	beq.n	8005592 <Out0_Process+0x26>
 8005580:	2b05      	cmp	r3, #5
 8005582:	d006      	beq.n	8005592 <Out0_Process+0x26>
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
  }

  else if (ControlState == WAIT_STATUS_OUT)
 8005584:	2b07      	cmp	r3, #7
 8005586:	d00d      	beq.n	80055a4 <Out0_Process+0x38>
 8005588:	2208      	movs	r2, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 800558a:	7222      	strb	r2, [r4, #8]

  return Post0_Process();
 800558c:	4b2c      	ldr	r3, [pc, #176]	; (8005640 <Out0_Process+0xd4>)
 800558e:	4798      	blx	r3
 8005590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;

  if (pEPinfo->CopyData && save_rLength)
 8005592:	69a1      	ldr	r1, [r4, #24]
void DataStageOut(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;
 8005594:	8a20      	ldrh	r0, [r4, #16]

  if (pEPinfo->CopyData && save_rLength)
 8005596:	b311      	cbz	r1, 80055de <Out0_Process+0x72>
 8005598:	b958      	cbnz	r0, 80055b2 <Out0_Process+0x46>
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800559a:	8aa4      	ldrh	r4, [r4, #20]
 800559c:	2c00      	cmp	r4, #0
 800559e:	d045      	beq.n	800562c <Out0_Process+0xc0>
 80055a0:	4a28      	ldr	r2, [pc, #160]	; (8005644 <Out0_Process+0xd8>)
 80055a2:	e02e      	b.n	8005602 <Out0_Process+0x96>
    ControlState = pInformation->ControlState; /* may be changed outside the function */
  }

  else if (ControlState == WAIT_STATUS_OUT)
  {
    (*pProperty->Process_Status_OUT)();
 80055a4:	4828      	ldr	r0, [pc, #160]	; (8005648 <Out0_Process+0xdc>)
 80055a6:	6801      	ldr	r1, [r0, #0]
 80055a8:	68ca      	ldr	r2, [r1, #12]
 80055aa:	4790      	blx	r2
 80055ac:	682c      	ldr	r4, [r5, #0]
 80055ae:	2208      	movs	r2, #8
 80055b0:	e7eb      	b.n	800558a <Out0_Process+0x1e>
  if (pEPinfo->CopyData && save_rLength)
  {
    uint8_t *Buffer;
    uint32_t Length;

    Length = pEPinfo->PacketSize;
 80055b2:	8aa6      	ldrh	r6, [r4, #20]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 80055b4:	4286      	cmp	r6, r0
 80055b6:	bf28      	it	cs
 80055b8:	4606      	movcs	r6, r0
 80055ba:	4630      	mov	r0, r6
 80055bc:	4788      	blx	r1
    pEPinfo->Usb_rLength -= Length;
    pEPinfo->Usb_rOffset += Length;
 80055be:	8a63      	ldrh	r3, [r4, #18]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 80055c0:	4607      	mov	r7, r0
    pEPinfo->Usb_rLength -= Length;
 80055c2:	8a20      	ldrh	r0, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 80055c4:	18f1      	adds	r1, r6, r3
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
    pEPinfo->Usb_rLength -= Length;
 80055c6:	1b82      	subs	r2, r0, r6
 80055c8:	8222      	strh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 80055ca:	8261      	strh	r1, [r4, #18]
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 80055cc:	4b1f      	ldr	r3, [pc, #124]	; (800564c <Out0_Process+0xe0>)
 80055ce:	2000      	movs	r0, #0
 80055d0:	4798      	blx	r3
 80055d2:	4632      	mov	r2, r6
 80055d4:	4601      	mov	r1, r0
 80055d6:	4b1e      	ldr	r3, [pc, #120]	; (8005650 <Out0_Process+0xe4>)
 80055d8:	4638      	mov	r0, r7
 80055da:	4798      	blx	r3
 80055dc:	8a20      	ldrh	r0, [r4, #16]

  }

  if (pEPinfo->Usb_rLength != 0)
 80055de:	2800      	cmp	r0, #0
 80055e0:	d0db      	beq.n	800559a <Out0_Process+0x2e>
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 80055e2:	4b1c      	ldr	r3, [pc, #112]	; (8005654 <Out0_Process+0xe8>)
    SetEPTxCount(ENDP0, 0);
 80055e4:	2000      	movs	r0, #0

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 80055e6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
    SetEPTxCount(ENDP0, 0);
 80055ea:	4601      	mov	r1, r0

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 80055ec:	801a      	strh	r2, [r3, #0]
    SetEPTxCount(ENDP0, 0);
 80055ee:	4a1a      	ldr	r2, [pc, #104]	; (8005658 <Out0_Process+0xec>)
 80055f0:	4790      	blx	r2
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 80055f2:	8a23      	ldrh	r3, [r4, #16]
 80055f4:	8aa1      	ldrh	r1, [r4, #20]

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 80055f6:	4a13      	ldr	r2, [pc, #76]	; (8005644 <Out0_Process+0xd8>)
 80055f8:	2030      	movs	r0, #48	; 0x30
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 80055fa:	4299      	cmp	r1, r3

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 80055fc:	8010      	strh	r0, [r2, #0]
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 80055fe:	d915      	bls.n	800562c <Out0_Process+0xc0>
  {
    pInformation->ControlState = OUT_DATA;
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
 8005600:	b9c3      	cbnz	r3, 8005634 <Out0_Process+0xc8>
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 8005602:	682c      	ldr	r4, [r5, #0]
 8005604:	2106      	movs	r1, #6
      USB_StatusIn();
 8005606:	f645 4350 	movw	r3, #23632	; 0x5c50
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 800560a:	7221      	strb	r1, [r4, #8]
      USB_StatusIn();
 800560c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005610:	6818      	ldr	r0, [r3, #0]
 8005612:	f243 0302 	movw	r3, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8005616:	b281      	uxth	r1, r0
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
      USB_StatusIn();
 8005618:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800561c:	18c8      	adds	r0, r1, r3
 800561e:	0043      	lsls	r3, r0, #1
 8005620:	2100      	movs	r1, #0
 8005622:	6019      	str	r1, [r3, #0]
 8005624:	2030      	movs	r0, #48	; 0x30
 8005626:	8010      	strh	r0, [r2, #0]
 8005628:	7a22      	ldrb	r2, [r4, #8]
    ControlState = STALLED;
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
 800562a:	e7ae      	b.n	800558a <Out0_Process+0x1e>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
  {
    pInformation->ControlState = OUT_DATA;
 800562c:	682c      	ldr	r4, [r5, #0]
 800562e:	2203      	movs	r2, #3
 8005630:	7222      	strb	r2, [r4, #8]
 8005632:	e7aa      	b.n	800558a <Out0_Process+0x1e>
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
    {
      pInformation->ControlState = LAST_OUT_DATA;
 8005634:	682c      	ldr	r4, [r5, #0]
 8005636:	2205      	movs	r2, #5
 8005638:	7222      	strb	r2, [r4, #8]
 800563a:	e7a6      	b.n	800558a <Out0_Process+0x1e>
 800563c:	20001028 	.word	0x20001028
 8005640:	08005525 	.word	0x08005525
 8005644:	20001030 	.word	0x20001030
 8005648:	20001000 	.word	0x20001000
 800564c:	08005dd1 	.word	0x08005dd1
 8005650:	08005bb9 	.word	0x08005bb9
 8005654:	2000102e 	.word	0x2000102e
 8005658:	08005df1 	.word	0x08005df1

0800565c <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 800565c:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800565e:	f645 4350 	movw	r3, #23632	; 0x5c50

  if (pInformation->ControlState != PAUSE)
 8005662:	4d9e      	ldr	r5, [pc, #632]	; (80058dc <Setup0_Process+0x280>)
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8005664:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005668:	681a      	ldr	r2, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 800566a:	682c      	ldr	r4, [r5, #0]
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800566c:	f243 0004 	movw	r0, #12292	; 0x3004
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8005670:	b291      	uxth	r1, r2
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8005672:	f2c2 0000 	movt	r0, #8192	; 0x2000

  if (pInformation->ControlState != PAUSE)
 8005676:	7a22      	ldrb	r2, [r4, #8]
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8005678:	180e      	adds	r6, r1, r0
 800567a:	0073      	lsls	r3, r6, #1

  if (pInformation->ControlState != PAUSE)
 800567c:	2a09      	cmp	r2, #9
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 800567e:	b083      	sub	sp, #12
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8005680:	681e      	ldr	r6, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 8005682:	d044      	beq.n	800570e <Setup0_Process+0xb2>
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8005684:	b2b7      	uxth	r7, r6
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8005686:	0078      	lsls	r0, r7, #1
 8005688:	f100 4180 	add.w	r1, r0, #1073741824	; 0x40000000
 800568c:	f501 46c0 	add.w	r6, r1, #24576	; 0x6000

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 8005690:	7832      	ldrb	r2, [r6, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 8005692:	4f93      	ldr	r7, [pc, #588]	; (80058e0 <Setup0_Process+0x284>)
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 8005694:	7022      	strb	r2, [r4, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 8005696:	7873      	ldrb	r3, [r6, #1]
 8005698:	7063      	strb	r3, [r4, #1]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 800569a:	88b0      	ldrh	r0, [r6, #4]
 800569c:	47b8      	blx	r7
 800569e:	8060      	strh	r0, [r4, #2]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 80056a0:	8930      	ldrh	r0, [r6, #8]
 80056a2:	682c      	ldr	r4, [r5, #0]
 80056a4:	47b8      	blx	r7
 80056a6:	80a0      	strh	r0, [r4, #4]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 80056a8:	89b0      	ldrh	r0, [r6, #12]
 80056aa:	682c      	ldr	r4, [r5, #0]
  }

  pInformation->ControlState = SETTING_UP;
 80056ac:	2101      	movs	r1, #1
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 80056ae:	80e0      	strh	r0, [r4, #6]
  }

  pInformation->ControlState = SETTING_UP;
 80056b0:	7221      	strb	r1, [r4, #8]
  if (pInformation->USBwLength == 0)
 80056b2:	2800      	cmp	r0, #0
 80056b4:	d030      	beq.n	8005718 <Setup0_Process+0xbc>
*******************************************************************************/
void Data_Setup0(void)
{
  uint8_t *(*CopyRoutine)(uint16_t);
  RESULT Result;
  uint32_t Request_No = pInformation->USBbRequest;
 80056b6:	7861      	ldrb	r1, [r4, #1]

  CopyRoutine = NULL;
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
 80056b8:	2906      	cmp	r1, #6
 80056ba:	f000 8087 	beq.w	80057cc <Setup0_Process+0x170>
      }  /* End of GET_DESCRIPTOR */
    }
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 80056be:	2900      	cmp	r1, #0
 80056c0:	d15e      	bne.n	8005780 <Setup0_Process+0x124>
 80056c2:	8863      	ldrh	r3, [r4, #2]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f000 8094 	beq.w	80057f2 <Setup0_Process+0x196>
 80056ca:	4e86      	ldr	r6, [pc, #536]	; (80058e4 <Setup0_Process+0x288>)
    (*CopyRoutine)(0);
    Result = USB_SUCCESS;
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 80056cc:	6833      	ldr	r3, [r6, #0]
 80056ce:	4608      	mov	r0, r1
 80056d0:	6919      	ldr	r1, [r3, #16]
 80056d2:	4788      	blx	r1
    if (Result == USB_NOT_READY)
 80056d4:	2803      	cmp	r0, #3
    {
      pInformation->ControlState = PAUSE;
 80056d6:	682b      	ldr	r3, [r5, #0]
    Result = USB_SUCCESS;
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
    if (Result == USB_NOT_READY)
 80056d8:	d062      	beq.n	80057a0 <Setup0_Process+0x144>
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 80056da:	8a1a      	ldrh	r2, [r3, #16]
 80056dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80056e0:	428a      	cmp	r2, r1
 80056e2:	d05d      	beq.n	80057a0 <Setup0_Process+0x144>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 80056e4:	2802      	cmp	r0, #2
 80056e6:	d00c      	beq.n	8005702 <Setup0_Process+0xa6>
 80056e8:	b15a      	cbz	r2, 8005702 <Setup0_Process+0xa6>
    pInformation->ControlState = STALLED;
    return;
  }


  if (ValBit(pInformation->USBbmRequestType, 7))
 80056ea:	f993 1000 	ldrsb.w	r1, [r3]
 80056ee:	2900      	cmp	r1, #0
 80056f0:	f2c0 80b5 	blt.w	800585e <Setup0_Process+0x202>
    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
    DataStageIn();
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 80056f4:	2203      	movs	r2, #3
 80056f6:	721a      	strb	r2, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 80056f8:	4b7b      	ldr	r3, [pc, #492]	; (80058e8 <Setup0_Process+0x28c>)
 80056fa:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 80056fe:	8018      	strh	r0, [r3, #0]
 8005700:	e001      	b.n	8005706 <Setup0_Process+0xaa>
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
  {
    /* Unsupported request */
    pInformation->ControlState = STALLED;
 8005702:	2008      	movs	r0, #8
 8005704:	7218      	strb	r0, [r3, #8]
  else
  {
    /* Setup with data stage */
    Data_Setup0();
  }
  return Post0_Process();
 8005706:	4b79      	ldr	r3, [pc, #484]	; (80058ec <Setup0_Process+0x290>)
 8005708:	4798      	blx	r3
}
 800570a:	b003      	add	sp, #12
 800570c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800570e:	88e0      	ldrh	r0, [r4, #6]
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
  }

  pInformation->ControlState = SETTING_UP;
 8005710:	2101      	movs	r1, #1
 8005712:	7221      	strb	r1, [r4, #8]
  if (pInformation->USBwLength == 0)
 8005714:	2800      	cmp	r0, #0
 8005716:	d1ce      	bne.n	80056b6 <Setup0_Process+0x5a>
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8005718:	7822      	ldrb	r2, [r4, #0]
* Return         : None.
*******************************************************************************/
void NoData_Setup0(void)
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
 800571a:	7866      	ldrb	r6, [r4, #1]
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800571c:	f012 037f 	ands.w	r3, r2, #127	; 0x7f
 8005720:	d141      	bne.n	80057a6 <Setup0_Process+0x14a>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
 8005722:	2e09      	cmp	r6, #9
 8005724:	f000 8108 	beq.w	8005938 <Setup0_Process+0x2dc>
    {
      Result = Standard_SetConfiguration();
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
 8005728:	2e05      	cmp	r6, #5
 800572a:	f000 80bf 	beq.w	80058ac <Setup0_Process+0x250>
      {
        Result = USB_SUCCESS;
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
 800572e:	2e03      	cmp	r6, #3
 8005730:	f000 80f0 	beq.w	8005914 <Setup0_Process+0x2b8>
      {
        Result = USB_UNSUPPORT;
      }
    }
    /*Clear FEATURE for Device */
    else if (RequestNo == CLEAR_FEATURE)
 8005734:	2e01      	cmp	r6, #1
 8005736:	d13b      	bne.n	80057b0 <Setup0_Process+0x154>
    {
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 8005738:	78e1      	ldrb	r1, [r4, #3]
 800573a:	2901      	cmp	r1, #1
 800573c:	d138      	bne.n	80057b0 <Setup0_Process+0x154>
          && pInformation->USBwIndex == 0
 800573e:	88a2      	ldrh	r2, [r4, #4]
 8005740:	2a00      	cmp	r2, #0
 8005742:	d135      	bne.n	80057b0 <Setup0_Process+0x154>
          && ValBit(pInformation->Current_Feature, 5))
 8005744:	7a63      	ldrb	r3, [r4, #9]
 8005746:	f003 0420 	and.w	r4, r3, #32
 800574a:	b2e0      	uxtb	r0, r4
 800574c:	2800      	cmp	r0, #0
 800574e:	d02f      	beq.n	80057b0 <Setup0_Process+0x154>
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
    {
      Result = Standard_ClearFeature();
 8005750:	4967      	ldr	r1, [pc, #412]	; (80058f0 <Setup0_Process+0x294>)
 8005752:	4788      	blx	r1
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 8005754:	bb60      	cbnz	r0, 80057b0 <Setup0_Process+0x154>
 8005756:	682c      	ldr	r4, [r5, #0]
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 8005758:	f645 4050 	movw	r0, #23632	; 0x5c50
 800575c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8005760:	6801      	ldr	r1, [r0, #0]
 8005762:	f243 0302 	movw	r3, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8005766:	b28a      	uxth	r2, r1
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 8005768:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800576c:	18d0      	adds	r0, r2, r3
 800576e:	0041      	lsls	r1, r0, #1
 8005770:	2300      	movs	r3, #0
 8005772:	4a60      	ldr	r2, [pc, #384]	; (80058f4 <Setup0_Process+0x298>)
 8005774:	600b      	str	r3, [r1, #0]
 8005776:	2030      	movs	r0, #48	; 0x30
 8005778:	2106      	movs	r1, #6
 800577a:	8010      	strh	r0, [r2, #0]

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 800577c:	7221      	strb	r1, [r4, #8]
 800577e:	e7c2      	b.n	8005706 <Setup0_Process+0xaa>
    }

  }

  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
 8005780:	2908      	cmp	r1, #8
 8005782:	d148      	bne.n	8005816 <Setup0_Process+0x1ba>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8005784:	7820      	ldrb	r0, [r4, #0]
 8005786:	0643      	lsls	r3, r0, #25
 8005788:	d19f      	bne.n	80056ca <Setup0_Process+0x6e>
    {
      CopyRoutine = Standard_GetConfiguration;
 800578a:	4a5b      	ldr	r2, [pc, #364]	; (80058f8 <Setup0_Process+0x29c>)

  }
  
  if (CopyRoutine)
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 800578c:	2000      	movs	r0, #0
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 800578e:	61a2      	str	r2, [r4, #24]

  }
  
  if (CopyRoutine)
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8005790:	8260      	strh	r0, [r4, #18]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 8005792:	4790      	blx	r2
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8005794:	682b      	ldr	r3, [r5, #0]
 8005796:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800579a:	8a1a      	ldrh	r2, [r3, #16]
 800579c:	4282      	cmp	r2, r0
 800579e:	d1a3      	bne.n	80056e8 <Setup0_Process+0x8c>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
 80057a0:	2109      	movs	r1, #9
 80057a2:	7219      	strb	r1, [r3, #8]
 80057a4:	e7af      	b.n	8005706 <Setup0_Process+0xaa>
    }

  }

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d071      	beq.n	800588e <Setup0_Process+0x232>
      Result = Standard_SetInterface();
    }
  }

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	f000 808d 	beq.w	80058ca <Setup0_Process+0x26e>
  }


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 80057b0:	494c      	ldr	r1, [pc, #304]	; (80058e4 <Setup0_Process+0x288>)
 80057b2:	4630      	mov	r0, r6
 80057b4:	680a      	ldr	r2, [r1, #0]
 80057b6:	6953      	ldr	r3, [r2, #20]
 80057b8:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 80057ba:	2803      	cmp	r0, #3
 80057bc:	f000 80c5 	beq.w	800594a <Setup0_Process+0x2ee>
 80057c0:	682c      	ldr	r4, [r5, #0]
      ControlState = PAUSE;
      goto exit_NoData_Setup0;
    }
  }

  if (Result != USB_SUCCESS)
 80057c2:	2800      	cmp	r0, #0
 80057c4:	d0c8      	beq.n	8005758 <Setup0_Process+0xfc>
    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
          || (pInformation->USBwIndex != 0)
          || (pInformation->Current_Configuration != 0))
 80057c6:	2108      	movs	r1, #8
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 80057c8:	7221      	strb	r1, [r4, #8]
 80057ca:	e79c      	b.n	8005706 <Setup0_Process+0xaa>
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80057cc:	7826      	ldrb	r6, [r4, #0]
 80057ce:	0673      	lsls	r3, r6, #25
 80057d0:	f47f af7b 	bne.w	80056ca <Setup0_Process+0x6e>
    {
      uint8_t wValue1 = pInformation->USBwValue1;
 80057d4:	78a2      	ldrb	r2, [r4, #2]
      if (wValue1 == DEVICE_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 80057d6:	4e43      	ldr	r6, [pc, #268]	; (80058e4 <Setup0_Process+0x288>)
  if (Request_No == GET_DESCRIPTOR)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      uint8_t wValue1 = pInformation->USBwValue1;
      if (wValue1 == DEVICE_DESCRIPTOR)
 80057d8:	2a01      	cmp	r2, #1
 80057da:	f000 80b0 	beq.w	800593e <Setup0_Process+0x2e2>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
 80057de:	2a02      	cmp	r2, #2
 80057e0:	d05e      	beq.n	80058a0 <Setup0_Process+0x244>
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
      }
      else if (wValue1 == STRING_DESCRIPTOR)
 80057e2:	2a03      	cmp	r2, #3
 80057e4:	f47f af72 	bne.w	80056cc <Setup0_Process+0x70>
      {
        CopyRoutine = pProperty->GetStringDescriptor;
 80057e8:	6830      	ldr	r0, [r6, #0]
 80057ea:	6a42      	ldr	r2, [r0, #36]	; 0x24
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 80057ec:	2a00      	cmp	r2, #0
 80057ee:	d1cd      	bne.n	800578c <Setup0_Process+0x130>
 80057f0:	e76c      	b.n	80056cc <Setup0_Process+0x70>
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
 80057f2:	6860      	ldr	r0, [r4, #4]
 80057f4:	f420 427f 	bic.w	r2, r0, #65280	; 0xff00
 80057f8:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 80057fc:	f47f af65 	bne.w	80056ca <Setup0_Process+0x6e>
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8005800:	7823      	ldrb	r3, [r4, #0]
 8005802:	f013 007f 	ands.w	r0, r3, #127	; 0x7f
 8005806:	f040 80a4 	bne.w	8005952 <Setup0_Process+0x2f6>
        && (pInformation->USBwIndex == 0))
 800580a:	88a3      	ldrh	r3, [r4, #4]
 800580c:	2b00      	cmp	r3, #0
 800580e:	f47f af5c 	bne.w	80056ca <Setup0_Process+0x6e>
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
          && (Status != 0))
      {
        CopyRoutine = Standard_GetStatus;
 8005812:	4a3a      	ldr	r2, [pc, #232]	; (80058fc <Setup0_Process+0x2a0>)
 8005814:	e7ba      	b.n	800578c <Setup0_Process+0x130>
    {
      CopyRoutine = Standard_GetConfiguration;
    }
  }
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
 8005816:	290a      	cmp	r1, #10
 8005818:	f47f af57 	bne.w	80056ca <Setup0_Process+0x6e>
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800581c:	7826      	ldrb	r6, [r4, #0]
 800581e:	f006 027f 	and.w	r2, r6, #127	; 0x7f
 8005822:	2a01      	cmp	r2, #1
 8005824:	f47f af51 	bne.w	80056ca <Setup0_Process+0x6e>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 8005828:	7aa3      	ldrb	r3, [r4, #10]
 800582a:	2b00      	cmp	r3, #0
 800582c:	f43f af4d 	beq.w	80056ca <Setup0_Process+0x6e>
 8005830:	8863      	ldrh	r3, [r4, #2]
 8005832:	2b00      	cmp	r3, #0
 8005834:	f47f af49 	bne.w	80056ca <Setup0_Process+0x6e>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8005838:	6860      	ldr	r0, [r4, #4]
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 800583a:	4e2a      	ldr	r6, [pc, #168]	; (80058e4 <Setup0_Process+0x288>)
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 800583c:	f420 427f 	bic.w	r2, r0, #65280	; 0xff00
 8005840:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005844:	f47f af42 	bne.w	80056cc <Setup0_Process+0x70>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8005848:	6832      	ldr	r2, [r6, #0]
 800584a:	4619      	mov	r1, r3
 800584c:	7960      	ldrb	r0, [r4, #5]
 800584e:	6993      	ldr	r3, [r2, #24]
 8005850:	4798      	blx	r3
 8005852:	2800      	cmp	r0, #0
 8005854:	f040 80b8 	bne.w	80059c8 <Setup0_Process+0x36c>
 8005858:	682c      	ldr	r4, [r5, #0]
    {
      CopyRoutine = Standard_GetInterface;
 800585a:	4a29      	ldr	r2, [pc, #164]	; (8005900 <Setup0_Process+0x2a4>)
 800585c:	e796      	b.n	800578c <Setup0_Process+0x130>


  if (ValBit(pInformation->USBbmRequestType, 7))
  {
    /* Device ==> Host */
    __IO uint32_t wLength = pInformation->USBwLength;
 800585e:	88d9      	ldrh	r1, [r3, #6]
 8005860:	9101      	str	r1, [sp, #4]
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 8005862:	9801      	ldr	r0, [sp, #4]
 8005864:	4282      	cmp	r2, r0
 8005866:	d817      	bhi.n	8005898 <Setup0_Process+0x23c>
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 8005868:	428a      	cmp	r2, r1
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 800586a:	491e      	ldr	r1, [pc, #120]	; (80058e4 <Setup0_Process+0x288>)
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 800586c:	d208      	bcs.n	8005880 <Setup0_Process+0x224>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 800586e:	6808      	ldr	r0, [r1, #0]
 8005870:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8005874:	4282      	cmp	r2, r0
 8005876:	f080 808f 	bcs.w	8005998 <Setup0_Process+0x33c>
      {
        Data_Mul_MaxPacketSize = FALSE;
 800587a:	4a22      	ldr	r2, [pc, #136]	; (8005904 <Setup0_Process+0x2a8>)
 800587c:	2000      	movs	r0, #0
 800587e:	7010      	strb	r0, [r2, #0]
      {
        Data_Mul_MaxPacketSize = TRUE;
      }
    }   

    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 8005880:	6809      	ldr	r1, [r1, #0]
 8005882:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
 8005886:	829a      	strh	r2, [r3, #20]
    DataStageIn();
 8005888:	4b1f      	ldr	r3, [pc, #124]	; (8005908 <Setup0_Process+0x2ac>)
 800588a:	4798      	blx	r3
 800588c:	e73b      	b.n	8005706 <Setup0_Process+0xaa>

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
  {
    /*SET INTERFACE*/
    if (RequestNo == SET_INTERFACE)
 800588e:	2e0b      	cmp	r6, #11
 8005890:	d18e      	bne.n	80057b0 <Setup0_Process+0x154>
    {
      Result = Standard_SetInterface();
 8005892:	481e      	ldr	r0, [pc, #120]	; (800590c <Setup0_Process+0x2b0>)
 8005894:	4780      	blx	r0
 8005896:	e75d      	b.n	8005754 <Setup0_Process+0xf8>
    __IO uint32_t wLength = pInformation->USBwLength;
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 8005898:	9801      	ldr	r0, [sp, #4]
 800589a:	4912      	ldr	r1, [pc, #72]	; (80058e4 <Setup0_Process+0x288>)
 800589c:	8218      	strh	r0, [r3, #16]
 800589e:	e7ef      	b.n	8005880 <Setup0_Process+0x224>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
 80058a0:	6833      	ldr	r3, [r6, #0]
 80058a2:	6a1a      	ldr	r2, [r3, #32]
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 80058a4:	2a00      	cmp	r2, #0
 80058a6:	f47f af71 	bne.w	800578c <Setup0_Process+0x130>
 80058aa:	e70f      	b.n	80056cc <Setup0_Process+0x70>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 80058ac:	f994 0003 	ldrsb.w	r0, [r4, #3]
 80058b0:	2800      	cmp	r0, #0
 80058b2:	db88      	blt.n	80057c6 <Setup0_Process+0x16a>
 80058b4:	78a1      	ldrb	r1, [r4, #2]
 80058b6:	2900      	cmp	r1, #0
 80058b8:	d185      	bne.n	80057c6 <Setup0_Process+0x16a>
          || (pInformation->USBwIndex != 0)
 80058ba:	88a2      	ldrh	r2, [r4, #4]
 80058bc:	2a00      	cmp	r2, #0
 80058be:	d182      	bne.n	80057c6 <Setup0_Process+0x16a>
          || (pInformation->Current_Configuration != 0))
 80058c0:	7aa3      	ldrb	r3, [r4, #10]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f43f af48 	beq.w	8005758 <Setup0_Process+0xfc>
 80058c8:	e77d      	b.n	80057c6 <Setup0_Process+0x16a>

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
 80058ca:	2e01      	cmp	r6, #1
 80058cc:	f43f af40 	beq.w	8005750 <Setup0_Process+0xf4>
    {
      Result = Standard_ClearFeature();
    }
    /* SET FEATURE for EndPoint*/
    else if (RequestNo == SET_FEATURE)
 80058d0:	2e03      	cmp	r6, #3
 80058d2:	f47f af6d 	bne.w	80057b0 <Setup0_Process+0x154>
    {
      Result = Standard_SetEndPointFeature();
 80058d6:	4c0e      	ldr	r4, [pc, #56]	; (8005910 <Setup0_Process+0x2b4>)
 80058d8:	47a0      	blx	r4
 80058da:	e73b      	b.n	8005754 <Setup0_Process+0xf8>
 80058dc:	20001028 	.word	0x20001028
 80058e0:	08005e79 	.word	0x08005e79
 80058e4:	20001000 	.word	0x20001000
 80058e8:	2000102e 	.word	0x2000102e
 80058ec:	08005525 	.word	0x08005525
 80058f0:	08005379 	.word	0x08005379
 80058f4:	20001030 	.word	0x20001030
 80058f8:	0800513d 	.word	0x0800513d
 80058fc:	0800518d 	.word	0x0800518d
 8005900:	08005165 	.word	0x08005165
 8005904:	200002b0 	.word	0x200002b0
 8005908:	0800522d 	.word	0x0800522d
 800590c:	08005329 	.word	0x08005329
 8005910:	08005471 	.word	0x08005471
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP) \
 8005914:	78e2      	ldrb	r2, [r4, #3]
 8005916:	2a01      	cmp	r2, #1
 8005918:	f47f af4a 	bne.w	80057b0 <Setup0_Process+0x154>
          && (pInformation->USBwIndex == 0))
 800591c:	88a3      	ldrh	r3, [r4, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	f47f af46 	bne.w	80057b0 <Setup0_Process+0x154>
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8005924:	7a60      	ldrb	r0, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8005926:	4a2a      	ldr	r2, [pc, #168]	; (80059d0 <Setup0_Process+0x374>)
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8005928:	f040 0120 	orr.w	r1, r0, #32
  pUser_Standard_Requests->User_SetDeviceFeature();
 800592c:	6813      	ldr	r3, [r2, #0]
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 800592e:	7261      	strb	r1, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8005930:	69dc      	ldr	r4, [r3, #28]
 8005932:	47a0      	blx	r4
 8005934:	682c      	ldr	r4, [r5, #0]
 8005936:	e70f      	b.n	8005758 <Setup0_Process+0xfc>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
    {
      Result = Standard_SetConfiguration();
 8005938:	4c26      	ldr	r4, [pc, #152]	; (80059d4 <Setup0_Process+0x378>)
 800593a:	47a0      	blx	r4
 800593c:	e70a      	b.n	8005754 <Setup0_Process+0xf8>
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      uint8_t wValue1 = pInformation->USBwValue1;
      if (wValue1 == DEVICE_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 800593e:	6832      	ldr	r2, [r6, #0]
 8005940:	69d2      	ldr	r2, [r2, #28]
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 8005942:	2a00      	cmp	r2, #0
 8005944:	f47f af22 	bne.w	800578c <Setup0_Process+0x130>
 8005948:	e6c0      	b.n	80056cc <Setup0_Process+0x70>
 800594a:	682c      	ldr	r4, [r5, #0]


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
    if (Result == USB_NOT_READY)
 800594c:	2109      	movs	r1, #9
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 800594e:	7221      	strb	r1, [r4, #8]
 8005950:	e6d9      	b.n	8005706 <Setup0_Process+0xaa>
    {
      CopyRoutine = Standard_GetStatus;
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8005952:	2801      	cmp	r0, #1
 8005954:	d02b      	beq.n	80059ae <Setup0_Process+0x352>
        CopyRoutine = Standard_GetStatus;
      }
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8005956:	2802      	cmp	r0, #2
 8005958:	f47f aeb7 	bne.w	80056ca <Setup0_Process+0x6e>
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 800595c:	7963      	ldrb	r3, [r4, #5]
 800595e:	f003 020f 	and.w	r2, r3, #15

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8005962:	0096      	lsls	r6, r2, #2
 8005964:	f106 4080 	add.w	r0, r6, #1073741824	; 0x40000000
 8005968:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
      Reserved = pInformation->USBwIndex0 & 0x70;

      if (ValBit(pInformation->USBwIndex0, 7))
 800596c:	061e      	lsls	r6, r3, #24
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 800596e:	bf56      	itet	pl
 8005970:	6800      	ldrpl	r0, [r0, #0]

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8005972:	6806      	ldrmi	r6, [r0, #0]
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 8005974:	f400 5640 	andpl.w	r6, r0, #12288	; 0x3000
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8005978:	4817      	ldr	r0, [pc, #92]	; (80059d8 <Setup0_Process+0x37c>)

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 800597a:	bf48      	it	mi
 800597c:	f006 0630 	andmi.w	r6, r6, #48	; 0x30
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8005980:	7800      	ldrb	r0, [r0, #0]
 8005982:	4282      	cmp	r2, r0
 8005984:	f4bf aea1 	bcs.w	80056ca <Setup0_Process+0x6e>
 8005988:	f013 0f70 	tst.w	r3, #112	; 0x70
 800598c:	f47f ae9d 	bne.w	80056ca <Setup0_Process+0x6e>
          && (Status != 0))
 8005990:	2e00      	cmp	r6, #0
 8005992:	f47f af3e 	bne.w	8005812 <Setup0_Process+0x1b6>
 8005996:	e698      	b.n	80056ca <Setup0_Process+0x6e>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
      {
        Data_Mul_MaxPacketSize = FALSE;
      }
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 8005998:	fb92 f4f0 	sdiv	r4, r2, r0
 800599c:	fb00 2214 	mls	r2, r0, r4, r2
 80059a0:	2a00      	cmp	r2, #0
 80059a2:	f47f af6d 	bne.w	8005880 <Setup0_Process+0x224>
      {
        Data_Mul_MaxPacketSize = TRUE;
 80059a6:	4a0d      	ldr	r2, [pc, #52]	; (80059dc <Setup0_Process+0x380>)
 80059a8:	2001      	movs	r0, #1
 80059aa:	7010      	strb	r0, [r2, #0]
 80059ac:	e768      	b.n	8005880 <Setup0_Process+0x224>
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
    {
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 80059ae:	4e0c      	ldr	r6, [pc, #48]	; (80059e0 <Setup0_Process+0x384>)
 80059b0:	7960      	ldrb	r0, [r4, #5]
 80059b2:	6833      	ldr	r3, [r6, #0]
 80059b4:	699a      	ldr	r2, [r3, #24]
 80059b6:	4790      	blx	r2
 80059b8:	b930      	cbnz	r0, 80059c8 <Setup0_Process+0x36c>
          && (pInformation->Current_Configuration != 0))
 80059ba:	682c      	ldr	r4, [r5, #0]
 80059bc:	7aa0      	ldrb	r0, [r4, #10]
 80059be:	2800      	cmp	r0, #0
 80059c0:	f47f af27 	bne.w	8005812 <Setup0_Process+0x1b6>
 80059c4:	7861      	ldrb	r1, [r4, #1]
 80059c6:	e681      	b.n	80056cc <Setup0_Process+0x70>
 80059c8:	6829      	ldr	r1, [r5, #0]
 80059ca:	7849      	ldrb	r1, [r1, #1]
 80059cc:	e67e      	b.n	80056cc <Setup0_Process+0x70>
 80059ce:	bf00      	nop
 80059d0:	20001024 	.word	0x20001024
 80059d4:	080052ed 	.word	0x080052ed
 80059d8:	200000e0 	.word	0x200000e0
 80059dc:	200002b0 	.word	0x200002b0
 80059e0:	20001000 	.word	0x20001000

080059e4 <SetDeviceAddress>:
* Input          : - Val: device address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(uint8_t Val)
{
 80059e4:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;
 80059e6:	4b28      	ldr	r3, [pc, #160]	; (8005a88 <SetDeviceAddress+0xa4>)
 80059e8:	781e      	ldrb	r6, [r3, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 80059ea:	2e00      	cmp	r6, #0
 80059ec:	d043      	beq.n	8005a76 <SetDeviceAddress+0x92>
 80059ee:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 80059f2:	f2c4 0200 	movt	r2, #16384	; 0x4000
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 80059f6:	6814      	ldr	r4, [r2, #0]
 80059f8:	f640 710f 	movw	r1, #3855	; 0xf0f
 80059fc:	4021      	ands	r1, r4
 80059fe:	f441 4300 	orr.w	r3, r1, #32768	; 0x8000
 8005a02:	f043 0180 	orr.w	r1, r3, #128	; 0x80
 8005a06:	6011      	str	r1, [r2, #0]
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8005a08:	2201      	movs	r2, #1
 8005a0a:	1e74      	subs	r4, r6, #1
 8005a0c:	f645 4304 	movw	r3, #23556	; 0x5c04
 8005a10:	4296      	cmp	r6, r2
 8005a12:	f004 0401 	and.w	r4, r4, #1
 8005a16:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005a1a:	d92c      	bls.n	8005a76 <SetDeviceAddress+0x92>
 8005a1c:	b17c      	cbz	r4, 8005a3e <SetDeviceAddress+0x5a>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8005a1e:	6819      	ldr	r1, [r3, #0]
 8005a20:	f640 720f 	movw	r2, #3855	; 0xf0f
 8005a24:	400a      	ands	r2, r1
 8005a26:	f442 4100 	orr.w	r1, r2, #32768	; 0x8000
 8005a2a:	f041 0281 	orr.w	r2, r1, #129	; 0x81
 8005a2e:	601a      	str	r2, [r3, #0]
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8005a30:	2202      	movs	r2, #2
 8005a32:	f645 4308 	movw	r3, #23560	; 0x5c08
 8005a36:	4296      	cmp	r6, r2
 8005a38:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005a3c:	d91b      	bls.n	8005a76 <SetDeviceAddress+0x92>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8005a3e:	681f      	ldr	r7, [r3, #0]
 8005a40:	f442 4500 	orr.w	r5, r2, #32768	; 0x8000
 8005a44:	f640 740f 	movw	r4, #3855	; 0xf0f
 8005a48:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8005a4c:	403c      	ands	r4, r7
 8005a4e:	ea45 0704 	orr.w	r7, r5, r4
 8005a52:	4619      	mov	r1, r3
 8005a54:	f841 7b04 	str.w	r7, [r1], #4
 8005a58:	685f      	ldr	r7, [r3, #4]
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8005a5a:	3201      	adds	r2, #1
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8005a5c:	f442 4500 	orr.w	r5, r2, #32768	; 0x8000
 8005a60:	f640 740f 	movw	r4, #3855	; 0xf0f
 8005a64:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8005a68:	403c      	ands	r4, r7
 8005a6a:	432c      	orrs	r4, r5
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8005a6c:	3201      	adds	r2, #1
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8005a6e:	605c      	str	r4, [r3, #4]
 8005a70:	1d0b      	adds	r3, r1, #4
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8005a72:	4296      	cmp	r6, r2
 8005a74:	d8e3      	bhi.n	8005a3e <SetDeviceAddress+0x5a>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */ 
 8005a76:	f645 434c 	movw	r3, #23628	; 0x5c4c
 8005a7a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8005a7e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005a82:	6018      	str	r0, [r3, #0]
}
 8005a84:	bcf0      	pop	{r4, r5, r6, r7}
 8005a86:	4770      	bx	lr
 8005a88:	200000e0 	.word	0x200000e0

08005a8c <In0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t In0_Process(void)
{
 8005a8c:	b510      	push	{r4, lr}
  uint32_t ControlState = pInformation->ControlState;
 8005a8e:	4c14      	ldr	r4, [pc, #80]	; (8005ae0 <In0_Process+0x54>)
 8005a90:	6823      	ldr	r3, [r4, #0]
 8005a92:	7a1a      	ldrb	r2, [r3, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 8005a94:	2a02      	cmp	r2, #2
 8005a96:	d012      	beq.n	8005abe <In0_Process+0x32>
 8005a98:	2a04      	cmp	r2, #4
 8005a9a:	d010      	beq.n	8005abe <In0_Process+0x32>
    DataStageIn();
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
 8005a9c:	2a06      	cmp	r2, #6
 8005a9e:	d004      	beq.n	8005aaa <In0_Process+0x1e>
 8005aa0:	2008      	movs	r0, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 8005aa2:	7218      	strb	r0, [r3, #8]

  return Post0_Process();
 8005aa4:	4b0f      	ldr	r3, [pc, #60]	; (8005ae4 <In0_Process+0x58>)
 8005aa6:	4798      	blx	r3
}
 8005aa8:	bd10      	pop	{r4, pc}
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8005aaa:	7859      	ldrb	r1, [r3, #1]
 8005aac:	2905      	cmp	r1, #5
 8005aae:	d00b      	beq.n	8005ac8 <In0_Process+0x3c>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
      pUser_Standard_Requests->User_SetDeviceAddress();
    }
    (*pProperty->Process_Status_IN)();
 8005ab0:	4b0d      	ldr	r3, [pc, #52]	; (8005ae8 <In0_Process+0x5c>)
 8005ab2:	6818      	ldr	r0, [r3, #0]
 8005ab4:	6881      	ldr	r1, [r0, #8]
 8005ab6:	4788      	blx	r1
 8005ab8:	6823      	ldr	r3, [r4, #0]
 8005aba:	2008      	movs	r0, #8
 8005abc:	e7f1      	b.n	8005aa2 <In0_Process+0x16>
{
  uint32_t ControlState = pInformation->ControlState;

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
  {
    DataStageIn();
 8005abe:	4a0b      	ldr	r2, [pc, #44]	; (8005aec <In0_Process+0x60>)
 8005ac0:	4790      	blx	r2
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
 8005ac2:	6823      	ldr	r3, [r4, #0]
 8005ac4:	7a18      	ldrb	r0, [r3, #8]
 8005ac6:	e7ec      	b.n	8005aa2 <In0_Process+0x16>
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
 8005ac8:	781a      	ldrb	r2, [r3, #0]
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8005aca:	0652      	lsls	r2, r2, #25
 8005acc:	d1f0      	bne.n	8005ab0 <In0_Process+0x24>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
 8005ace:	78d8      	ldrb	r0, [r3, #3]
 8005ad0:	4b07      	ldr	r3, [pc, #28]	; (8005af0 <In0_Process+0x64>)
 8005ad2:	4798      	blx	r3
      pUser_Standard_Requests->User_SetDeviceAddress();
 8005ad4:	4807      	ldr	r0, [pc, #28]	; (8005af4 <In0_Process+0x68>)
 8005ad6:	6801      	ldr	r1, [r0, #0]
 8005ad8:	6a0a      	ldr	r2, [r1, #32]
 8005ada:	4790      	blx	r2
 8005adc:	e7e8      	b.n	8005ab0 <In0_Process+0x24>
 8005ade:	bf00      	nop
 8005ae0:	20001028 	.word	0x20001028
 8005ae4:	08005525 	.word	0x08005525
 8005ae8:	20001000 	.word	0x20001000
 8005aec:	0800522d 	.word	0x0800522d
 8005af0:	080059e5 	.word	0x080059e5
 8005af4:	20001024 	.word	0x20001024

08005af8 <NOP_Process>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop

08005afc <USB_Init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
 8005afc:	b510      	push	{r4, lr}
  pInformation = &Device_Info;
 8005afe:	f241 0208 	movw	r2, #4104	; 0x1008
 8005b02:	f241 0428 	movw	r4, #4136	; 0x1028
 8005b06:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8005b0a:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8005b0e:	6022      	str	r2, [r4, #0]
  pInformation->ControlState = 2;
 8005b10:	2402      	movs	r4, #2
 8005b12:	7214      	strb	r4, [r2, #8]
  pProperty = &Device_Property;
 8005b14:	f241 0000 	movw	r0, #4096	; 0x1000
 8005b18:	f240 035c 	movw	r3, #92	; 0x5c
  pUser_Standard_Requests = &User_Standard_Requests;
 8005b1c:	f241 0124 	movw	r1, #4132	; 0x1024
 8005b20:	f240 028c 	movw	r2, #140	; 0x8c
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
 8005b24:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005b28:	f2c2 0000 	movt	r0, #8192	; 0x2000
  pUser_Standard_Requests = &User_Standard_Requests;
 8005b2c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8005b30:	f2c2 0200 	movt	r2, #8192	; 0x2000
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
 8005b34:	6003      	str	r3, [r0, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 8005b36:	600a      	str	r2, [r1, #0]
  /* Initialize devices one by one */
  pProperty->Init();
 8005b38:	6818      	ldr	r0, [r3, #0]
 8005b3a:	4780      	blx	r0
 8005b3c:	bd10      	pop	{r4, pc}
 8005b3e:	bf00      	nop

08005b40 <UserToPMABufferCopy>:
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 8005b40:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 8005b44:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8005b48:	1c53      	adds	r3, r2, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 8005b4a:	004a      	lsls	r2, r1, #1
  for (i = n; i != 0; i--)
 8005b4c:	1059      	asrs	r1, r3, #1
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005b4e:	b430      	push	{r4, r5}
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8005b50:	d02f      	beq.n	8005bb2 <UserToPMABufferCopy+0x72>
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8005b52:	7845      	ldrb	r5, [r0, #1]
*                  - wPMABufAddr: address into PMA.
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
 8005b54:	3002      	adds	r0, #2
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8005b56:	f810 4c02 	ldrb.w	r4, [r0, #-2]
 8005b5a:	3901      	subs	r1, #1
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8005b5c:	ea44 2305 	orr.w	r3, r4, r5, lsl #8
    *pdwVal++ = temp2;
 8005b60:	f822 3b04 	strh.w	r3, [r2], #4
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8005b64:	460b      	mov	r3, r1
 8005b66:	3204      	adds	r2, #4
 8005b68:	f001 0101 	and.w	r1, r1, #1
 8005b6c:	3002      	adds	r0, #2
 8005b6e:	b303      	cbz	r3, 8005bb2 <UserToPMABufferCopy+0x72>
 8005b70:	b159      	cbz	r1, 8005b8a <UserToPMABufferCopy+0x4a>
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8005b72:	f810 4c01 	ldrb.w	r4, [r0, #-1]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8005b76:	f810 1c02 	ldrb.w	r1, [r0, #-2]
 8005b7a:	3002      	adds	r0, #2
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8005b7c:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    *pdwVal++ = temp2;
 8005b80:	f822 1c04 	strh.w	r1, [r2, #-4]
 8005b84:	3204      	adds	r2, #4
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8005b86:	3b01      	subs	r3, #1
 8005b88:	d013      	beq.n	8005bb2 <UserToPMABufferCopy+0x72>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8005b8a:	f810 1c02 	ldrb.w	r1, [r0, #-2]
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8005b8e:	f810 4c01 	ldrb.w	r4, [r0, #-1]
 8005b92:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
    *pdwVal++ = temp2;
 8005b96:	f822 4c04 	strh.w	r4, [r2, #-4]
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8005b9a:	7844      	ldrb	r4, [r0, #1]
 8005b9c:	3002      	adds	r0, #2
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8005b9e:	f810 1c02 	ldrb.w	r1, [r0, #-2]
 8005ba2:	3002      	adds	r0, #2
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8005ba4:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    *pdwVal++ = temp2;
 8005ba8:	f822 1b04 	strh.w	r1, [r2], #4
 8005bac:	3204      	adds	r2, #4
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8005bae:	3b02      	subs	r3, #2
 8005bb0:	d1eb      	bne.n	8005b8a <UserToPMABufferCopy+0x4a>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 8005bb2:	bc30      	pop	{r4, r5}
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop

08005bb8 <PMAToUserBufferCopy>:
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 8005bb8:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 8005bbc:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8005bc0:	3201      	adds	r2, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 8005bc2:	0059      	lsls	r1, r3, #1
  for (i = n; i != 0; i--)
 8005bc4:	1052      	asrs	r2, r2, #1
*                  - wNBytes     = no. of bytes to be copied.
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005bc6:	b430      	push	{r4, r5}
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8005bc8:	d01c      	beq.n	8005c04 <PMAToUserBufferCopy+0x4c>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8005bca:	680b      	ldr	r3, [r1, #0]
 8005bcc:	3a01      	subs	r2, #1
 8005bce:	f820 3b02 	strh.w	r3, [r0], #2
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	3002      	adds	r0, #2
 8005bd6:	f002 0201 	and.w	r2, r2, #1
 8005bda:	b19b      	cbz	r3, 8005c04 <PMAToUserBufferCopy+0x4c>
 8005bdc:	b132      	cbz	r2, 8005bec <PMAToUserBufferCopy+0x34>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8005bde:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8005be2:	f820 2c02 	strh.w	r2, [r0, #-2]
 8005be6:	3002      	adds	r0, #2
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8005be8:	3b01      	subs	r3, #1
 8005bea:	d00b      	beq.n	8005c04 <PMAToUserBufferCopy+0x4c>
 8005bec:	1d0c      	adds	r4, r1, #4
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8005bee:	684d      	ldr	r5, [r1, #4]
 8005bf0:	6889      	ldr	r1, [r1, #8]
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	f820 5c02 	strh.w	r5, [r0, #-2]
 8005bf8:	f822 1b02 	strh.w	r1, [r2], #2
 8005bfc:	1c90      	adds	r0, r2, #2
 8005bfe:	1d21      	adds	r1, r4, #4
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8005c00:	3b02      	subs	r3, #2
 8005c02:	d1f3      	bne.n	8005bec <PMAToUserBufferCopy+0x34>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 8005c04:	bc30      	pop	{r4, r5}
 8005c06:	4770      	bx	lr

08005c08 <SetBTABLE>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetBTABLE(uint16_t wRegValue)
{
  _SetBTABLE(wRegValue);
 8005c08:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8005c0c:	f645 4250 	movw	r2, #23632	; 0x5c50
 8005c10:	4003      	ands	r3, r0
 8005c12:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8005c16:	6013      	str	r3, [r2, #0]
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop

08005c1c <SetEPType>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPType(uint8_t bEpNum, uint16_t wType)
{
  _SetEPType(bEpNum, wType);
 8005c1c:	0080      	lsls	r0, r0, #2
 8005c1e:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8005c22:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8005c26:	6810      	ldr	r0, [r2, #0]
 8005c28:	f648 138f 	movw	r3, #35215	; 0x898f
 8005c2c:	4003      	ands	r3, r0
 8005c2e:	4319      	orrs	r1, r3
 8005c30:	6011      	str	r1, [r2, #0]
 8005c32:	4770      	bx	lr

08005c34 <SetEPTxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 8005c34:	0080      	lsls	r0, r0, #2
 8005c36:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8005c3a:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
 8005c3e:	b410      	push	{r4}
  _SetEPTxStatus(bEpNum, wState);
 8005c40:	f001 0010 	and.w	r0, r1, #16
 8005c44:	6814      	ldr	r4, [r2, #0]
 8005c46:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 8005c4a:	b280      	uxth	r0, r0
 8005c4c:	4023      	ands	r3, r4
 8005c4e:	b968      	cbnz	r0, 8005c6c <SetEPTxStatus+0x38>
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	f001 0120 	and.w	r1, r1, #32
 8005c56:	b288      	uxth	r0, r1
 8005c58:	b108      	cbz	r0, 8005c5e <SetEPTxStatus+0x2a>
 8005c5a:	f083 0320 	eor.w	r3, r3, #32
 8005c5e:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8005c62:	f041 0080 	orr.w	r0, r1, #128	; 0x80
 8005c66:	6010      	str	r0, [r2, #0]
}
 8005c68:	bc10      	pop	{r4}
 8005c6a:	4770      	bx	lr
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 8005c6c:	f083 0310 	eor.w	r3, r3, #16
 8005c70:	e7ef      	b.n	8005c52 <SetEPTxStatus+0x1e>
 8005c72:	bf00      	nop

08005c74 <SetEPRxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 8005c74:	0080      	lsls	r0, r0, #2
 8005c76:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8005c7a:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
 8005c7e:	b410      	push	{r4}
  _SetEPRxStatus(bEpNum, wState);
 8005c80:	f401 5080 	and.w	r0, r1, #4096	; 0x1000
 8005c84:	6814      	ldr	r4, [r2, #0]
 8005c86:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 8005c8a:	b280      	uxth	r0, r0
 8005c8c:	4023      	ands	r3, r4
 8005c8e:	b968      	cbnz	r0, 8005cac <SetEPRxStatus+0x38>
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8005c96:	b288      	uxth	r0, r1
 8005c98:	b108      	cbz	r0, 8005c9e <SetEPRxStatus+0x2a>
 8005c9a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005c9e:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8005ca2:	f041 0080 	orr.w	r0, r1, #128	; 0x80
 8005ca6:	6010      	str	r0, [r2, #0]
}
 8005ca8:	bc10      	pop	{r4}
 8005caa:	4770      	bx	lr
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 8005cac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005cb0:	e7ef      	b.n	8005c92 <SetEPRxStatus+0x1e>
 8005cb2:	bf00      	nop

08005cb4 <SetEPTxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxValid(uint8_t bEpNum)
{
  _SetEPTxStatus(bEpNum, EP_TX_VALID);
 8005cb4:	0080      	lsls	r0, r0, #2
 8005cb6:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8005cba:	f502 40b8 	add.w	r0, r2, #23552	; 0x5c00
 8005cbe:	6801      	ldr	r1, [r0, #0]
 8005cc0:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 8005cc4:	400b      	ands	r3, r1
 8005cc6:	f083 0230 	eor.w	r2, r3, #48	; 0x30
 8005cca:	f442 4100 	orr.w	r1, r2, #32768	; 0x8000
 8005cce:	f041 0380 	orr.w	r3, r1, #128	; 0x80
 8005cd2:	6003      	str	r3, [r0, #0]
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop

08005cd8 <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(uint8_t bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 8005cd8:	0080      	lsls	r0, r0, #2
 8005cda:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8005cde:	f502 40b8 	add.w	r0, r2, #23552	; 0x5c00
 8005ce2:	6801      	ldr	r1, [r0, #0]
 8005ce4:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 8005ce8:	400b      	ands	r3, r1
 8005cea:	f483 5240 	eor.w	r2, r3, #12288	; 0x3000
 8005cee:	f442 4100 	orr.w	r1, r2, #32768	; 0x8000
 8005cf2:	f041 0380 	orr.w	r3, r1, #128	; 0x80
 8005cf6:	6003      	str	r3, [r0, #0]
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop

08005cfc <Clear_Status_Out>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Clear_Status_Out(uint8_t bEpNum)
{
  _ClearEP_KIND(bEpNum);
 8005cfc:	0080      	lsls	r0, r0, #2
 8005cfe:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8005d02:	f502 40b8 	add.w	r0, r2, #23552	; 0x5c00
 8005d06:	6801      	ldr	r1, [r0, #0]
 8005d08:	f640 630f 	movw	r3, #3599	; 0xe0f
 8005d0c:	400b      	ands	r3, r1
 8005d0e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8005d12:	f042 0180 	orr.w	r1, r2, #128	; 0x80
 8005d16:	6001      	str	r1, [r0, #0]
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop

08005d1c <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(uint8_t bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 8005d1c:	0080      	lsls	r0, r0, #2
 8005d1e:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 8005d22:	f503 40b8 	add.w	r0, r3, #23552	; 0x5c00
 8005d26:	6802      	ldr	r2, [r0, #0]
 8005d28:	0451      	lsls	r1, r2, #17
 8005d2a:	d508      	bpl.n	8005d3e <ClearDTOG_RX+0x22>
 8005d2c:	6801      	ldr	r1, [r0, #0]
 8005d2e:	f640 730f 	movw	r3, #3855	; 0xf0f
 8005d32:	400b      	ands	r3, r1
 8005d34:	f443 4240 	orr.w	r2, r3, #49152	; 0xc000
 8005d38:	f042 0180 	orr.w	r1, r2, #128	; 0x80
 8005d3c:	6001      	str	r1, [r0, #0]
 8005d3e:	4770      	bx	lr

08005d40 <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(uint8_t bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 8005d40:	0080      	lsls	r0, r0, #2
 8005d42:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 8005d46:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	0650      	lsls	r0, r2, #25
 8005d4e:	d508      	bpl.n	8005d62 <ClearDTOG_TX+0x22>
 8005d50:	6819      	ldr	r1, [r3, #0]
 8005d52:	f640 700f 	movw	r0, #3855	; 0xf0f
 8005d56:	4008      	ands	r0, r1
 8005d58:	f440 4200 	orr.w	r2, r0, #32768	; 0x8000
 8005d5c:	f042 01c0 	orr.w	r1, r2, #192	; 0xc0
 8005d60:	6019      	str	r1, [r3, #0]
 8005d62:	4770      	bx	lr

08005d64 <SetEPTxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 8005d64:	f645 4350 	movw	r3, #23632	; 0x5c50
 8005d68:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8005d72:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 8005d74:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8005d78:	f100 5200 	add.w	r2, r0, #536870912	; 0x20000000
 8005d7c:	f502 5040 	add.w	r0, r2, #12288	; 0x3000
 8005d80:	0042      	lsls	r2, r0, #1
 8005d82:	400b      	ands	r3, r1
 8005d84:	6013      	str	r3, [r2, #0]
 8005d86:	4770      	bx	lr

08005d88 <SetEPRxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 8005d88:	f645 4350 	movw	r3, #23632	; 0x5c50
 8005d8c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	f243 0304 	movw	r3, #12292	; 0x3004
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8005d96:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 8005d98:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8005d9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005da0:	18c3      	adds	r3, r0, r3
 8005da2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005da6:	0058      	lsls	r0, r3, #1
 8005da8:	400a      	ands	r2, r1
 8005daa:	6002      	str	r2, [r0, #0]
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop

08005db0 <GetEPTxAddr>:
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 8005db0:	f645 4350 	movw	r3, #23632	; 0x5c50
 8005db4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005db8:	6819      	ldr	r1, [r3, #0]
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8005dba:	b28a      	uxth	r2, r1
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 8005dbc:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8005dc0:	f100 5300 	add.w	r3, r0, #536870912	; 0x20000000
 8005dc4:	f503 5140 	add.w	r1, r3, #12288	; 0x3000
 8005dc8:	004a      	lsls	r2, r1, #1
}
 8005dca:	8810      	ldrh	r0, [r2, #0]
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop

08005dd0 <GetEPRxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 8005dd0:	f645 4350 	movw	r3, #23632	; 0x5c50
 8005dd4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	f243 0104 	movw	r1, #12292	; 0x3004
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8005dde:	b293      	uxth	r3, r2
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 8005de0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8005de4:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8005de8:	1842      	adds	r2, r0, r1
 8005dea:	0051      	lsls	r1, r2, #1
}
 8005dec:	8808      	ldrh	r0, [r1, #0]
 8005dee:	4770      	bx	lr

08005df0 <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 8005df0:	f645 4350 	movw	r3, #23632	; 0x5c50
 8005df4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	f243 0302 	movw	r3, #12290	; 0x3002
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8005dfe:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 8005e00:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8005e04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005e08:	18c3      	adds	r3, r0, r3
 8005e0a:	005a      	lsls	r2, r3, #1
 8005e0c:	6011      	str	r1, [r2, #0]
 8005e0e:	4770      	bx	lr

08005e10 <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 8005e10:	f645 4350 	movw	r3, #23632	; 0x5c50
 8005e14:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	f243 0306 	movw	r3, #12294	; 0x3006
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8005e1e:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 8005e20:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8005e24:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005e28:	18c3      	adds	r3, r0, r3
 8005e2a:	005b      	lsls	r3, r3, #1
 8005e2c:	293e      	cmp	r1, #62	; 0x3e
 8005e2e:	d909      	bls.n	8005e44 <SetEPRxCount+0x34>
 8005e30:	094a      	lsrs	r2, r1, #5
 8005e32:	06c9      	lsls	r1, r1, #27
 8005e34:	d101      	bne.n	8005e3a <SetEPRxCount+0x2a>
 8005e36:	1e50      	subs	r0, r2, #1
 8005e38:	b282      	uxth	r2, r0
 8005e3a:	0291      	lsls	r1, r2, #10
 8005e3c:	f441 4000 	orr.w	r0, r1, #32768	; 0x8000
 8005e40:	6018      	str	r0, [r3, #0]
 8005e42:	4770      	bx	lr
 8005e44:	084a      	lsrs	r2, r1, #1
 8005e46:	07c8      	lsls	r0, r1, #31
 8005e48:	bf48      	it	mi
 8005e4a:	3201      	addmi	r2, #1
 8005e4c:	0291      	lsls	r1, r2, #10
 8005e4e:	6019      	str	r1, [r3, #0]
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop

08005e54 <GetEPRxCount>:
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 8005e54:	f645 4350 	movw	r3, #23632	; 0x5c50
 8005e58:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	f243 0106 	movw	r1, #12294	; 0x3006
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8005e62:	b293      	uxth	r3, r2
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 8005e64:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8005e68:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8005e6c:	1842      	adds	r2, r0, r1
 8005e6e:	0051      	lsls	r1, r2, #1
 8005e70:	680b      	ldr	r3, [r1, #0]
}
 8005e72:	0598      	lsls	r0, r3, #22
 8005e74:	0d80      	lsrs	r0, r0, #22
 8005e76:	4770      	bx	lr

08005e78 <ByteSwap>:
uint16_t ByteSwap(uint16_t wSwW)
{
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
 8005e78:	b2c3      	uxtb	r3, r0
 8005e7a:	0a00      	lsrs	r0, r0, #8
  return(wRet);
}
 8005e7c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop

08005e84 <USB_SIL_Init>:
* Input          : None.
* Output         : None.
* Return         : Status.
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
 8005e84:	b410      	push	{r4}
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
  wInterrupt_Mask = IMR_MSK;
 8005e86:	f241 032c 	movw	r3, #4140	; 0x102c
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 8005e8a:	f645 4444 	movw	r4, #23620	; 0x5c44
  wInterrupt_Mask = IMR_MSK;
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 8005e8e:	f645 4240 	movw	r2, #23616	; 0x5c40
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
  wInterrupt_Mask = IMR_MSK;
 8005e92:	f44f 413f 	mov.w	r1, #48896	; 0xbf00
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 8005e96:	2000      	movs	r0, #0
 8005e98:	f2c4 0400 	movt	r4, #16384	; 0x4000
  wInterrupt_Mask = IMR_MSK;
 8005e9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 8005ea0:	f2c4 0200 	movt	r2, #16384	; 0x4000
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 8005ea4:	6020      	str	r0, [r4, #0]
  wInterrupt_Mask = IMR_MSK;
 8005ea6:	8019      	strh	r1, [r3, #0]
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 8005ea8:	6011      	str	r1, [r2, #0]
  return 0;
}
 8005eaa:	bc10      	pop	{r4}
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop

08005eb0 <USB_SIL_Read>:
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 8005eb0:	b570      	push	{r4, r5, r6, lr}
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 8005eb2:	f645 6355 	movw	r3, #24149	; 0x5e55
 8005eb6:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 8005eba:	f6c0 0300 	movt	r3, #2048	; 0x800
 8005ebe:	4628      	mov	r0, r5
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 8005ec0:	460e      	mov	r6, r1
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 8005ec2:	4798      	blx	r3
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 8005ec4:	f645 51d1 	movw	r1, #24017	; 0x5dd1
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 8005ec8:	4604      	mov	r4, r0
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 8005eca:	f6c0 0100 	movt	r1, #2048	; 0x800
 8005ece:	4628      	mov	r0, r5
 8005ed0:	4788      	blx	r1
 8005ed2:	f645 33b9 	movw	r3, #23481	; 0x5bb9
 8005ed6:	4601      	mov	r1, r0
 8005ed8:	4622      	mov	r2, r4
 8005eda:	4630      	mov	r0, r6
 8005edc:	f6c0 0300 	movt	r3, #2048	; 0x800
 8005ee0:	4798      	blx	r3

  /* Return the number of received data */
  return DataLength;
}
 8005ee2:	4620      	mov	r0, r4
 8005ee4:	bd70      	pop	{r4, r5, r6, pc}
 8005ee6:	bf00      	nop

08005ee8 <CTR_LP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
 8005ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eec:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 800609c <CTR_LP+0x1b4>
 8005ef0:	b083      	sub	sp, #12
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8005ef2:	f645 4b44 	movw	fp, #23620	; 0x5c44
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 8005ef6:	2300      	movs	r3, #0
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8005ef8:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 80060a0 <CTR_LP+0x1b8>
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8005efc:	4d62      	ldr	r5, [pc, #392]	; (8006088 <CTR_LP+0x1a0>)
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 8005efe:	f8ad 3006 	strh.w	r3, [sp, #6]
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8005f02:	f2c4 0b00 	movt	fp, #16384	; 0x4000
 8005f06:	46d0      	mov	r8, sl
 8005f08:	f8db 0000 	ldr.w	r0, [fp]
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8005f0c:	f44f 44b8 	mov.w	r4, #23552	; 0x5c00
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8005f10:	b282      	uxth	r2, r0
 8005f12:	0403      	lsls	r3, r0, #16
 8005f14:	f8aa 2000 	strh.w	r2, [sl]
 8005f18:	f140 80ab 	bpl.w	8006072 <CTR_LP+0x18a>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8005f1c:	f8b8 3000 	ldrh.w	r3, [r8]
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8005f20:	f2c4 0400 	movt	r4, #16384	; 0x4000
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8005f24:	f003 020f 	and.w	r2, r3, #15
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8005f28:	0090      	lsls	r0, r2, #2
 8005f2a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
	    SaveTState = SaveRState & EPTX_STAT;
 8005f2e:	4e57      	ldr	r6, [pc, #348]	; (800608c <CTR_LP+0x1a4>)
	    SaveRState &=  EPRX_STAT;	

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 8005f30:	f64b 71bf 	movw	r1, #49087	; 0xbfbf
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8005f34:	4f54      	ldr	r7, [pc, #336]	; (8006088 <CTR_LP+0x1a0>)
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
    if (EPindex == 0)
 8005f36:	4613      	mov	r3, r2
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8005f38:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8005f3c:	f889 2000 	strb.w	r2, [r9]
    if (EPindex == 0)
 8005f40:	2a00      	cmp	r2, #0
 8005f42:	d133      	bne.n	8005fac <CTR_LP+0xc4>
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8005f44:	6822      	ldr	r2, [r4, #0]
 8005f46:	b290      	uxth	r0, r2
 8005f48:	8028      	strh	r0, [r5, #0]
	    SaveTState = SaveRState & EPTX_STAT;
 8005f4a:	882b      	ldrh	r3, [r5, #0]
 8005f4c:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8005f50:	8032      	strh	r2, [r6, #0]
	    SaveRState &=  EPRX_STAT;	
 8005f52:	8828      	ldrh	r0, [r5, #0]
 8005f54:	f400 5340 	and.w	r3, r0, #12288	; 0x3000
 8005f58:	802b      	strh	r3, [r5, #0]

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 8005f5a:	6822      	ldr	r2, [r4, #0]
 8005f5c:	4011      	ands	r1, r2
 8005f5e:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 8005f62:	f081 0020 	eor.w	r0, r1, #32
 8005f66:	f440 4300 	orr.w	r3, r0, #32768	; 0x8000
 8005f6a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005f6e:	6022      	str	r2, [r4, #0]

      /* DIR bit = origin of the interrupt */

      if ((wIstr & ISTR_DIR) == 0)
 8005f70:	f8b8 1000 	ldrh.w	r1, [r8]
 8005f74:	f001 0010 	and.w	r0, r1, #16
 8005f78:	b283      	uxth	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d049      	beq.n	8006012 <CTR_LP+0x12a>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */

        wEPVal = _GetENDPOINT(ENDP0);
 8005f7e:	6822      	ldr	r2, [r4, #0]
 8005f80:	b291      	uxth	r1, r2
 8005f82:	f8ad 1006 	strh.w	r1, [sp, #6]
        
        if ((wEPVal &EP_SETUP) != 0)
 8005f86:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8005f8a:	f400 6300 	and.w	r3, r0, #2048	; 0x800
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	2a00      	cmp	r2, #0
 8005f92:	d171      	bne.n	8006078 <CTR_LP+0x190>

		      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
          return;
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
 8005f94:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8005f98:	b208      	sxth	r0, r1
 8005f9a:	2800      	cmp	r0, #0
 8005f9c:	dab4      	bge.n	8005f08 <CTR_LP+0x20>
        {
          _ClearEP_CTR_RX(ENDP0);
 8005f9e:	6822      	ldr	r2, [r4, #0]
 8005fa0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	6023      	str	r3, [r4, #0]
          Out0_Process();
 8005fa8:	4939      	ldr	r1, [pc, #228]	; (8006090 <CTR_LP+0x1a8>)
 8005faa:	e038      	b.n	800601e <CTR_LP+0x136>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8005fac:	6804      	ldr	r4, [r0, #0]
 8005fae:	b2a1      	uxth	r1, r4
 8005fb0:	f8ad 1006 	strh.w	r1, [sp, #6]
      if ((wEPVal & EP_CTR_RX) != 0)
 8005fb4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8005fb8:	b214      	sxth	r4, r2
 8005fba:	2c00      	cmp	r4, #0
 8005fbc:	db1b      	blt.n	8005ff6 <CTR_LP+0x10e>
        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
 8005fbe:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8005fc2:	f001 0280 	and.w	r2, r1, #128	; 0x80
 8005fc6:	b293      	uxth	r3, r2
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d09d      	beq.n	8005f08 <CTR_LP+0x20>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 8005fcc:	f899 4000 	ldrb.w	r4, [r9]
 8005fd0:	f648 730f 	movw	r3, #36623	; 0x8f0f
 8005fd4:	00a0      	lsls	r0, r4, #2
 8005fd6:	f100 4180 	add.w	r1, r0, #1073741824	; 0x40000000
 8005fda:	f501 42b8 	add.w	r2, r1, #23552	; 0x5c00
 8005fde:	6810      	ldr	r0, [r2, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 8005fe0:	3c01      	subs	r4, #1
      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 8005fe2:	4003      	ands	r3, r0
 8005fe4:	6013      	str	r3, [r2, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 8005fe6:	f240 031c 	movw	r3, #28
 8005fea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005fee:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8005ff2:	4788      	blx	r1
 8005ff4:	e788      	b.n	8005f08 <CTR_LP+0x20>
      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
      if ((wEPVal & EP_CTR_RX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 8005ff6:	6801      	ldr	r1, [r0, #0]
 8005ff8:	f640 728f 	movw	r2, #3983	; 0xf8f
 8005ffc:	400a      	ands	r2, r1
 8005ffe:	6002      	str	r2, [r0, #0]

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 8006000:	f240 0038 	movw	r0, #56	; 0x38
 8006004:	3b01      	subs	r3, #1
 8006006:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800600a:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 800600e:	47a0      	blx	r4
 8006010:	e7d5      	b.n	8005fbe <CTR_LP+0xd6>
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */

        _ClearEP_CTR_TX(ENDP0);
 8006012:	6821      	ldr	r1, [r4, #0]
 8006014:	f648 730f 	movw	r3, #36623	; 0x8f0f
 8006018:	400b      	ands	r3, r1
        In0_Process();
 800601a:	491e      	ldr	r1, [pc, #120]	; (8006094 <CTR_LP+0x1ac>)
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */

        _ClearEP_CTR_TX(ENDP0);
 800601c:	6023      	str	r3, [r4, #0]
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
        {
          _ClearEP_CTR_RX(ENDP0);
          Out0_Process();
 800601e:	4788      	blx	r1
          /* before terminate set Tx & Rx status */
     
		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 8006020:	6820      	ldr	r0, [r4, #0]
 8006022:	883a      	ldrh	r2, [r7, #0]
 8006024:	f64b 73bf 	movw	r3, #49087	; 0xbfbf
 8006028:	f402 5180 	and.w	r1, r2, #4096	; 0x1000
 800602c:	b28a      	uxth	r2, r1
 800602e:	4003      	ands	r3, r0
 8006030:	b10a      	cbz	r2, 8006036 <CTR_LP+0x14e>
 8006032:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006036:	8838      	ldrh	r0, [r7, #0]
 8006038:	f400 5100 	and.w	r1, r0, #8192	; 0x2000
 800603c:	b28a      	uxth	r2, r1
 800603e:	b10a      	cbz	r2, 8006044 <CTR_LP+0x15c>
 8006040:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006044:	8830      	ldrh	r0, [r6, #0]
 8006046:	f000 0110 	and.w	r1, r0, #16
 800604a:	b28a      	uxth	r2, r1
 800604c:	b10a      	cbz	r2, 8006052 <CTR_LP+0x16a>
 800604e:	f083 0310 	eor.w	r3, r3, #16
 8006052:	8830      	ldrh	r0, [r6, #0]
 8006054:	f000 0120 	and.w	r1, r0, #32
 8006058:	b28a      	uxth	r2, r1
 800605a:	b10a      	cbz	r2, 8006060 <CTR_LP+0x178>
 800605c:	f083 0320 	eor.w	r3, r3, #32
 8006060:	f443 4000 	orr.w	r0, r3, #32768	; 0x8000
 8006064:	f44f 41b8 	mov.w	r1, #23552	; 0x5c00
 8006068:	f040 0280 	orr.w	r2, r0, #128	; 0x80
 800606c:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8006070:	600a      	str	r2, [r1, #0]
      } /* if((wEPVal & EP_CTR_TX) != 0) */

    }/* if(EPindex == 0) else */

  }/* while(...) */
}
 8006072:	b003      	add	sp, #12
 8006074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

        wEPVal = _GetENDPOINT(ENDP0);
        
        if ((wEPVal &EP_SETUP) != 0)
        {
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 8006078:	6820      	ldr	r0, [r4, #0]
 800607a:	f640 728f 	movw	r2, #3983	; 0xf8f
 800607e:	4002      	ands	r2, r0
 8006080:	6022      	str	r2, [r4, #0]
          Setup0_Process();
 8006082:	4905      	ldr	r1, [pc, #20]	; (8006098 <CTR_LP+0x1b0>)
 8006084:	e7cb      	b.n	800601e <CTR_LP+0x136>
 8006086:	bf00      	nop
 8006088:	2000102e 	.word	0x2000102e
 800608c:	20001030 	.word	0x20001030
 8006090:	0800556d 	.word	0x0800556d
 8006094:	08005a8d 	.word	0x08005a8d
 8006098:	0800565d 	.word	0x0800565d
 800609c:	200007d0 	.word	0x200007d0
 80060a0:	20001004 	.word	0x20001004
 80060a4:	00000a0a 	.word	0x00000a0a
 80060a8:	2a2a2a2a 	.word	0x2a2a2a2a
 80060ac:	2a2a2a2a 	.word	0x2a2a2a2a
 80060b0:	2a2a2a2a 	.word	0x2a2a2a2a
 80060b4:	2a2a2a2a 	.word	0x2a2a2a2a
 80060b8:	2a2a2a2a 	.word	0x2a2a2a2a
 80060bc:	2a2a2a2a 	.word	0x2a2a2a2a
 80060c0:	2a2a2a2a 	.word	0x2a2a2a2a
 80060c4:	2a2a2a2a 	.word	0x2a2a2a2a
 80060c8:	2a2a2a2a 	.word	0x2a2a2a2a
 80060cc:	2a2a2a2a 	.word	0x2a2a2a2a
 80060d0:	2a2a2a2a 	.word	0x2a2a2a2a
 80060d4:	2a2a2a2a 	.word	0x2a2a2a2a
 80060d8:	2a2a2a2a 	.word	0x2a2a2a2a
 80060dc:	0a2a2a2a 	.word	0x0a2a2a2a
 80060e0:	00000000 	.word	0x00000000
 80060e4:	20202020 	.word	0x20202020
 80060e8:	20202020 	.word	0x20202020
 80060ec:	20202020 	.word	0x20202020
 80060f0:	20202020 	.word	0x20202020
 80060f4:	20202020 	.word	0x20202020
 80060f8:	704f2020 	.word	0x704f2020
 80060fc:	4d436e65 	.word	0x4d436e65
 8006100:	20202020 	.word	0x20202020
 8006104:	20202020 	.word	0x20202020
 8006108:	20202020 	.word	0x20202020
 800610c:	20202020 	.word	0x20202020
 8006110:	20202020 	.word	0x20202020
 8006114:	20202020 	.word	0x20202020
 8006118:	0a202020 	.word	0x0a202020
 800611c:	00000000 	.word	0x00000000
 8006120:	2e31202a 	.word	0x2e31202a
 8006124:	20202020 	.word	0x20202020
 8006128:	20202020 	.word	0x20202020
 800612c:	20202020 	.word	0x20202020
 8006130:	20202020 	.word	0x20202020
 8006134:	20202020 	.word	0x20202020
 8006138:	20202020 	.word	0x20202020
 800613c:	20202020 	.word	0x20202020
 8006140:	20202020 	.word	0x20202020
 8006144:	20202020 	.word	0x20202020
 8006148:	20202020 	.word	0x20202020
 800614c:	20202020 	.word	0x20202020
 8006150:	20202020 	.word	0x20202020
 8006154:	0a2a2020 	.word	0x0a2a2020
 8006158:	00000000 	.word	0x00000000
 800615c:	2e32202a 	.word	0x2e32202a
 8006160:	20202020 	.word	0x20202020
 8006164:	20202020 	.word	0x20202020
 8006168:	20202020 	.word	0x20202020
 800616c:	20202020 	.word	0x20202020
 8006170:	20202020 	.word	0x20202020
 8006174:	20202020 	.word	0x20202020
 8006178:	20202020 	.word	0x20202020
 800617c:	20202020 	.word	0x20202020
 8006180:	20202020 	.word	0x20202020
 8006184:	20202020 	.word	0x20202020
 8006188:	20202020 	.word	0x20202020
 800618c:	20202020 	.word	0x20202020
 8006190:	0a2a2020 	.word	0x0a2a2020
 8006194:	00000000 	.word	0x00000000
 8006198:	2e33202a 	.word	0x2e33202a
 800619c:	20202020 	.word	0x20202020
 80061a0:	20202020 	.word	0x20202020
 80061a4:	20202020 	.word	0x20202020
 80061a8:	20202020 	.word	0x20202020
 80061ac:	20202020 	.word	0x20202020
 80061b0:	20202020 	.word	0x20202020
 80061b4:	20202020 	.word	0x20202020
 80061b8:	20202020 	.word	0x20202020
 80061bc:	20202020 	.word	0x20202020
 80061c0:	20202020 	.word	0x20202020
 80061c4:	20202020 	.word	0x20202020
 80061c8:	20202020 	.word	0x20202020
 80061cc:	0a2a2020 	.word	0x0a2a2020
 80061d0:	00000000 	.word	0x00000000
 80061d4:	2e34202a 	.word	0x2e34202a
 80061d8:	20202020 	.word	0x20202020
 80061dc:	20202020 	.word	0x20202020
 80061e0:	20202020 	.word	0x20202020
 80061e4:	20202020 	.word	0x20202020
 80061e8:	20202020 	.word	0x20202020
 80061ec:	20202020 	.word	0x20202020
 80061f0:	20202020 	.word	0x20202020
 80061f4:	20202020 	.word	0x20202020
 80061f8:	20202020 	.word	0x20202020
 80061fc:	20202020 	.word	0x20202020
 8006200:	20202020 	.word	0x20202020
 8006204:	20202020 	.word	0x20202020
 8006208:	0a2a2020 	.word	0x0a2a2020
 800620c:	00000000 	.word	0x00000000
 8006210:	2e35202a 	.word	0x2e35202a
 8006214:	20202020 	.word	0x20202020
 8006218:	20202020 	.word	0x20202020
 800621c:	20202020 	.word	0x20202020
 8006220:	20202020 	.word	0x20202020
 8006224:	20202020 	.word	0x20202020
 8006228:	20202020 	.word	0x20202020
 800622c:	20202020 	.word	0x20202020
 8006230:	20202020 	.word	0x20202020
 8006234:	20202020 	.word	0x20202020
 8006238:	20202020 	.word	0x20202020
 800623c:	20202020 	.word	0x20202020
 8006240:	20202020 	.word	0x20202020
 8006244:	0a2a2020 	.word	0x0a2a2020
 8006248:	00000000 	.word	0x00000000
 800624c:	2e36202a 	.word	0x2e36202a
 8006250:	20202020 	.word	0x20202020
 8006254:	20202020 	.word	0x20202020
 8006258:	20202020 	.word	0x20202020
 800625c:	20202020 	.word	0x20202020
 8006260:	20202020 	.word	0x20202020
 8006264:	20202020 	.word	0x20202020
 8006268:	20202020 	.word	0x20202020
 800626c:	20202020 	.word	0x20202020
 8006270:	20202020 	.word	0x20202020
 8006274:	20202020 	.word	0x20202020
 8006278:	20202020 	.word	0x20202020
 800627c:	20202020 	.word	0x20202020
 8006280:	0a2a2020 	.word	0x0a2a2020
 8006284:	00000000 	.word	0x00000000
 8006288:	2e37202a 	.word	0x2e37202a
 800628c:	20202020 	.word	0x20202020
 8006290:	20202020 	.word	0x20202020
 8006294:	20202020 	.word	0x20202020
 8006298:	20202020 	.word	0x20202020
 800629c:	20202020 	.word	0x20202020
 80062a0:	20202020 	.word	0x20202020
 80062a4:	20202020 	.word	0x20202020
 80062a8:	20202020 	.word	0x20202020
 80062ac:	20202020 	.word	0x20202020
 80062b0:	20202020 	.word	0x20202020
 80062b4:	20202020 	.word	0x20202020
 80062b8:	20202020 	.word	0x20202020
 80062bc:	0a2a2020 	.word	0x0a2a2020
 80062c0:	00000000 	.word	0x00000000
 80062c4:	2e38202a 	.word	0x2e38202a
 80062c8:	20202020 	.word	0x20202020
 80062cc:	20202020 	.word	0x20202020
 80062d0:	20202020 	.word	0x20202020
 80062d4:	20202020 	.word	0x20202020
 80062d8:	20202020 	.word	0x20202020
 80062dc:	20202020 	.word	0x20202020
 80062e0:	20202020 	.word	0x20202020
 80062e4:	20202020 	.word	0x20202020
 80062e8:	20202020 	.word	0x20202020
 80062ec:	20202020 	.word	0x20202020
 80062f0:	20202020 	.word	0x20202020
 80062f4:	20202020 	.word	0x20202020
 80062f8:	0a2a2020 	.word	0x0a2a2020
 80062fc:	00000000 	.word	0x00000000
 8006300:	2e39202a 	.word	0x2e39202a
 8006304:	20202020 	.word	0x20202020
 8006308:	20202020 	.word	0x20202020
 800630c:	20202020 	.word	0x20202020
 8006310:	20202020 	.word	0x20202020
 8006314:	20202020 	.word	0x20202020
 8006318:	20202020 	.word	0x20202020
 800631c:	20202020 	.word	0x20202020
 8006320:	20202020 	.word	0x20202020
 8006324:	20202020 	.word	0x20202020
 8006328:	20202020 	.word	0x20202020
 800632c:	20202020 	.word	0x20202020
 8006330:	20202020 	.word	0x20202020
 8006334:	0a2a2020 	.word	0x0a2a2020
 8006338:	00000000 	.word	0x00000000
 800633c:	2e6d202a 	.word	0x2e6d202a
 8006340:	654d2020 	.word	0x654d2020
 8006344:	2020756e 	.word	0x2020756e
 8006348:	20202020 	.word	0x20202020
 800634c:	20202020 	.word	0x20202020
 8006350:	20202020 	.word	0x20202020
 8006354:	20202020 	.word	0x20202020
 8006358:	20202020 	.word	0x20202020
 800635c:	20202020 	.word	0x20202020
 8006360:	20202020 	.word	0x20202020
 8006364:	20202020 	.word	0x20202020
 8006368:	20202020 	.word	0x20202020
 800636c:	20202020 	.word	0x20202020
 8006370:	0a2a2020 	.word	0x0a2a2020
 8006374:	00000000 	.word	0x00000000
 8006378:	0000000a 	.word	0x0000000a
 800637c:	00203e3e 	.word	0x00203e3e

08006380 <Virtual_Com_Port_StringVendor>:
 8006380:	00530326 004d0054 00630069 006f0072     &.S.T.M.i.c.r.o.
 8006390:	006c0065 00630065 00720074 006e006f     e.l.e.c.t.r.o.n.
 80063a0:	00630069 00000073                       i.c.s...

080063a8 <Virtual_Com_Port_DeviceDescriptor>:
 80063a8:	02000112 40000002 57400483 02010200     .......@..@W....
 80063b8:	00000103                                ....

080063bc <Virtual_Com_Port_StringLangID>:
 80063bc:	04090304                                ....

080063c0 <Virtual_Com_Port_StringProduct>:
 80063c0:	00530332 004d0054 00320033 00560020     2.S.T.M.3.2. .V.
 80063d0:	00720069 00750074 006c0061 00430020     i.r.t.u.a.l. .C.
 80063e0:	004d004f 00500020 0072006f 00200074     O.M. .P.o.r.t. .
 80063f0:	00000020                                 ...

080063f4 <Virtual_Com_Port_ConfigDescriptor>:
 80063f4:	00430209 c0000102 00040932 02020100     ..C.....2.......
 8006404:	24050001 05011000 01000124 02022404     ...$....$....$..
 8006414:	00062405 82050701 ff000803 00010409     .$..............
 8006424:	00000a02 03050700 00004002 02810507     .........@......
 8006434:	00000040                                @...
